(define "GroupScore"
    (and
        (set Score Mover (max (sizes Group "ScoreConnection" Mover)))
        (set Score Next (max (sizes Group "ScoreConnection" Next)))
))

(define "BonusMover"
    (and
        (set Score Mover 
            (+ 
                (max (sizes Group "ScoreConnection" Mover))
                (count Groups "ScoreConnection" if:(= (who at:(to)) (mover))) 
        ))
        (set Score Next 
            (+ 
                (max (sizes Group "ScoreConnection" Next))
                (count Groups "ScoreConnection" if:(= (who at:(to)) (next))) 
))))

(define "BonusOpponent"
    (and
        (set Score Mover 
            (+ 
                (max (sizes Group "ScoreConnection" Mover))
                (count Groups "ScoreConnection" if:(= (who at:(to)) (next))) 
        ))
        (set Score Next 
            (+ 
                (max (sizes Group "ScoreConnection" Next))
                (count Groups "ScoreConnection" if:(= (who at:(to)) (mover))) 
))))

//----------------------------
(define "BrainCoral"
    (do
        (move 
            Add
            (to (sites Empty)
        ))
        ifAfterwards:("AllHave1Connection2Edge" (sites Around (last To) "Connection" includeSelf:True)) 
        (then <SType:selScoring>)   
))

(define "AllHave1Connection2Edge"
    (all Sites
        #1
        if:(or
            (and 
                (is Empty (site))
                (is In (site) (sites Outer))
            )
            (!= Infinity
                (count Steps
                    (step "Connection"
                        (to if:(is Empty (to)))
                    )
                    (site)
                    (difference (sites Outer) (site))
)))))

(define "BranchCoral"
    (do
        (move 
            Add
            (to 
                (sites Empty) 
                if:(< 1 
                    (count Sites 
                        in:(intersection
                            (sites Around (to) "Connection")
                            (sites Empty)
        )))))
        ifAfterwards:("AllHave1Connection2Edge" 
            (intersection 
                (sites Around (last To) "Connection")
                (sites Empty)
        )) 
        (then 
            (and
                ("Capture" 
                    (intersection 
                        (sites Occupied by:All) 
                        (sites Around (last To) "Connection") 
                ))
                (<SType:selScoring>)
))))

(define "Capture"  
    (forEach Value
        (array #1)
        (if 
            (not ("Has2Connections2Edge" (value)))
            (remove (value))
)))

(define "Has2Connections2Edge"
    (< 1
        (count Sites 
            in:(sites From 
                (select 
                    (from 
                        (intersection 
                            (sites Empty) 
                            (sites Around #1 "Connection")
                        )
                        if:(!= Infinity
                            (count Steps
                                (step "Connection"
                                    (to if:(is Empty (to)))
                                )
                                (from)
                                (sites Outer)
))))))))

/-----------------------------------------
// Defines for Options

(define "ScoreConnection" <BoardShape:directionScored>)
(define "Connection" <BoardShape:directionUsed>)
(define "BoardUsed" <BoardShape:gridType> )

(define "HexLimp" (board (hex Limping (- <BoardSize:smallSide> 1)) use:Cell))
(define "Hex2Limp" (board (hex  (- <BoardSize:smallSide> 1) (+ <BoardSize:smallSide> 1)) use:Cell))
(define "HexCell" (board (hex Hexagon <BoardSize:smallSide>) use:Cell))
(define "TriSquare" (board (tiling T33434 (- <BoardSize:smallSide> 2)) use:Vertex))
(define "SquareGrid" (board (square <BoardSize:smallSide>) use:Cell))
(define "SquareDiagonal" (board (square <BoardSize:smallSide>) use:Vertex))

//-----------------------------------------------
// Main routine

(game "Brain Coral"
    (players 2)
    (equipment
        {
        "BoardUsed"
        (piece "Ball" P1)
        (piece "Ball" P2)
        }
    )
    (rules
        (start 
            //   {
            (set Score Each 0)
            //   }
        )
        (play
            <GType:selGame>
        )
        (end 
            (if 
                (no Moves Next)
                {
                (if 
                    (= (score Mover) (score Next))
                    (result Mover Win) //last to place wins a tie
                )
                (if 
                    (!= (score Mover) (score Next))
                    (byScore)
                )
                }
))))

//-------------------------------------------------
// Options

(option "Game Name" <GType> args:{<selGame>}
    { 
    (item "Brain Coral" <"BrainCoral"> "Brain Coral Game")**
    (item "Branching Coral" <"BranchCoral"> "Branching Coral Game")
    }
)

(option "Scoring" <SType> args:{<selScoring>}
    {
    (item "Largest group" <"GroupScore"> "Score a point for each piece in your largest group")
    (item "Mover Bonus scoring" <"BonusMover"> "Scoring Option: score the size of your largest group, then score an additional point for every group you have on the board.")**
    (item "Opponent Bonus scoring" <"BonusOpponent"> "Scoring Option: score the size of your largest group, then score an additional point for every opponent's group on the board.")
    }
)

(option "Board Grid" <BoardShape> args:{<gridType> <directionUsed> <diagShow> <directionScored>} 
    {
    (item "Hex Limping" <"HexLimp"> <Orthogonal> <Hidden> <Orthogonal>  "Hex N / N-1 Grid")*
    (item "Hex Double Limping" <"Hex2Limp"> <Orthogonal> <Hidden> <Orthogonal>  "Hex N+1 / N-1 Grid")
    (item "Hex Grid" <"HexCell"> <Orthogonal> <Hidden> <Orthogonal> "Hex Grid - Standard")
    (item "TriSquare Grid" <"TriSquare"> <Adjacent> <Hidden> <Adjacent> "Triangle-Square Grid")
    (item "TriSquare Diagonal" <"TriSquare"> <All> <ThinDotted> <All> "Triangle-Square Grid")
    (item "Square grid" <"SquareGrid"> <Orthogonal> <Hidden> <Orthogonal> "Square Grid")
    (item "Square grid - Diagonals score" <"SquareDiagonal"> <Orthogonal> <Hidden> <All> "Square Grid - Diagonals score")
    (item "Square Diagonal" <"SquareDiagonal"> <All> <ThinDotted> <All> "Square Grid")
    }
)

(option "Board Size" <BoardSize> args:{<smallSide>} 
    {
    (item "Order 3" <3> "Order 3 board")
    (item "Order 4" <4> "Order 4 board")
    (item "Order 5" <5> "Order 5 board")*
    (item "Order 6" <6> "Order 6 board")
    (item "Order 7" <7> "Order 7 board")
    (item "Order 8" <8> "Order 8 board")
    (item "Order 9" <9> "Order 9 board")
    (item "Order 11" <11> "Order 11 board")
    }
)

//---------------------------------------------
//(define "ColourBackground" (colour 155 160 195)) 
(define "ColourBackground" (colour 126 130 156)) 

(metadata
    (info
        {
        (description "Brain Coral and Branching Coral are two related placement games based on the principle of placing pieces, such that, afterwards, connections via empty sites still remain from every board site to an empty site at the perimeter. 
            
            Brain Coral requires a single connection for each site.  
            
            Branching Coral, in addition, requires 2 adjacent empty sites for placement, and then afterwards, all the neighboring stones with less than 2 adjacent empty sites are simultaneously captured.
            
            Passing is not allowed.
            
        Scoring is based on the size of the largest group. Scoring options provide a bonus point for each separate group that belongs to Option 1, yourself; or  Option 2, your opponent.")
        (rules "Goal: Score the most points: 
            -- One point for each stone in one's largest group.
            -- Bonus points are also awarded according to the selected option.
            
            In both games, the board starts empty, then players take alternating turns placing one of their stones onto an empty site, according to the placement rule for the selected game. (See 'Placement rules' below ) 
            
            There is no passing. The game ends when no more placements can be made.  
            
            Players score one point for every stone in their largest group, then, if applicable, score bonus points according to the selected option.
            
            The player with the higher score wins. If the scores are tied, the last player to have placed a stone is the winner.   
            
            Placement rules:
            Brain Coral:
            After placement, every site of the board must remain connected to an empty perimeter site via a continuous path of empty sites.
            (note that a stone placed on a perimeter site needs to be next to an empty site to qualify.) 
            
            Branching Coral:
            Each stone, when placed, must be adjacent to 2 empty sites.
            Directly after placement and before capture, every site on the board must either be an empty edge site, or be connected to an empty edge site via a series of empty sites to an empty site(s).
            
        Then, after placement, simultaneously remove all the adjacent stones that no longer are next to 2 empty sites.")
        (version "1.2.8")
        (classification "experimental")
        (author "Dale W. Walton")
        (credit "Dale W. Walton")
        (date "06-05-2021")
        }
    )
    
    (graphics 
        {
        (player Colour P1 (colour 120 36 0))
        (player Colour P2 (colour Cream))
        (piece Scale "Ball" 0.98)
        (board Colour Phase0 "ColourBackground")
        (board StyleThickness InnerEdges 0.4)
        (board StyleThickness OuterEdges 0.6)
        (board StyleThickness InnerVertices 0.45)
        (board StyleThickness OuterVertices 0.45)
        (board Colour InnerVertices (colour Grey))
        (board Colour OuterVertices (colour Grey))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        (show Edges Diagonal <BoardShape:diagShow> (colour DarkGrey))
        
        (board Background image:"Disc" fillColour:"ColourBackground" edgeColour:"ColourBackground" scaleX:1.2 scaleY:1.15 offsetX:0.021 offsetY:-0.015 )
        }
    )
    (ai
        "Brain Coral_ai"
    )
)
