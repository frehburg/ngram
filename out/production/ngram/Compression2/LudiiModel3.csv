3
KEY,WORDS,MULTIPLICITY
<Board:regionsP1>,{ <Board:regionsP1> },1
,<Board:regionsP1> },1
Rescue,) Rescue a,3
,Rescue a,3
half,P1 half right,1
,P2 half right,1
,half right,2
,right half (,2
,half (,2
slowed,not slowed down,1
,slowed down,1
-90,rotate -90 (,5
,-90 (,5
functions,except functions drawn,8
,General functions Source:,7
,functions drawn,9
,functions Source:,7
,General functions Usage:,1
,Hand functions STRING,1
,small functions drawn,1
,functions Usage:,1
,functions STRING,1
don't,unpredictable don't mess,1
,don't mess,1
<Ruleset>,STRING <Ruleset> args:,1
,<Ruleset> args:,1
tiling,( tiling T33434,9
,( tiling T3464,5
,tiling T33434,9
,tiling T3464,5
,( tiling T33336,1
,tiling T33336,1
,( tiling T3636,1
,tiling T3636,1
forward:True,STRING forward:True (,1
,forward:True (,1
,origin:True forward:True ),2
,forward:True ),6
,) forward:True ),4
your,by your pieces,1
,your pieces,1
<Moves:dog>,N <Moves:dog> ),1
,<Moves:dog> ),1
<Players:removeLastPiece>,) <Players:removeLastPiece> ),1
,<Players:removeLastPiece> ),1
without,move without capture,1
,without capture,1
,Done without simultaneous,1
,without simultaneous,1
,modelled without the,1
,without the,2
,game without the,1
,or without capturing,1
,side without any,1
,elapsed without a,1
,without capturing,1
,without any,3
,without a,1
,Move without any,2
,steps without state,2
,those without subsequent,1
,without state,2
,without subsequent,1
<Player:startP4>,<Player:startP3> <Player:startP4> },3
,<Player:startP4> },3
stalemate,a stalemate due,1
,in stalemate --COMMA--,1
,a stalemate .,1
,stalemate due,1
,stalemate --COMMA--,1
,stalemate .,1
next:3,<Player:option> next:3 ),1
,next:3 ),1
these,with these numbers,1
,these numbers,1
next:4,<Player:option> next:4 ),1
,next:4 ),1
would,that would be,1
,would be,1
,steps would then,1
,step would then,1
,would then,2
protected,is protected by,1
,protected by,1
next:0,STRING next:0 result:,1
,next:0 result:,1
pick,to pick up,1
,pick up,1
next:1,STRING next:1 result:,1
,next:1 result:,1
,<Player:option> next:1 ),1
,next:1 ),1
next:2,STRING next:2 result:,1
,next:2 result:,1
,<Player:option> next:2 ),1
,next:2 ),1
''shift-swaps'',Mover ''shift-swaps'' with,1
,''shift-swaps'' with,1
<distance>,<type> <distance> },2
,<distance> },3
,{ <distance> },1
firstMoveOnTrack,( firstMoveOnTrack STRING,7
,firstMoveOnTrack STRING,7
<44>,STRING <44> STRING,1
,<44> STRING,1
wins,player wins --COMMA--,1
,wins --COMMA--,1
,place wins a,1
,wins a,1
!,( ! =,645
,! =,645
Small,- Small Piece,1
,Small Piece,1
<Board:regionsP2>,{ <Board:regionsP2> },1
,<Board:regionsP2> },1
<numTiles>,<boardWidth> <numTiles> },1
,<numTiles> },1
%,( % (,21
,% (,21
&,INTEGER & INTEGER,14
,& INTEGER,14
destinations,resulting destinations it,1
,all destinations are,1
,destinations it,1
,destinations are,1
(,STRING ( players,948
,) ( equipment,950
,{ ( board,750
,board ( merge,89
,merge ( shift,32
,INTEGER ( square,87
,) ( wedge,12
,) ( piece,2411
,P1 ( or,33
,) ( rules,979
,rules ( start,813
,{ ( place,569
,STRING ( difference,173
,difference ( expand,122
,expand ( sites,526
,) ( sites,2544
,) ( place,4083
,) ( play,579
,play ( forEach,252
,) ( end,745
,{ ( STRING,303
,) ( if,2154
,if ( <=,108
,<= ( count,72
,) ( result,1268
,) ( option,504
,{ ( item,514
,* ( item,310
,( game,943
,( players,959
,( equipment,979
,( board,814
,( merge,154
,( shift,469
,( square,493
,( wedge,108
,( piece,2917
,( or,1967
,( rules,982
,( start,964
,( place,4963
,( difference,683
,( expand,687
,( sites,8871
,( play,1425
,( forEach,1855
,( end,1007
,( STRING,8863
,( if,6152
,( <=,227
,( count,3018
,( result,1306
,( option,514
,( item,2694
,STRING ( forEach,191
,Site ( sites,225
,From ( forEach,2
,STRING ( STRING,647
,) ( remember,112
,STRING ( site,120
,) ( game,661
,INTEGER ( rectangle,266
,) ( shift,397
,or ( STRING,475
,STRING ( sites,1489
,STRING ( union,184
,union ( expand,74
,expand ( union,11
,union ( sites,283
,) ( expand,170
,play ( if,297
,if ( is,1425
,) ( do,136
,do ( STRING,26
,next: ( forEach,58
,) ( then,1278
,then ( and,350
,and ( if,131
,if ( !,250
,INTEGER ( count,923
,in: ( sites,404
,sites ( values,74
,if ( =,861
,Steps ( last,15
,) ( last,50
,) ( and,629
,and ( forEach,33
,) ( remove,311
,remove ( site,33
,In ( last,195
,remove ( last,78
,) ( forget,92
,) ( forEach,584
,{ ( if,437
,if ( no,475
,if ( or,359
,or ( or,10
,or ( no,43
,) ( no,62
,) ( =,775
,in: ( difference,55
,( define,4267
,( remember,158
,( site,1051
,( rectangle,504
,( union,571
,( is,5215
,( do,586
,( then,1851
,( and,2597
,( !,645
,( values,188
,( =,2721
,( last,2360
,( remove,866
,( forget,136
,( no,704
,STRING ( move,803
,#2 ( between,38
,if: ( is,1228
,Enemy ( who,971
,at: ( between,292
,) ( apply,555
,apply ( remove,353
,remove ( between,199
,) ( to,2232
,Empty ( to,651
,then ( if,695
,if ( can,160
,Move ( hop,30
,hop ( from,34
,from ( last,284
,) ( difference,114
,) ( between,213
,) ( moveAgain,667
,{ ( square,14
,INTEGER ( rotate,105
,INTEGER ( wedge,77
,-2 ( wedge,8
,) ( STRING,2317
,) ( regions,1403
,) ( hand,381
,STRING ( handSite,966
,{ ( phase,319
,P1 ( play,49
,play ( move,439
,move ( from,784
,from ( handSite,326
,to ( sites,398
,if ( not,320
,not ( STRING,437
,) ( nextPhase,470
,Mover ( STRING,74
,) ( phase,416
,STRING ( play,679
,if ( STRING,550
,) ( or,333
,STRING ( from,338
,) ( move,996
,} ( end,230
,( move,3121
,( between,1450
,( who,1699
,( apply,785
,( to,7526
,( can,341
,( hop,34
,( from,3851
,( moveAgain,857
,( rotate,150
,( regions,1800
,( hand,403
,( handSite,2201
,( phase,768
,( not,1606
,( nextPhase,474
,P2 ( or,26
,or ( move,146
,<Board:type> ( piece,4
,< ( sites,53
,< ( board,27
,board ( makeFaces,1
,makeFaces ( remove,1
,remove ( square,12
,< ( STRING,80
,) ( item,1749
,board ( square,293
,< ( or,10
,< ( if,25
,< ( forEach,8
,) ( rulesets,168
,{ ( ruleset,168
,* ( ruleset,64
,) ( ruleset,133
,( makeFaces,1
,( rulesets,168
,( ruleset,367
,nextPhase ( STRING,86
,= ( count,317
,board ( add,55
,add ( remove,20
,remove ( merge,10
,{ ( shift,35
,-1 ( scale,3
,INTEGER ( scale,43
,( add,193
,( scale,86
,) ( merge,2
,merge ( rotate,3
,INTEGER ( shift,5
,) ( square,5
,) ( centrePoint,71
,( centrePoint,170
,<Board> ( piece,2
,<Jump:hare> ( if,1
,{ ( expand,37
,STRING ( centrePoint,31
,board ( remove,27
,remove ( rectangle,2
,board ( rectangle,127
,P1 ( STRING,104
,<Jump:coyote> ( if,1
,P2 ( play,18
,< ( add,1
,) ( scale,9
,< ( scale,3
,INTEGER ( remove,7
,remove ( scale,4
,{ ( nextPhase,3
,P2 ( STRING,94
,end ( STRING,34
,STRING ( or,246
,) ( priority,40
,{ ( forEach,79
,( priority,71
,<Place:geese> ( place,1
,< ( place,115
,N ( move,9
,Step ( directions,138
,( directions,812
,add ( concentric,4
,Each ( STRING,312
,to ( intersection,62
,intersection ( sites,331
,Piece ( then,23
,not ( can,107
,Move ( step,4
,step ( from,9
,from ( where,26
,{ ( addScore,2
,P2 ( -,4
,- ( count,39
,remove ( sites,8
,) ( add,75
,add ( piece,103
,to ( handSite,310
,nextPhase ( =,26
,) ( addScore,47
,P1 ( -,3
,) ( +,195
,+ ( score,12
,end ( if,630
,INTEGER ( score,10
,) ( byScore,141
,( concentric,60
,( intersection,441
,( step,24
,( where,270
,( addScore,79
,( -,442
,( +,437
,( score,339
,( byScore,143
,STRING ( add,10
,to ( last,90
,board ( keep,3
,keep ( square,2
,) ( poly,20
,N ( or,2
,Slide ( between,11
,between ( max,272
,trail: ( id,2
,Hop ( between,36
,if: ( =,173
,= ( what,294
,) ( id,919
,{ ( move,80
,Step ( to,150
,at: ( to,1894
,remove ( to,348
,and ( remove,59
,if ( and,800
,and ( no,21
,) ( not,311
,Move ( forEach,17
,STRING ( step,1
,step ( to,4
,if ( all,43
,( keep,3
,( poly,32
,( max,382
,( id,2040
,( what,548
,( all,282
,board ( scale,5
,if ( <,194
,< ( count,65
,( <,481
,remove ( add,5
,add ( merge,21
,{ ( rectangle,45
,{ ( add,7
,P1 ( if,3
,= ( state,175
,at: ( from,520
,at: ( site,401
,) ( set,1234
,at: ( last,541
,STRING ( intersection,64
,) ( union,175
,Piece ( or,8
,STRING ( then,216
,then ( set,126
,( state,444
,( set,2002
,to ( difference,79
,difference ( sites,487
,<Variant:board> ( piece,2
,STRING ( ahead,23
,ahead ( centrePoint,18
,merge ( scale,6
,< ( move,27
,if: ( and,358
,and ( is,482
,not ( is,812
,In ( to,331
,( ahead,293
,board ( splitCrossings,6
,splitCrossings ( regular,5
,( splitCrossings,7
,( regular,14
,P1 ( union,13
,= ( sites,8
,) ( graph,1
,STRING ( coord,3
,( graph,73
,( coord,174
,P1 ( move,30
,Diagonal ( between,92
,Add ( to,149
,nextPhase ( not,10
,not ( no,12
,) ( is,667
,in: ( forEach,55
,forEach ( sites,154
,if: ( <,76
,< ( row,1
,of: ( site,13
,) ( row,4
,of: ( where,13
,( row,30
,-4 ( square,2
,then ( forEach,45
,Move ( or,15
,or ( step,1
,from ( site,143
,Orthogonal ( to,166
,) ( hop,1
,Orthogonal ( between,162
,= ( who,48
,) ( define,3412
,STRING ( min,6
,min ( results,5
,from: ( last,71
,to: ( sites,173
,) ( count,224
,Steps ( from,13
,Piece ( STRING,38
,Piece ( if,14
,if ( >=,54
,( min,24
,( results,19
,( >=,182
,between ( exact,100
,if:#2 ( apply,1
,INTEGER ( and,1
,and ( !,112
,= ( row,2
,of: ( between,6
,of: ( from,21
,INTEGER ( is,49
,( exact,152
,between ( range,21
,if:#1 ( apply,2
,STRING ( is,182
,nextPhase ( and,19
,and ( not,158
,) ( <,126
,then ( moveAgain,50
,nextPhase ( or,5
,( range,93
,add ( scale,2
,) ( >=,17
,INTEGER ( -,24
,- ( from,2
,INTEGER ( where,9
,from: ( sites,16
,at: ( handSite,238
,merge ( square,2
,<Jump:bean> ( if,1
,to ( if,21
,in: ( intersection,110
,) ( intersection,33
,STRING ( set,133
,Pending ( sites,6
,To ( forEach,2
,To ( if,4
,#1 ( forEach,1
,STRING ( and,218
,#1 ( between,25
,#1 ( to,70
,In ( between,88
,STRING ( if,541
,< ( value,23
,Mover ( +,29
,INTEGER ( value,71
,STRING ( >,23
,> ( value,5
,Prev ( -,1
,- ( value,15
,S ( or,2
,and ( STRING,327
,) ( !,129
,in: ( STRING,23
,to ( STRING,288
,or ( is,201
,In ( where,27
,< ( do,9
,next: ( if,81
,STRING ( directions,542
,) ( directions,93
,( value,450
,( >,429
,Even ( count,28
,STRING ( expand,103
,from ( intersection,6
,intersection ( expand,60
,Mover ( =,25
,< ( start,99
,Remove ( intersection,2
,P1 ( priority,1
,if: ( or,110
,or ( and,52
,Friend ( who,531
,board ( rotate,22
,INTEGER ( add,1
,and ( =,197
,= ( to,87
,. ( if,4
,{ ( =,142
,= ( from,65
,at: ( centrePoint,4
,then ( remove,41
,remove ( centrePoint,2
,then ( intervene,3
,intervene ( from,4
,P2 ( move,34
,then ( custodial,37
,custodial ( from,66
,{ ( is,88
,>= ( count,101
,at: ( coord,42
,( intervene,4
,( custodial,71
,board ( graph,9
,or ( =,158
,STRING ( =,301
,if: ( <=,7
,<= ( row,2
,) ( rotate,1
,merge ( rectangle,3
,{ ( sites,179
,< ( piece,30
,< ( end,21
,STRING ( trackSite,277
,steps: ( count,22
,Remove ( from,77
,STRING ( apply,154
,) ( fromTo,391
,fromTo ( from,613
,from ( to,194
,{ ( track,296
,) ( track,1195
,) ( dice,155
,Each ( if,71
,not ( =,20
,play ( do,247
,do ( roll,100
,or ( forEach,121
,container: ( mover,53
,( trackSite,355
,( fromTo,613
,( track,1635
,( dice,158
,( roll,185
,( mover,517
,steps: ( mapEntry,10
,mapEntry ( count,12
,STRING ( hand,1
,. ( map,2
,{ ( pair,402
,) ( pair,2798
,next: ( or,42
,( mapEntry,776
,( map,405
,( pair,3208
,STRING ( face,72
,= ( STRING,203
,INTEGER ( STRING,245
,STRING ( count,168
,In ( STRING,66
,handSite ( who,22
,STRING ( !,95
,= ( pips,73
,at: ( STRING,401
,add ( add,2
,-1 ( square,6
,) ( map,318
,{ ( set,141
,do ( if,107
,) ( roll,83
,or ( if,126
,to ( mapEntry,223
,mapEntry ( mover,50
,Empty ( mapEntry,15
,if: ( STRING,214
,STRING ( pips,12
,not ( all,102
,and ( set,88
,( face,113
,( pips,192
,mapEntry ( next,5
,= ( topLevel,38
,steps: ( pips,44
,STRING ( mapEntry,100
,Remove ( site,21
,if:#1 ( STRING,6
,STRING ( no,69
,STRING ( size,8
,#1 ( if,7
,< ( trackSite,7
,from: ( site,17
,Home ( regions,149
,Home ( map,4
,Bar ( piece,9
,noMoveYet: ( firstMoveOnTrack,7
,Mover ( if,9
,) ( max,48
,Move ( if,6
,( next,91
,( topLevel,59
,( size,206
,( firstMoveOnTrack,7
,to ( centrePoint,13
,if: ( not,366
,apply ( if,142
,add ( hole,12
,hole ( merge,12
,Off ( STRING,35
,from ( from,180
,start ( place,131
,Empty ( handSite,70
,( hole,17
,Each ( or,481
,) ( <=,58
,) ( pips,37
,End ( STRING,24
,P1 ( sites,379
,P2 ( sites,380
,play ( max,1
,Moves ( do,1
,STRING ( mover,64
,) ( -,220
,- ( pips,11
,. ( define,29
,or ( not,41
,INTEGER ( size,122
,<Start:rules> ( play,3
,= ( value,69
,and ( all,10
,} ( then,88
,and ( moveAgain,93
,STRING ( all,33
,) ( from,27
,level: ( level,306
,from: ( from,118
,#1 ( *,17
,Level ( last,46
,FromTop ( if,28
,= ( mover,38
,) ( who,34
,#1 ( pips,3
,STRING ( who,28
,. ( place,25
,next: ( STRING,9
,( level,316
,( *,262
,Value ( values,15
,) ( value,75
,apply ( and,37
,STRING ( value,71
,Array ( values,30
,Each ( forEach,46
,replayDouble: ( =,2
,INTEGER ( var,124
,Pass ( then,77
,{ ( forget,6
,Mover ( do,2
,) ( all,26
,and ( remember,17
,STRING ( -,29
,( var,367
,from: ( mapEntry,24
,steps: ( -,53
,STRING ( <,18
,< ( size,14
,Select ( from,384
,from ( STRING,219
,not ( was,5
,( was,12
,E ( if,1
,In ( from,153
,N ( if,1
,or ( <,11
,. ( do,5
,then ( STRING,127
,- ( var,24
,in: ( union,14
,board ( concentric,37
,P3 ( sites,28
,P4 ( sites,25
,Empty ( STRING,59
,{ ( to,6
,) ( regionSite,29
,regionSite ( sites,48
,at: ( regionSite,19
,) ( trigger,10
,( regionSite,52
,( trigger,28
,STRING ( not,129
,if:#1 ( if,2
,{ ( not,28
,STRING ( score,8
,) ( mapEntry,81
,. ( piece,5
,Mover ( forEach,9
,top:True ( then,12
,steps: ( /,21
,/ ( count,22
,steps: ( STRING,42
,{ ( and,15
,= ( face,12
,) ( face,21
,) ( >,79
,> ( face,7
,not ( and,24
,Bar ( regions,3
,Home ( first,6
,STRING ( next,12
,. ( moveAgain,5
,( /,89
,( first,6
,) ( trackSite,32
,INTEGER ( if,147
,#1 ( sites,58
,) ( handSite,212
,) ( rectangle,14
,<Players:arc4> ( regions,1
,** ( item,101
,< ( regions,58
,< ( track,63
,) ( games,6
,{ ( subgame,3
,>= ( matchScore,10
,( match,6
,( games,6
,( subgame,12
,( matchScore,142
,from: ( STRING,35
,forEach ( intersection,2
,if: ( >=,8
,>= ( size,1
,- ( /,16
,P1 ( regions,3
,do ( do,3
,or ( !,12
,= ( site,25
,ifAfterwards: ( <=,3
,<= ( STRING,4
,games ( subgame,3
,result: ( score,6
,INTEGER ( graph,14
,#2 ( -,1
,next: ( move,38
,from ( if,145
,or ( all,11
,-2 ( rectangle,2
,or ( can,1
,Move ( STRING,161
,) ( can,56
,and ( addScore,13
,= ( score,24
,INTEGER ( who,10
,remove ( handSite,4
,piece ( id,86
,if:True ( apply,35
,Level ( to,18
,FromTop ( fromTo,17
,handSite ( mover,22
,Occupied ( handSite,44
,True ( >,3
,True ( >=,3
,{ ( handSite,3
,count: ( count,409
,do ( set,29
,Mover ( count,13
,P1 ( coord,2
,P2 ( coord,2
,and ( <,26
,and ( or,49
,= ( size,18
,from:0 ( -,2
,- ( STRING,62
,from: ( where,23
,) ( *,113
,STRING ( var,32
,and ( add,6
,Var ( id,2
,Off ( where,17
,Remove ( where,1
,Occupied ( site,44
,count: ( size,7
,max: ( -,3
,- ( *,36
,Occupied ( STRING,118
,remove ( STRING,39
,{ ( >,11
,> ( STRING,9
,= ( player,2
,= ( id,85
,of: ( player,6
,( player,339
,Occupied ( mapEntry,3
,from ( mapEntry,61
,next: ( priority,6
,Distance ( forEach,3
,#1 ( value,2
,do ( forget,6
,= ( last,34
,Occupied ( last,4
,<Players:tracks> ( track,1
,then ( remember,11
,Mover ( not,11
,then ( forget,4
,< ( set,83
,INTEGER ( merge,9
,In ( count,8
,<Players:entries> ( regions,1
,<Players:startRules> ( play,1
,Undefined ( value,5
,if ( >,166
,< ( map,32
,P5 ( sites,4
,P6 ( sites,3
,{ ( moveAgain,18
,= ( var,29
,STRING ( +,91
,+ ( var,5
,) ( what,73
,Home ( piece,34
,{ ( score,109
,) ( score,144
,if ( if,11
,True ( or,3
,board ( hole,2
,hole ( hole,3
,hole ( rectangle,2
,STRING ( start,8
,Kendall------------------------------------------ ( define,1
,STRING ( fromTo,10
,from ( coord,3
,to ( coord,11
,through: ( STRING,12
,Remove ( sites,49
,rule ( if,1
,Pieces ( from,4
,then ( fromTo,15
,28-29 ( if,1
,not ( or,2
,Pieces ( STRING,2
,water ( or,1
,from ( sites,224
,STRING ( rules,1
,#2 ( if,1
,) ( swap,7
,NextPlayer ( player,45
,<Throw> ( regions,1
,< ( dice,3
,~ ( STRING,4
,< ( define,21
,then ( addScore,15
,< ( rules,2
,Var ( count,2
,< ( var,3
,priority ( forEach,5
,) ( mover,67
,from: ( to,39
,StepsOnTrack ( last,2
,max: ( STRING,2
,{ ( or,13
,STRING ( do,24
,through: ( trackSite,2
,/ ( STRING,42
,{ ( id,25
,and ( >=,74
,{ ( fromTo,59
,{ ( *,4
,( swap,28
,True ( if,12
,True ( is,6
,Mover ( no,2
,< ( pips,1
,INTEGER ( state,172
,) ( subgame,6
,apply ( STRING,28
,piece ( forEach,2
,piece ( if,6
,Value ( value,6
,INTEGER ( values,1
,if:True ( forget,2
,{ ( remove,17
,Row ( row,8
,of: ( centrePoint,10
,Column ( column,17
,if:True ( and,3
,counter ( not,1
,and ( >,17
,> ( /,1
,/ ( value,3
,STRING ( /,7
,twin ( not,1
,Twin ( add,1
,twin ( piece,1
,piece ( STRING,6
,= ( centrePoint,2
,centre ( piece,1
,to ( (,1
,( ( last,1
,( column,85
,( (,32
,and ( <=,12
,and ( and,2
,In ( site,24
,next: ( do,7
,+ ( STRING,13
,Level ( site,18
,STRING ( <=,9
,<= ( var,11
,level: ( last,18
,> ( count,268
,Each ( move,405
,STRING ( to,475
,sites ( player,12
,player ( mapEntry,10
,STRING ( result,34
,P1 ( expand,37
,expand ( intersection,36
,P2 ( expand,37
,P3 ( expand,8
,P4 ( expand,8
,STRING ( between,22
,STRING ( moveAgain,21
,if: ( if,35
,Hop ( from,56
,#2 ( to,9
,Visited ( to,14
,#2 ( then,2
,STRING ( last,428
,keep ( rectangle,1
,knight ( all,1
,. ( forEach,6
,Piece ( move,11
,Empty ( between,94
,#1 ( then,9
,board ( hex,50
,Star ( STRING,1
,nextPhase ( is,14
,Mover ( next,7
,play ( or,126
,origin: ( coord,75
,column: ( STRING,10
,row: ( *,15
,* ( STRING,32
,column: ( *,15
,P2 ( union,12
,row: ( STRING,10
,P6 ( expand,3
,P5 ( expand,3
,( hex,106
,<Board:home> ( map,1
,< ( square,60
,square ( STRING,1
,P1 ( difference,56
,steps: ( +,7
,INTEGER ( /,8
,{ ( ahead,9
,ahead ( coord,12
,column: ( -,6
,) ( ahead,50
,P2 ( difference,55
,row: ( -,6
,P3 ( difference,1
,P4 ( difference,1
,region ( define,8
,STRING ( (,2
,( ( intersection,1
,state ( define,5
,forEach ( STRING,4
,#2 ( state,2
,capture ( from,1
,Around ( from,74
,Random ( intersection,41
,from ( between,18
,- ( then,1
,- ( last,1
,blank ( define,1
,zone ( from,1
,) ( state,30
,and ( (,3
,( ( is,1
,Side ( P1,1
,STRING ( piece,20
,#2 ( or,1
,#5 ( then,1
,piece ( define,12
,player ( define,1
,Shared ( sites,2
,Shared ( difference,1
,expand ( expand,1
,Shared ( union,3
,Shared ( expand,2
,state: ( STRING,4
,play ( priority,16
,Odd ( var,1
,STRING ( state,29
,then ( do,34
,do ( note,1
,next: ( vote,1
,( P1,1
,( note,19
,( vote,2
,True ( STRING,9
,{ ( concentric,1
,Add ( piece,43
,Cell ( sites,9
,Empty ( last,2
,and ( fromTo,77
,player ( prev,2
,= ( -,3
,difference ( STRING,4
,( prev,7
,Around ( to,41
,surrounded ( is,1
,there ( <,1
,. ( fromTo,1
,Pending ( value,1
,next: ( remove,2
,Around ( last,21
,. ( then,2
,. ( <,1
,{ ( player,119
,) ( player,145
,. ( to,2
,play ( avoidStoredState,1
,avoidStoredState ( if,1
,( avoidStoredState,1
,<Version:map> ( regions,1
,<Version:start> ( play,1
,{ ( >=,4
,Adjacent ( to,4
,board ( <Tiling:type>,2
,( <Tiling:type>,2
,In ( centrePoint,4
,if: ( !,27
,INTEGER ( what,4
,#2 ( pips,2
,) ( site,14
,Forwards ( to,6
,INTEGER ( abs,1
,abs ( -,2
,- ( state,1
,#1 ( STRING,3
,= ( where,21
,state: ( count,1
,P1 ( intersection,17
,P2 ( intersection,17
,( abs,2
,conditional ( moveagain,1
,envoked ( define,1
,@example ( STRING,1
,Backward ( define,1
,Neutral ( intersection,2
,intersection ( difference,9
,play ( <Each:AIstyle>,1
,{ ( max,13
,Moves ( or,11
,Forward ( then,14
,Backward ( then,1
,( moveagain,1
,( <Each:AIstyle>,1
,Hidden ( sites,17
,What ( sites,10
,} ( or,1
,then ( trigger,3
,{ ( no,6
,mapEntry ( trackSite,1
,{ ( !,11
,) ( where,38
,STRING ( where,22
,level: ( STRING,4
,to: ( last,45
,FromTop ( remove,9
,board ( spiral,4
,items:<Player:init> ( handSite,1
,Player ( who,2
,to ( state,1
,Value ( player,2
,player ( who,5
,remove ( where,9
,level: ( where,19
,at: ( where,35
,if: ( no,12
,( spiral,4
,<End:rule> ( sites,1
,< ( last,2
,difference ( union,24
,<= ( state,3
,mapEntry ( what,49
,or ( <=,8
,. ( and,1
,piece ( index/value,1
,( index/value,1
,to ( value,7
,In ( value,9
,remove ( concentric,11
,Off ( value,4
,stack:True ( then,20
,forward:True ( to,1
,) ( values,62
,STRING ( *,20
,to: ( STRING,7
,tower ( 2-stack,1
,singleton ( 1-stack,1
,Mover ( who,26
,) ( (,10
,( ( =,9
,( ( <,2
,apply ( fromTo,15
,to ( between,7
,Step ( from,14
,board ( <Board:shape>,1
,True ( then,1
,( 2-stack,1
,( 1-stack,1
,( <Board:shape>,1
,handSite ( STRING,9
,P3 ( STRING,7
,<Variant:goal> ( result,1
,< ( is,1
,< ( and,13
,= ( trackSite,5
,to ( trackSite,9
,In ( trackSite,2
,at: ( trackSite,3
,from: ( handSite,2
,nextPhase ( >,2
,level: ( topLevel,8
,<Player:start> ( play,5
,and ( roll,2
,replayDouble:True ( or,1
,combined:True ( or,1
,True ( <=,2
,FromTop ( and,7
,= ( mapEntry,11
,<Play:enterBoard> ( forEach,1
,** ( ruleset,2
,ahead ( from,73
,Empty ( ahead,15
,or ( do,9
,do ( move,64
,< ( layer,1
,) ( layer,4
,of: ( to,30
,ifAfterwards: ( is,12
,Flat ( last,1
,= ( layer,1
,of: ( last,52
,( layer,6
,Steps ( step,7
,<Players:start> ( play,4
,Edge ( difference,8
,Infinity ( STRING,6
,<= ( -,2
,- ( size,2
,) ( topLevel,7
,then ( add,10
,piece ( mapEntry,30
,mapEntry ( size,1
,INTEGER ( topLevel,2
,) ( /,21
,max: ( value,1
,Mover ( -,8
,In ( mapEntry,3
,>= ( score,4
,In ( mover,5
,) ( players,5
,face ( +,6
,+ ( count,105
,STRING ( array,1
,{ ( size,1
,) ( size,22
,and ( forget,11
,board ( union,6
,{ ( scale,2
,-2 ( scale,5
,-3 ( rectangle,1
,-3 ( scale,3
,Mover ( is,39
,{ ( remember,10
,( array,8
,True ( =,3
,) ( prev,4
,> ( var,13
,Var ( -,11
,) ( level,10
,Var ( STRING,7
,< ( state,5
,to ( from,2
,apply ( set,12
,#2 ( apply,1
,#2 ( STRING,1
,-6 ( scale,1
,Var ( +,4
,Forward ( to,19
,piece ( next,6
,Hidden ( difference,2
,at: ( ahead,73
,ahead ( last,75
,Slide ( STRING,1
,) ( coord,15
,row: ( if,1
,column: ( column,2
,row: ( row,1
,column: ( if,1
,mapEntry ( last,1
,In ( sites,2
,<Player:startPos> ( regions,1
,Edge ( mapEntry,6
,min ( face,1
,{ ( mapEntry,15
,at: ( mapEntry,163
,at: ( (,1
,( ( to,1
,<Player:startRules> ( play,1
,stick ( map,1
,up ( pair,2
,notches ( pair,2
,#2 ( sites,135
,Mover ( mapEntry,2
,/ ( score,1
,- ( mover,2
,rules ( play,58
,roll ( then,1
,+ ( to,130
,- ( to,130
,{ ( last,74
,if: ( >,124
,then ( sow,220
,owner: ( mover,132
,apply: ( if,181
,{ ( mancalaBoard,162
,home ( regions,154
,start ( set,141
,to: ( union,52
,( sow,281
,( mancalaBoard,163
,from: ( trackSite,4
,store:None ( track,55
,do ( and,13
,to: ( trackSite,13
,Cell ( handSite,17
,next: ( sow,12
,steps: ( var,8
,to ( to,34
,holes ( regions,3
,holes ( piece,3
,<Phase:opening> ( phase,1
,Occupied ( from,68
,<= ( value,7
,and ( sow,18
,to: ( difference,19
,union ( intersection,7
,< ( phase,9
,steps:#1 ( directions,1
,count: ( var,7
,apply: ( fromTo,26
,priority ( STRING,6
,{ ( value,3
,row ( regions,1
,row ( piece,1
,from ( -,5
,to ( +,5
,+ ( /,3
,) ( sow,30
,sow ( +,1
,from ( +,3
,+ ( +,5
,+ ( -,2
,to ( -,6
,- ( -,11
,sow ( -,1
,{ ( var,39
,sow ( to,7
,count: ( +,19
,end ( forEach,33
,Site ( difference,7
,Mover ( all,14
,Sites ( difference,5
,Empty ( site,37
,Sites ( sites,66
,sow ( last,12
,skipIf: ( is,2
,apply: ( and,12
,= ( next,22
,forEach ( difference,2
,INTEGER ( sites,4
,in: ( (,2
,( ( STRING,3
,to ( forEach,11
,nextPhase ( all,29
,skipIf: ( and,6
,True ( all,1
,LeftMost ( regions,4
,intersection ( union,13
,sow ( STRING,3
,union ( difference,5
,priority ( move,2
,<Start:misoroPhase> ( phase,2
,from ( forEach,11
,at: ( var,13
,Var ( to,4
,Remove ( forEach,24
,nextPhase ( >=,5
,{ ( difference,4
,Count ( -,1
,to ( site,11
,numPerHole: ( if,1
,sowEffect: ( if,2
,Occupied ( to,9
,Holes ( regions,1
,Holes ( hand,1
,Home ( hand,1
,or ( >=,7
,apply: ( set,1
,from ( value,1
,move ( move,1
,if ( was,2
,Remove ( STRING,1
,<Row:size> ( +,1
,{ ( +,1
,home ( piece,22
,{ ( <,5
,state ( regions,1
,state ( piece,1
,= ( max,1
,max ( results,5
,home ( map,43
,P1 ( <,1
,P2 ( <,1
,< ( pair,4
,<Board:board> ( piece,1
,<Board:start> ( play,2
,< ( mancalaBoard,1
,ahead ( site,38
,STRING ( >=,6
,version ( define,1
,) ( var,18
,count: ( if,6
,origin: ( not,1
,Remove ( difference,5
,Mover ( last,4
,< ( merge,7
,Hole ( regions,1
,Hole ( piece,1
,. ( set,1
,kalahs ( storage,41
,Site ( forEach,7
,max: ( count,4
,Var ( value,1
,Odd ( count,7
,backtracking: ( and,3
,( storage,41
,handSite ( state,1
,< ( score,4
,P4 ( STRING,3
,P5 ( STRING,1
,Pending ( to,3
,NOW ( players,1
,Row ( map,1
,player ( piece,2
,home ( hand,11
,count:4 ( then,12
,#1 ( state,4
,Site ( STRING,11
,count:3 ( then,2
,count:2 ( then,1
,{ ( sow,1
,Value ( array,3
,array ( sites,4
,) ( min,9
,>= ( +,1
,INTEGER ( track,17
,from ( difference,6
,sites ( STRING,1
,Mover ( <,1
,{ ( <=,4
,far ( and,1
,sow ( then,1
,{ ( count,6
,draw ( if,1
,#2 ( values,4
,STRING ( regionSite,3
,ifAfterwards: ( <,10
,P1 ( count,13
,P2 ( count,13
,origin: ( <,2
,nextPhase ( was,5
,Sites ( union,3
,apply: ( STRING,2
,<Board:regions> ( piece,1
,union ( values,1
,skipIf: ( STRING,1
,/ ( *,6
,apply: ( moveAgain,1
,play ( STRING,11
,backtracking: ( =,2
,next: ( and,10
,{ ( pass,1
,from: ( var,2
,to: ( var,2
,nextPhase ( <=,3
,( pass,3
,ahead ( to,46
,skipIf: ( not,3
,ifAfterwards: ( if,3
,Undefined ( var,5
,max:12 ( set,1
,RememberValue ( value,1
,Value ( site,4
,True ( and,2
,from ( ahead,12
,ahead ( STRING,4
,ifAfterwards: ( >,2
,>= ( STRING,2
,skipIf: ( or,2
,From ( do,1
,ifAfterwards: ( or,8
,count: ( value,7
,steps: ( value,2
,Site ( intersection,13
,intersection ( STRING,9
,STRING ( track,8
,in: ( if,6
,Random ( range,20
,skipIf: ( =,3
,origin:True ( then,2
,<Board:init> ( count,2
,count:<Board:init> ( then,1
,STRING ( abs,1
,Player ( forEach,1
,count:5 ( then,2
,<Start:usingHogon> ( count,1
,< ( play,20
,< ( hand,4
,backtracking: ( or,1
,( ( fromTo,1
,count:1 ( then,4
,count: ( min,2
,) ( next,23
,Empty ( +,1
,+ ( site,2
,Occupied ( +,1
,<Variant:opening> ( phase,1
,from ( var,2
,{ ( from,2
,P2 ( +,10
,count: ( STRING,5
,<Board:openingRegions> ( piece,1
,to: ( (,12
,( ( sites,12
,count:8 ( then,1
,skipIf: ( >=,1
,count:6 ( then,1
,skipIf: ( if,1
,count:7 ( then,1
,half ( regions,1
,half ( map,1
,max: ( var,1
,do ( or,39
,Mover ( to,2
,origin: ( !,1
,RightMost ( regions,1
,RightMost ( piece,1
,<End:cond> ( byScore,1
,< ( no,2
,Site ( union,2
,Site ( if,1
,backtracking: ( STRING,1
,Slide ( then,5
,Shoot ( piece,3
,<= ( max,1
,to:1 ( *,1
,. ( STRING,1
,) ( tile,25
,piece ( mover,10
,( tile,25
,add ( square,5
,INTEGER ( hex,16
,and ( custodial,1
,) ( surround,6
,surround ( from,19
,( surround,19
,-90 ( wedge,5
,at: ( if,1
,= ( between,23
,INTEGER ( concentric,5
,splitCrossings ( merge,1
,-1 ( rotate,3
,<Version:hand> ( piece,1
,<Army> ( to,1
,<Tower> ( to,1
,<Version:play> ( end,2
,<Move:limit> ( if,1
,to:0 ( row,1
,< ( directions,2
,to ( union,10
,Backwards ( to,2
,{ ( rotate,2
,Adjacent ( from,1
,Move ( enclose,1
,enclose ( from,11
,ifAfterwards: ( and,12
,< ( rectangle,28
,( enclose,11
,<Rules:play> ( end,1
,exact ( -,2
,rules ( meta,24
,meta ( swap,18
,) ( start,44
,( meta,33
,STRING ( surround,11
,#1 ( who,2
,= ( counter,26
,then ( priority,2
,Friend ( trigger,1
,Enemy ( trigger,1
,( counter,35
,<Board> ( hand,2
,remove ( rotate,4
,to ( apply,31
,STRING ( regions,3
,Within ( id,14
,/ ( -,6
,{ ( -,2
,player ( next,9
,/ ( +,5
,+ ( *,3
,INTEGER ( *,6
,#1 ( /,3
,if ( lt,9
,lt ( count,5
,P2 ( then,4
,then ( note,4
,) ( note,10
,next: ( set,6
,( lt,11
,{ ( mover,1
,then ( promote,4
,promote ( last,59
,( promote,61
,< ( meta,9
,Even ( column,3
,Odd ( row,5
,Even ( row,3
,Odd ( column,5
,STRING ( enclose,10
,{ ( swap,1
,) ( noRepeat,1
,( noRepeat,10
,{ ( centrePoint,4
,from: ( difference,2
,to:2 ( *,2
,* ( to,2
,------------------------------------------------------------------------- ( option,2
,<Meta:rule> ( play,4
,sites ( results,1
,Around ( STRING,5
,to ( var,1
,player ( mover,5
,routine ( game,8
,Options ( define,7
,STRING ( board,36
,Options ( option,6
,STRING ( colour,6
,( colour,27
,normally ( if,4
,turn ( <=,2
,turn ( not,2
,) ( select,3
,select ( from,6
,< ( to,6
,>= ( to,2
,index ( then,2
,then ( swap,1
,turn ( <,2
,) ( shiftPlayers,1
,then ( shiftPlayers,1
,( select,6
,( shiftPlayers,2
,Around ( sites,30
,#1 ( rotations,2
,{ ( boardless,6
,{ ( path,2
,) ( path,2
,meta ( automove,1
,Loop ( mover,1
,STRING ( pathExtent,2
,pathExtent ( mover,1
,Loop ( next,1
,pathExtent ( next,1
,* ( count,9
,( rotations,2
,( boardless,6
,( path,4
,( automove,1
,( pathExtent,2
,sides ( S,1
,NW ( sites,1
,SW ( sites,1
,< ( intersection,1
,( S,1
,board ( tri,10
,( tri,39
,then ( attract,2
,attract ( from,2
,( attract,2
,Odd ( site,1
,Even ( site,1
,<Board:seed> ( set,1
,} ( result,2
,< ( tri,14
,< ( hex,30
,< ( tiling,1
,< ( rotate,8
,INTEGER ( tiling,4
,( tiling,16
,board ( dual,2
,dual ( hex,1
,Around ( site,15
,Group ( if,1
,difference ( intersection,6
,stop: ( is,2
,( dual,9
,Odd ( +,1
,piece ( +,2
,INTEGER ( %,12
,% ( count,6
,> ( pow,1
,pow ( count,1
,P1 ( *,3
,* ( sizes,9
,P2 ( *,4
,P3 ( *,2
,P4 ( *,1
,( %,21
,( pow,1
,( sizes,31
,< ( union,24
,< ( then,5
,% ( +,7
,forEach ( expand,1
,if: ( all,3
,rectangle ( +,3
,+ ( ^,1
,. ( play,1
,{ ( site,3
,( ^,1
,< ( equipment,29
,board ( skew,2
,{ ( wedge,2
,( skew,2
,Row ( /,2
,through: ( site,17
,<Tiling:piece1> ( centrePoint,2
,<Tiling:piece2> ( ahead,2
,site ( define,3
,To ( move,2
,Leap ( from,3
,} ( to,3
,next: ( moveAgain,2
,remove ( var,8
,index ( define,2
,= ( %,3
,% ( -,1
,<Board:MainWin0> ( STRING,2
,<Board:MainWin1> ( STRING,2
,<Board:MainWinC> ( STRING,10
,<Board:ExtraRows> ( <=,1
,< ( <=,8
,< ( remove,11
,STRING ( slide,8
,slide ( from,11
,S ( between,2
,<Model:board> ( piece,1
,through: ( last,1
,( slide,12
,STRING ( custodial,25
,{ ( <Board>,1
,then ( or,10
,<board ( square,2
,( <Board>,2
,- ( score,2
,through: ( ahead,1
,through: ( from,3
,<Rules> ( nextPhase,1
,do ( forEach,187
,ifAfterwards: ( not,222
,union ( forEach,1
,<Remove:rule> ( move,2
,<Remove:rule> ( forEach,2
,<Play> ( end,4
,to ( expand,1
,INTEGER ( tri,9
,-30 ( tri,1
,All ( between,10
,Next ( who,5
,All ( last,3
,> ( score,6
,remove ( remove,1
,STRING ( what,73
,remove ( coord,8
,piece ( var,8
,throughAny: ( STRING,4
,< ( intersect,1
,{ ( hex,1
,( intersect,1
,from: ( coord,1
,) ( range,21
,All ( to,2
,< ( difference,6
,{ ( push,2
,push ( from,2
,throughAny: ( sites,5
,what: ( next,2
,what: ( mover,3
,( push,2
,Cell ( difference,1
,Cell ( last,3
,line ( what,1
,line ( who,1
,line ( state,1
,line ( value,1
,Around ( difference,2
,ifAfterwards: ( =,2
,Mover ( and,2
,what: ( id,4
,through: ( centrePoint,1
,player ( STRING,3
,ifAfterwards: ( can,8
,INTEGER ( then,3
,+ ( value,11
,= ( ahead,14
,exist ( if,5
,remove ( ahead,18
,Line ( -,3
,Mover ( add,4
,add ( to,20
,Next ( add,4
,-108 ( rectangle,3
,-216 ( rectangle,3
,move ( STRING,1
,Empty ( count,1
,Add ( STRING,2
,to ( count,1
,< ( concentric,2
,union ( square,3
,undecided ( move,2
,INTEGER ( mapEntry,9
,supergame ( add,1
,<Version:playRules> ( end,1
,STRING ( trigger,4
,pair ( id,666
,ahead ( ahead,6
,) ( #2,3
,to ( ahead,23
,if: ( can,3
,STRING ( while,1
,while ( STRING,1
,( #2,17
,( while,1
,and ( trigger,1
,ifAfterwards: ( STRING,7
,origin: ( from,2
,. ( game,1
,P1 ( size,1
,P2 ( size,1
,meta ( noRepeat,9
,P1 ( +,9
,Enemy ( state,3
,apply ( allCombinations,3
,allCombinations ( add,3
,state: ( mover,6
,) ( flip,2
,flip ( between,5
,Friend ( state,3
,remove ( hex,7
,Neutral ( flips,2
,<Rules:play> ( phase,2
,) ( append,3
,Mover ( >=,2
,( allCombinations,3
,( flip,5
,( flips,6
,( append,3
,{ ( note,1
,do ( add,1
,from ( union,2
,Player ( set,1
,Player ( count,1
,State ( player,1
,apply ( trigger,8
,origin: ( centrePoint,4
,) ( custodial,7
,) ( <Capture:type>,2
,<Capture:type> ( between,2
,<surround ( from,2
,<custodial ( from,2
,< ( max,3
,( <Capture:type>,2
,merge ( merge,3
,-1 ( rectangle,5
,#1 ( apply,1
,INTEGER ( phase,4
,with: ( piece,2
,Enemy ( what,2
,= ( phase,7
,remove ( tri,4
,Axial ( between,2
,Diagonal ( to,81
,------------------------------------------------------------------------- ( game,3
,Orthogonal ( then,26
,STRING ( can,3
,< ( counter,2
,INTEGER ( +,5
,Around ( between,3
,<Board:kingMove> ( then,1
,<Step ( to,1
,LL ( define,4
,effect ( define,3
,STRING ( flip,3
,pieces ( define,4
,away ( define,3
,~ ( then,10
,Each ( flips,4
,rules ( STRING,32
,corners ( define,2
,and ( intervene,1
,origin: ( STRING,3
,{ ( can,1
,< ( surround,2
,STRING ( directional,4
,directional ( from,4
,#1 ( from,6
,SameDirection ( last,5
,OppositeDirection ( last,5
,( directional,4
,Promote ( last,116
,Moves ( STRING,29
,before: ( count,59
,after: ( count,57
,Moves ( forEach,2
,STRING ( promote,18
,STRING ( max,18
,Moves ( priority,2
,Slide ( directions,4
,SameDirection ( between,4
,#1 ( directions,2
,From ( max,1
,and ( move,6
,) ( promote,32
,promote ( site,1
,Move ( do,98
,do ( hop,2
,withValue:True ( STRING,2
,Mover ( then,5
,withValue:True ( priority,1
,True ( not,2
,Cell ( forEach,2
,Cell ( from,2
,Cell ( site,5
,Cell ( to,5
,Vertex ( difference,3
,< ( expand,19
,Hop ( directions,6
,{ ( do,4
,and ( promote,7
,= ( *,4
,* ( from,3
,* ( last,3
,distance: ( +,2
,to: ( to,9
,Steps ( to,5
,apply ( remember,1
,Value ( STRING,2
,Move ( move,3
,Diagonal ( directions,1
,+ ( array,1
,array ( intersection,2
,Odd ( size,2
,player ( +,1
,% ( mover,3
,Even ( size,1
,{ ( repeat,2
,} ( poly,11
,) ( repeat,6
,shift ( -,2
,INTEGER ( repeat,3
,from: ( centrePoint,4
,( repeat,11
,< ( site,8
,> ( site,7
,Step ( difference,1
,>= ( value,3
,Piece ( priority,1
,board ( renumber,2
,renumber ( splitCrossings,1
,splitCrossings ( add,1
,add ( regular,1
,( renumber,2
,From ( or,2
,merge ( wedge,1
,<Start:board> ( piece,1
,-1 ( wedge,1
,-45 ( wedge,1
,-135 ( wedge,1
,> ( max,1
,max ( count,5
,Occupied ( between,3
,rectangle ( *,1
,STRING ( rectangle,1
,#1 ( mover,49
,Forward ( between,49
,Start ( piece,43
,piece ( what,40
,Slide ( to,47
,= ( column,47
,Next ( forEach,8
,Step ( if,9
,rules ( if,1
,Mover ( mover,2
,and ( can,1
,Next ( next,2
,Rukh ( piece,1
,Ghora ( piece,1
,Fil ( piece,1
,Wazir ( piece,1
,Shahzada ( piece,1
,Padshah ( piece,1
,Kotwal ( piece,1
,Urdabegini ( piece,1
,Each ( do,1
,Paidal ( piece,1
,Layakúcan ( piece,1
,Lúdkax ( piece,1
,Alyx ( piece,1
,Slúnax ( piece,1
,Kúnax ( piece,1
,Férsix ( piece,1
,piece ( value,1
,= ( if,1
,To ( slide,2
,between ( min,2
,. ( from,2
,Pieces ( where,1
,Diagonal ( from,1
,Rotational ( to,1
,apply ( forEach,18
,Direction ( from,16
,Diagonal ( if,1
,Orthogonal ( from,5
,{ ( piece,1
,) ( board,1
,S ( do,1
,Undefined ( STRING,1
,union ( union,2
,Around ( mapEntry,1
,. ( move,2
,and ( note,3
,Pot ( +,6
,+ ( pot,6
,) ( amount,6
,W ( STRING,5
,N ( STRING,5
,S ( STRING,2
,E ( STRING,5
,Mover ( range,1
,( pot,6
,( amount,7
,Slide ( from,29
,Pending ( ahead,20
,CaptureToPieceAndResetCounter ( define,7
,Usage: ( STRING,69
,NextCanNotMove ( define,8
,History ( for,3
,PieceHasMoved ( define,3
,RememberPieceHasMoved ( define,3
,KingNotCheckedAndToEmpty ( define,3
,Cell ( STRING,3
,DoCastle ( define,3
,Example: ( STRING,3
,in ( piece,13
,In ( ahead,3
,Var ( last,12
,* ( INTEGER,2
,diagonally ( if,1
,Start ( if,1
,( for,3
,( INTEGER,3
,numSides:4 ( or,1
,numSides:4 ( move,5
,} ( handSite,2
,max: ( topLevel,4
,level: ( value,4
,Around ( union,2
,; ( or,1
,Courier ( piece,1
,Castling ( define,2
,Die ( if,4
,max:4 ( move,1
,exact ( value,4
,Pending ( between,4
,} ( STRING,32
,STRING ( id,38
,where ( id,27
,P7 ( sites,2
,P8 ( sites,2
,) ( slide,2
,or ( fromTo,1
,<Variant:dice> ( piece,1
,NW ( directions,1
,NE ( directions,1
,SW ( directions,1
,SE ( directions,1
,N ( directions,1
,W ( directions,1
,S ( directions,1
,E ( directions,1
,Forwards ( between,2
,#1 ( values,1
,#1 ( piece,4
,In ( #1,11
,Active ( who,12
,difference ( forEach,1
,slide ( between,1
,( #1,38
,apply ( add,4
,CaptureForwardDiagonal ( define,3
,Step ( STRING,3
,Sites ( STRING,5
,Edge ( site,7
,Between ( directions,2
,Around ( forEach,2
,) ( exact,5
,P3 ( union,1
,P4 ( union,1
,Edge ( sites,50
,step ( non-capturing,1
,pawns ( define,1
,( non-capturing,1
,P2 ( define,2
,------------------------------------------------------- ( define,2
,direction ( E,1
,clause ( define,5
,direction ( define,1
,Directions ( define,2
,------------------------------------------------------- ( game,1
,Adjacent ( STRING,1
,( E,1
,max:3 ( move,1
,STRING ( %,2
,% ( row,1
,% ( column,1
,<= ( column,2
,>= ( column,1
,>= ( row,2
,Piece ( next,1
,is ( unless,1
,'diagonally' ( i,1
,piece ( Queen,1
,. ( Note:,2
,. ( The,1
,Pritchard ( 2nd,1
,( unless,1
,( i,1
,( Queen,1
,( Note:,2
,( The,1
,( 2nd,1
,True ( !,7
,Backward ( between,12
,Next ( or,2
,#2 ( forEach,1
,= ( +,3
,INTEGER ( column,1
,King ( piece,8
,General ( piece,22
,Rook ( piece,15
,Bishop ( piece,15
,Pawn ( piece,8
,Silver ( piece,7
,rotations:False ( to,3
,Knight ( piece,11
,Lance ( piece,11
,P1 ( forEach,4
,P2 ( forEach,4
,Diagonal ( then,1
,promote ( from,1
,then ( step,2
,Adjacent ( between,12
,Adjacent ( directions,8
,step ( move,2
,to: ( from,8
,Each ( and,1
,and ( do,1
,Forward ( directions,4
,INTEGER ( place,38
,In ( what,10
,difference ( difference,5
,difference ( if,1
,~ ( between,8
,BL ( between,1
,BR ( between,1
,~ ( exact,12
,Leftward ( between,1
,Rightward ( between,1
,~ ( range,6
,before:34 ( range,1
,before:35 ( range,1
,W ( between,1
,Diagonal ( sites,2
,Adjacent ( sites,1
,Orthogonal ( sites,1
,#1 ( id,156
,Threatened ( if,2
,) ( column,6
,stop: ( =,15
,Guard ( piece,5
,Elephant ( piece,5
,Horse ( piece,6
,Chariot ( piece,6
,palace ( if,1
,Canon ( piece,6
,STRING ( remove,3
,Palace ( if,1
,Soldier ( piece,6
,Cell ( rotate,1
,Forward ( union,1
,union ( directions,1
,apply ( forget,14
,do ( remember,5
,INTEGER ( pips,6
,Pending ( if,1
,mapEntry ( var,1
,} ( sites,3
,Name ( define,1
,#2 ( move,1
,next: ( forget,1
,P1/P2 ( define,1
,> ( matchScore,33
,) ( matchScore,66
,< ( matchScore,33
,Mover ( value,3
,exact ( pips,3
,replayDouble: ( and,2
,Die ( forEach,2
,<Board:dice> ( define,1
,Array ( STRING,2
,{ ( where,1
,if:False ( remove,2
,steps: ( mul,3
,mul ( count,3
,. ( or,1
,( mul,3
,> ( size,1
,Shared ( forEach,1
,Mover ( <=,1
,steps: ( if,1
,min ( array,2
,<Dice:throwValues> ( map,1
,Friend ( mapEntry,1
,<Slide:to> ( then,1
,STRING ( end,1
,#1 ( count,1
,{ ( surakartaBoard,1
,>= ( counter,1
,then ( vote,1
,( surakartaBoard,1
,addScore ( player,3
,meta ( passEnd,4
,( passEnd,4
,Var ( mapEntry,1
,STRING ( phase,7
,Captures ( forEach,1
,P3 ( count,1
,Vertex ( to,1
,Cell ( intersection,4
,Edge ( to,10
,Vertex ( site,2
,Edge ( intersection,1
,Vertex ( intersection,1
,#2 ( site,3
,board ( tiling,5
,on:Vertex ( or,1
,on:Edge ( or,1
,on:Cell ( or,1
,not ( >,1
,> ( min,2
,min ( count,4
,#1 ( define,2
,+ ( rotation,2
,) ( rotation,2
,at: ( #1,19
,on ( define,2
,#1 ( can't,1
,#2 ( define,2
,at: ( #2,6
,from: ( #1,1
,from: ( ahead,1
,ahead ( #2,1
,to: ( #2,1
,Rotation ( to,3
,Wagon ( define,1
,Bridge ( define,1
,forEach ( union,3
,from: ( forEach,2
,Fire ( define,1
,mover ( define,1
,capture ( move,3
,if:False ( apply,3
,Shoot ( normal,1
,origin: ( ahead,10
,Shoot ( from,1
,Shoot ( outnumber,1
,entrenchments ( STRING,1
,Cavalry ( define,1
,capture ( against,2
,Artillery ( define,1
,Around ( var,3
,entrenchment ( define,1
,CannonOutline ( define,1
,> ( state,8
,Regions ( define,1
,) ( pass,2
,#2 ( last,1
,#1 ( and,1
,Promote ( from,2
,river ( move,1
,wagon ( move,1
,( rotation,4
,( can't,1
,( normal,1
,( outnumber,1
,( against,3
,Value ( sites,2
,} ( move,1
,Moves ( define,2
,Distance ( step,7
,if: ( #1,1
,Human ( define,1
,union ( STRING,3
,Vehicle ( define,1
,Aircraft ( define,1
,Boat ( define,1
,Attacks ( define,1
,attacks ( define,2
,In ( #3,6
,unit ( if,1
,counter-attack ( if,1
,by:Enemy ( last,3
,attacked ( terrain,1
,Attack ( boolean,2
,* ( if,1
,In ( #2,6
,* ( value,7
,terrain ( if,1
,) ( Shooter,3
,forests ( if,1
,water ( STRING,1
,) ( 4x4x4x5x100x4,1
,max ( /,3
,#1 ( mapEntry,1
,{ ( take,2
,building ( STRING,1
,> ( who,1
,#3 ( STRING,1
,range ( STRING,1
,Healing ( define,1
,min ( mapEntry,4
,- ( +,3
,max ( -,2
,- ( mapEntry,2
,<= ( +,1
,units ( define,1
,<= ( /,1
,copy:True ( then,4
,) ( take,6
,} ( difference,4
,Sites ( define,1
,removal ( define,1
,Damage ( against,1
,Maximum ( define,1
,maps ( define,1
,state ( movement,2
,value ( health,2
,Doctrines ( define,1
,STRING ( map,1
,War ( define,1
,{ ( intersection,1
,expand ( forEach,3
,forEach ( players,5
,intersection ( forEach,2
,Team ( forEach,2
,forEach ( team,2
,STRING ( region,1
,Colour ( intersection,6
,) ( colour,6
,) ( region,5
,<Scenario:boardRegins> ( hand,1
,<Scenario:teams> ( set,1
,Player ( STRING,1
,< ( show,16
,) ( show,48
,Random ( union,4
,Random ( difference,49
,Random ( sites,9
,( #3,16
,( terrain,1
,( boolean,2
,( Shooter,3
,( 4x4x4x5x100x4,1
,( take,8
,( movement,2
,( health,2
,( team,2
,( region,6
,( show,64
,<Version:rulesCommander> ( piece,1
,) ( step,1
,To ( STRING,1
,~ ( apply,1
,value: ( value,16
,<CheckmateRule:Ending> ( <=,1
,Empty ( from,2
,) ( dominoes,1
,{ ( deal,1
,( dominoes,1
,( deal,1
,<Movement:type> ( move,1
,Next ( count,3
,if ( le,3
,le ( score,3
,( le,7
,if ( ge,1
,ge ( score,1
,( ge,2
,Mover ( max,4
,max ( sizes,18
,Next ( max,2
,+ ( max,8
,Next ( +,5
,Infinity ( count,4
,) ( <SType:selScoring>,1
,remove ( value,4
,From ( select,1
,Limping ( -,7
,hex ( -,4
,T33434 ( -,4
,( <SType:selScoring>,1
,board ( <Board:type>,2
,( <Board:type>,2
,<BoardShape:directionsWin> ( to,2
,stop: ( <,3
,do ( remove,2
,next: ( add,1
,count: ( -,4
,STRING ( remember,1
,Value ( ahead,1
,priority ( do,1
,Mover ( *,3
,* ( max,4
,Next ( *,2
,INTEGER ( counter,5
,<BoardShape:ForcedFillLevel> ( count,1
,{ ( <Scoring:calculation>,1
,{ ( all,4
,} ( byScore,1
,*** ( item,4
,( <Scoring:calculation>,1
,dual ( tiling,6
,) ( lt,1
,) ( gt,4
,gt ( count,1
,Mover ( /,1
,+ ( results,5
,Next ( /,1
,fillColour: ( colour,8
,strokeColour: ( colour,4
,edgeColour: ( colour,1
,gt ( score,2
,) ( le,2
,( gt,10
,Calculation ( define,1
,Mover ( cost,3
,< ( complete,6
,complete ( regular,5
,< ( graph,49
,( cost,7
,( complete,8
,Edge ( last,2
,< ( dual,2
,dual ( rotate,1
,{ ( cost,1
,INTEGER ( cost,1
,Odd ( score,1
,P2 ( cost,2
,Claim ( to,4
,< ( subdivide,1
,subdivide ( hex,1
,( subdivide,4
,remove ( complete,1
,<Play:play> ( end,1
,complete ( subdivide,3
,subdivide ( regular,3
,Mover ( state,3
,if ( gt,6
,gt ( STRING,3
,Chosen:nonMoverCaptures ( or,1
,hops ( priority,1
,allowed ( priority,1
,<Multi:capture> ( if,1
,) ( #1,1
,next: ( #1,1
,define ( define,1
,defines ( define,4
,by: ( player,2
,Player ( addScore,1
,player ( player,1
,) ( %,3
,<NumberPlayers:inGame> ( var,1
,- ( player,1
,) ( propose,1
,pieces ( or,2
,replaced ( forEach,1
,<Multi:suicide> ( sites,1
,to: ( site,1
,Booleans: ( define,1
,Integers ( define,2
,consider ( count,1
,{ ( #1,1
,to: ( forEach,1
,game ( item,1
,moves ( item,3
,Hops-a-Daisy ( item,3
,? ( item,1
,Equiversi ( item,1
,choice ( item,2
,player ( item,1
,Equi ( item,1
,< ( =,4
,Originals ( item,1
,( propose,1
,#2 ( count,1
,to ( #1,1
,STRING ( <BoardShape:gridType>,1
,Piece ( do,1
,Move ( add,1
,( <BoardShape:gridType>,1
,Disc ( to,1
,distance: ( size,1
,max ( array,1
,from:#1 ( difference,1
,to: ( intersection,2
,board ( trim,2
,if: ( <Edge:controlType>,1
,if: ( <Center:controlType>,1
,remove ( dual,4
,( trim,2
,( <Edge:controlType>,1
,( <Center:controlType>,1
,optimizations ( which,1
,Utility ( define,1
,#1 ( ahead,10
,processing ( cosmetic,1
,regionSite ( intersection,1
,regionSite ( STRING,3
,Cell ( var,3
,Edge ( STRING,2
,NotBlockedBy ( =,1
,connections ( and,1
,-1 ( where,3
,Level ( id,12
,markers ( !,1
,as ( INTEGER,1
,INTEGER ( min,1
,+ ( if,4
,#3 ( sites,1
,from:#3 ( min,2
,move ( define,2
,prameter-shift ( if,1
,or ( >,1
,marker ( >=,1
,#4 ( site,1
,#1 ( site,4
,update ( STRING,1
,#2 ( value,2
,allow ( Forget,1
,#5 ( site,4
,restrict ( remember,1
,To ( select,2
,at: ( value,1
,win ( define,1
,marker ( custodial,1
,Mover ( site,1
,Next ( var,3
,Next ( to,2
,{ ( apply,1
,INTEGER ( mover,3
,locations ( or,1
,( which,1
,( cosmetic,1
,( Forget,1
,this ( count,1
,Booleans ( define,1
,STRING ( lt,1
,lt ( STRING,2
,lt ( score,1
,< ( colour,2
,Orthogonal ( site,4
,STRING ( addScore,1
,Mover ( %,1
,INTEGER ( dual,1
,- ( max,2
,players ( =,1
,-1 ( counter,1
,edge ( sites,1
,piece ( sites,1
,neighbors ( sites,1
,location ( ge,1
,<PlaceBy:qtyMax> ( count,1
,if: ( le,2
,<NeighborsOf:nbrMax> ( count,1
,gt ( *,2
,workaround ( item,2
,Odd ( STRING,1
,% ( STRING,2
,* ( who,1
,Around ( intersection,1
,<Board> ( *,2
,Mover ( score,1
,Orthogonal ( step,1
,STRING ( results,1
,To ( hop,1
,Value ( union,7
,STRING ( exact,28
,unique:True ( then,7
,Around ( #1,2
,choices ( define,1
,blocked ( can,1
,Move ( claim,1
,claim ( to,6
,cases ( move,1
,conditions ( then,1
,then ( claim,4
,INTEGER ( (,1
,influence ( define,1
,consistancy ( do,1
,considerations: ( define,1
,INTEGER ( set,2
,conditions ( define,1
,phase ( define,1
,stack:False ( then,1
,options ( define,2
,tri ( poly,1
,<Variants:pieOrNot> ( end,1
,--------------------------------------------- ( option,1
,( claim,6
,do ( swap,1
,( ( size,1
,? ( set,1
,INTEGER ( max,2
,max ( difference,2
,difference ( sizes,2
,) ( sizes,2
,capture ( sites,1
,. ( option,1
,<Play:type> ( move,1
,length: ( exact,7
,Vertex ( sites,4
,STRING ( claim,1
,<Dual:begin> ( <Board>,1
,All ( expand,1
,<Version:play> ( then,1
,exact ( count,3
,length: ( max,1
,board ( complete,1
,+ ( state,2
,STRING ( place,1
,#1 ( handSite,6
,- ( id,1
,STRING ( amount,1
,) ( mode,2
,<Players:board> ( hand,1
,P1 ( range,1
,P2 ( range,1
,< ( +,2
,{ ( state,1
,P3 ( range,1
,( mode,2
,Row ( +,1
,Row ( -,1
,Row ( STRING,6
,index: ( value,3
,column: ( value,1
,) ( results,2
,to:0 ( what,1
,to ( regionSite,1
,Player ( prev,1
,sites ( site,1
,Cell ( range,16
,play ( satisfy,19
,( satisfy,19
,) ( hints,5
,{ ( forAll,4
,Hint ( is,2
,Count ( sites,3
,of:1 ( hint,3
,< ( hint,10
,) ( hint,899
,( hints,8
,( forAll,7
,( hint,919
,Vertex ( range,2
,<Challenge:hints> ( regions,1
,Hint ( <,1
,< ( from,1
,< ( hints,3
,{ ( hint,4
,{ ( tri,1
,Sum ( hint,1
,<Challenge> ( regions,1
,STRING ( hint,1
,satisfy ( all,5
,Different ( sites,3
,. ( regions,5
,Edge ( range,1
,Cell ( or,1
,= ( hint,1
,) ( forAll,2
,Vertex ( or,1
,satisfy ( forAll,1
,Cell ( is,1
,Hint ( =,1
,regions ( sites,2
,from: ( intersection,2
,Sum ( /,1
,#3 ( #4,2
,> ( #3,1
,) ( #3,5
,#5 ( and,2
,<= ( #3,2
,>= ( #3,2
,( #4,2
,Orthogonal ( ahead,2
,NE ( STRING,1
,NW ( STRING,1
,SW ( STRING,1
,SE ( STRING,1
,Threatened ( id,3
,<challenge:limit> ( count,2
,add ( rectangle,1
,Edge ( union,2
,Random ( forEach,1
,<Variant:end> ( result,1
,remove ( from,1
,<0>< ( regions,1
,<2>< ( regions,1
,Orthogonal ( where,1
,ahead ( where,4
,) ( <Minotaur:move>,1
,( <Minotaur:move>,1
,< ( what,1
,#1 ( +,1
,#1 ( size,2
),INTEGER ) (,5384
,diagonals:Alternating ) ),45
,) ) (,22711
,INTEGER ) ),3311
,) ) use:Vertex,45
,use:Vertex ) (,289
,STRING ) ),5445
,STRING ) },868
,} ) (,4465
,Top ) steps:2,53
,steps:2 ) (,107
,} ) ),2827
,) ) ),28448
,Piece ) ),365
,Loss ) (,14
,P2 ) <Num:dogs>,1
,<Num:dogs> ) (,1
,Win ) ),1092
,) ) },2271
,STRING ) *,360
,) (,49777
,) ),59622
,) use:Vertex,225
,) },5261
,) steps:2,208
,) <Num:dogs>,1
,) *,507
,site ) ),766
,STRING ) STRING,156
,Right ) (,20
,Left ) ),63
,Bottom ) steps:3,20
,steps:3 ) ),58
,P1 ) (,1145
,STRING ) next:,18
,Piece ) (,84
,From ) (,63
,To ) ),1012
,All ) ),22
,P2 ) (,595
,P1 ) ),680
,by:P2 ) ),15
,) STRING,1914
,) steps:3,94
,) next:,277
,between ) ),625
,to ) ),3434
,OppositeDirection ) (,3
,moveAgain ) ),576
,diagonals:Alternating ) (,9
,} ) use:Vertex,87
,STRING ) (,5433
,P1 ) },26
,P1 ) count:2,9
,count:2 ) (,79
,count:8 ) (,9
,count:8 ) },2
,} ) phases:,144
,Empty ) ),359
,Mover ) ),1601
,Mover ) STRING,75
,OppositeDirection ) ),5
,Pass ) ),87
,top:True ) ),33
,) count:2,93
,) phases:,287
,} ) counts:,10
,Pass ) (,29
,) counts:,27
,<Tiger:move> ) },1
,<Start:tigerSites> ) },1
,<Tiger:playMove> ) (,1
,} ) >,303
,diagonals:Alternating ) edges:,2
,use:Vertex ) >,16
,INTEGER ) >,196
,INTEGER ) use:Vertex,37
,) ) >,400
,top:True ) >,1
,} ) *,147
,} ) },272
,) >,1189
,) edges:,67
,count:21 ) (,2
,Corners ) ),38
,P1 ) count:20,3
,count:20 ) },3
,P1 ) <Num:tigers>,1
,<Num:tigers> ) (,1
,) count:20,4
,) <Num:tigers>,1
,} ) edges:,43
,Top ) ),403
,Bottom ) ),452
,diagonals:Solid ) ),8
,Centre ) ),53
,centrePoint ) ),128
,P1 ) count:16,3
,count:16 ) },2
,P1 ) STRING,8
,) count:16,7
,Pass ) STRING,6
,P1 ) INTEGER,30
,STRING ) >,58
,) INTEGER,2209
,diagonals:Radiating ) use:Vertex,1
,at:EndOfTurn ) >,2
,<Board:initTiger> ) (,1
,P2 ) count:15,12
,count:15 ) },28
,P2 ) ),731
,P2 ) STRING,42
,P2 ) INTEGER,27
,) ) edges:,11
,) count:15,19
,Each ) (,322
,count:24 ) },2
,) ) {,15
,<Move:leopard> ) ),1
,Loss ) ),157
,) {,188
,Each ) },217
,P1 ) count:3,9
,count:3 ) (,52
,Empty ) (,115
,Moves ) INTEGER,20
,) ) count:3,13
,count:3 ) },10
,) ) STRING,971
,Moves ) (,7
,byScore ) ),32
,) count:3,46
,From ) ),158
,INTEGER ) trail:,2
,Neutral ) },32
,by:All ) ),13
,Passed ) (,21
,) trail:,2
,P1 ) count:<Board:initTiger>,1
,count:<Board:initTiger> ) (,1
,P2 ) count:<Board:initLeopard>,1
,count:<Board:initLeopard> ) },1
,P2 ) <Board:leopardGoal>,1
,<Board:leopardGoal> ) (,1
,) count:<Board:initTiger>,1
,) count:<Board:initLeopard>,1
,) <Board:leopardGoal>,1
,P1 ) count:5,45
,count:5 ) (,411
,) count:5,422
,) ) Maybe,2
,) Maybe,2
,INTEGER ) vertices:,8
,) vertices:,35
,from ) ),835
,) ) INTEGER,932
,by:Mover ) (,78
,site ) INTEGER,25
,To ) INTEGER,80
,Top ) (,90
,Left ) (,30
,Right ) ),68
,) ) state:1,2
,state:1 ) (,180
,Bottom ) steps:2,56
,) state:1,38
,<Variant:p1Moves> ) (,1
,Outer ) (,13
,centrePoint ) N,4
,N ) ),14
,) ) vertices:,6
,to ) (,577
,steps:2 ) ),57
,) N,28
,P1 ) count:1,3
,count:1 ) (,20
,P2 ) count:<Num>,1
,count:<Num> ) },1
,) count:1,35
,) count:<Num>,1
,by:P1 ) ),16
,<Moves:dog> ) },1
,Draw ) ),69
,Bottom ) (,61
,by:P2 ) if:,2
,) if:,981
,Board ) (,181
,Corners ) (,7
,Bottom ) steps:1,4
,steps:1 ) (,20
,) steps:1,50
,by:Next ) (,23
,) ) Orthogonal,114
,) ) P1,238
,To ) to:,14
,from ) (,540
,P1 ) count:12,6
,count:12 ) (,10
,) Orthogonal,257
,) P1,261
,) to:,100
,) count:12,15
,P1 ) count:24,1
,) count:24,1
,} ) count:5,3
,#1 ) if:#2,1
,) if:#2,1
,INTEGER ) if:#1,2
,count:15 ) (,30
,Centre ) counts:,1
,) if:#1,3
,P2 ) count:17,1
,count:17 ) (,1
,count:2 ) },28
,) count:17,2
,P2 ) count:25,1
,count:25 ) (,4
,) count:25,5
,Top ) steps:4,16
,steps:4 ) (,29
,Centre ) S,1
,distance:1 ) ),2
,) steps:4,48
,) S,23
,count:20 ) (,2
,P2 ) count:<Goat:num>,1
,count:<Goat:num> ) (,1
,P1 ) count:<Tiger:num>,1
,count:<Tiger:num> ) },1
,by:Mover ) ),52
,) count:<Goat:num>,1
,) count:<Tiger:num>,1
,#1 ) ),405
,STRING ) #1,7
,#2 ) ),208
,Pending ) ),84
,Pending ) (,51
,To ) (,461
,between ) #3,6
,#3 ) ),45
,) ) #2,98
,between ) (,110
,ToClear ) ),29
,Mover ) INTEGER,82
,Prev ) INTEGER,5
,<Fox:stepMove> ) ),1
,<Fox:rememberHopCapture> ) ),1
,) ) next:,153
,) #1,241
,) #3,27
,) #2,181
,by:Next ) ),15
,<Start:play> ) ),1
,P2 ) count:16,4
,count:16 ) (,9
,centrePoint ) count:2,2
,<Play:kingHop> ) (,1
,centrePoint ) count:<Play:numKings>,1
,count:<Play:numKings> ) (,1
,INTEGER ) if:,105
,) count:<Play:numKings>,1
,} ) count:4,1
,count:4 ) },15
,) count:4,100
,} ) vertices:,19
,STRING ) Special,1
,from ) INTEGER,29
,INTEGER ) },359
,centrePoint ) count:4,1
,count:4 ) (,74
,) Special,1
,centrePoint ) S,2
,S ) ),22
,) ) P2,233
,P2 ) },92
,) P2,253
,contiguous:False ) ),1
,use:Vertex ) <Variant:pieceMoves>,1
,Centre ) (,17
,) ) <Variant:endRules>,1
,<Variant:endRules> ) ),1
,) <Variant:pieceMoves>,1
,) <Variant:endRules>,1
,Pips ) ),129
,Next ) ),421
,directed:True ) (,878
,directed:True ) },169
,num:4 ) (,35
,End ) STRING,14
,Off ) ),41
,P1 ) count:7,3
,count:7 ) (,11
,P2 ) count:7,3
,count:7 ) },5
,roll ) next:,98
,Pips ) INTEGER,78
,mover ) ),346
,Mover ) (,387
,) count:7,9
,EndSite ) ),2
,) ) Connected,1
,P2 ) count:5,43
,count:5 ) },6
,) Connected,1
,STRING ) INTEGER,310
,steps:#1 ) ),12
,pips ) INTEGER,81
,#1 ) End,5
,#1 ) Off,10
,Off ) (,66
,#1 ) (,183
,#1 ) STRING,7
,} ) {,67
,num:6 ) (,17
,roll ) ),82
,) ) if:,353
,pips ) ),107
,DiceUsed ) ),88
,TeamMover ) (,10
,) End,34
,) Off,72
,next ) ),67
,) ) Off,23
,) ) End,19
,End ) },8
,#1 ) if:,30
,by:#1 ) ),12
,End ) ),10
,#2 ) INTEGER,12
,INTEGER ) INTEGER,93
,site ) steps:,7
,INTEGER ) {,55
,num:2 ) (,49
,} ) P1,9
,} ) P2,9
,} ) Bar,12
,) ) noMoveYet:,7
,top:True ) (,35
,) steps:,83
,) Bar,12
,) noMoveYet:,7
,steps:6 ) ),17
,count:14 ) (,4
,DiceUsed ) (,4
,centrePoint ) if:,1
,) ) cells:,18
,count:4 ) ),15
,) cells:,31
,steps:#2 ) ),66
,num:3 ) (,25
,P1 ) count:15,7
,steps:1 ) ),83
,steps:4 ) ),15
,steps:5 ) ),5
,Off ) STRING,9
,at:#1 ) ),37
,num:<Dice:num> ) (,3
,<Dice:move> ) },1
,mover ) top:True,11
,Mover ) Undefined,3
,Undefined ) (,4
,moveAgain ) (,247
,Undefined ) ),12
,count:1 ) },2
,) top:True,32
,) Undefined,5
,DiceEqual ) ),10
,steps:#3 ) ),19
,MovesThisTurn ) ),26
,mover ) (,44
,from ) level:,148
,level ) ),279
,from ) #1,28
,From ) FromTop,26
,From ) level:,46
,To ) FromTop,7
,To ) level:,64
,STRING ) P3,2
,P3 ) (,91
,STRING ) P1,4
,P4 ) (,57
,STRING ) P2,4
,STRING ) P4,2
,P4 ) ),99
,} ) The,7
,) level:,359
,) FromTop,61
,) P3,2
,) P4,2
,) The,13
,value ) ),97
,moveAgain ) },33
,DiceEqual ) (,19
,Remembered ) ),12
,STRING ) top:True,10
,All ) (,59
,) ) steps:,44
,at:#1 ) INTEGER,28
,} ) count:2,16
,state:1 ) },40
,by:Mover ) if:,19
,<Board> ) ),33
,level ) INTEGER,13
,} ) count:3,9
,) ) Move,10
,) Move,12
,P2 ) count:12,5
,P3 ) count:12,1
,P4 ) count:12,1
,count:12 ) },9
,) ) True,59
,True ) ),64
,) True,79
,to ) },6
,STRING ) index:0,6
,index:0 ) ),12
,index:0 ) (,2
,STRING ) index:1,6
,index:1 ) ),5
,index:1 ) (,2
,STRING ) index:2,6
,index:2 ) ),4
,index:2 ) (,2
,STRING ) index:3,6
,index:3 ) ),4
,index:3 ) (,2
,STRING ) index:4,6
,index:4 ) ),4
,index:4 ) (,2
,STRING ) index:5,6
,index:5 ) ),4
,index:5 ) (,2
,STRING ) index:6,4
,index:6 ) ),3
,Next ) (,347
,count:13 ) (,4
,) index:0,14
,) index:1,7
,) index:2,6
,) index:3,6
,) index:4,6
,) index:5,6
,) index:6,4
,MovesThisTurn ) INTEGER,18
,MovesThisTurn ) (,5
,quadrant ) (,5
,quadrant ) },1
,INTEGER ) Can,1
,INTEGER ) Reset,1
,. ) ),5
,) Can,8
,) Reset,1
,} ) INTEGER,5
,to ) INTEGER,38
,To ) #1,11
,<Players:num> ) (,13
,directed:True ) <Players:track3>,1
,Board ) ),109
,) ) <Players:arc3>,1
,count:<Num:piece> ) ),3
,STRING ) **,128
,directed:True ) >,34
,) <Players:track3>,1
,) <Players:arc3>,1
,) **,130
,STRING ) Off,12
,STRING ) if:,120
,) ) steps:1,11
,Board ) STRING,5
,} ) Opposite,4
,site ) STRING,36
,) ) ifAfterwards:,89
,) Opposite,4
,) ifAfterwards:,288
,<Player:num> ) (,28
,directed:True ) <Player:trackP3P4>,1
,P2 ) count:3,6
,count:3 ) <Player:startP3P4>,1
,P3 ) count:3,4
,P4 ) count:3,3
,) <Player:trackP3P4>,1
,) <Player:startP3P4>,1
,#1 ) #2,11
,from ) STRING,59
,STRING ) End,8
,count:2 ) ),18
,) ) count:2,29
,) ) if:True,19
,to ) FromTop,16
,to ) level:,40
,P1 ) count:4,14
,P2 ) count:4,14
,) if:True,43
,Mover ) },23
,directed:True ) use:Vertex,1
,) ) count:,402
,Mover ) -2,2
,-2 ) (,1
,-1 ) ),6
,-2 ) ),2
,num:5 ) (,2
,) count:,451
,) -2,2
,at:<End:site1> ) ),1
,at:<End:site2> ) ),1
,at:<End:site3> ) ),1
,at:<End:site4> ) ),1
,at:<End:site5> ) ),1
,at:<End:site6> ) ),1
,<End:sites> ) ),1
,at:12 ) ),10
,at:0 ) ),4
,Shared ) (,157
,var ) ),36
,INTEGER ) stack:True,1
,stack:True ) (,6
,directed:True ) ),3
,level ) (,11
,Shared ) ),48
,) ) stack:True,50
,stack:True ) ),32
,num:4 ) },3
,site ) count:,3
,player ) (,2
,player ) ),9
,) stack:True,56
,P2 ) count:1,1
,count:1 ) >,5
,count:4 ) >,8
,count:3 ) >,2
,P3 ) count:4,11
,P4 ) count:4,10
,count:3 ) ),28
,Pips ) (,8
,Mover ) if:,98
,num:7 ) (,4
,} ) <Players:tracks>,1
,if:True ) ),4
,} ) <Players:entries>,2
,) ) <Players:endTracks>,1
,Mover ) <Players:playingTeamPieces>,1
,<Players:playingTeamPieces> ) },1
,P3 ) ),105
,P5 ) ),26
,P6 ) ),25
,P5 ) },2
,P6 ) },1
,) <Players:tracks>,1
,) <Players:entries>,3
,) <Players:endTracks>,1
,) <Players:playingTeamPieces>,1
,) ) top:True,7
,level:0 ) ),4
,level:1 ) ),2
,INTEGER ) End,1
,INTEGER ) STRING,57
,P2 ) count:2,6
,at:3 ) ),3
,at:4 ) ),2
,at:5 ) ),2
,at:1 ) ),3
,at:2 ) ),3
,at:16 ) ),2
,at:17 ) ),4
,at:18 ) ),4
,at:13 ) ),10
,at:14 ) ),8
,at:15 ) ),8
,<Ruleset:piece> ) (,1
,) ) specifically,1
,From ) steps:1,1
,End ) (,9
,True ) (,8
,End ) #1,2
,) ) Squares,2
,rule ) ),2
,) ) Square,1
,) ) #1,57
,INTEGER ) #3,1
,#4 ) ),14
,#6 ) next:,1
,#7 ) ),4
,#7 ) (,1
,} ) <Dice>,1
,} ) <Ruleset:rules>,1
,<Ruleset:rules> ) (,1
,num:1 ) >,2
,num:4 ) >,1
,STRING ) ~,9
,~ ) >,4
,#1 ) if:True,2
,var ) (,6
,Moves ) ),27
,From ) INTEGER,7
,var ) INTEGER,41
,count:5 ) ),3
,) ) whats:,2
,STRING ) if:True,1
,) specifically,1
,) Squares,2
,) Square,1
,) <Dice>,1
,) <Ruleset:rules>,1
,) ~,29
,) whats:,2
,at:10 ) ),7
,at:11 ) ),8
,at:8 ) ),4
,at:9 ) ),4
,INTEGER ) True,6
,Mover ) steps:,3
,P1 ) count:13,2
,P2 ) count:13,1
,count:13 ) },1
,Mover ) Move,1
,top:True ) Enter,1
,) ) Enter,1
,) count:13,3
,) Enter,2
,Remembered ) (,5
,STRING ) level:0,3
,level:0 ) Mover,1
,STRING ) level:1,1
,level:1 ) Mover,1
,STRING ) count:2,1
,INTEGER ) If,2
,value ) INTEGER,5
,) ) Remove,4
,centrePoint ) (,6
,value:1 ) (,34
,value:1 ) },3
,) level:0,5
,) Mover,200
,) level:1,1
,) If,5
,) Remove,4
,index:6 ) Off,1
,site ) (,89
,count:<Pieces:num> ) (,1
,count:<Pieces:num> ) },1
,top:False ) (,6
,site ) level:,36
,} ) count:8,2
,LevelTo ) ),11
,) count:8,5
,<Board:size> ) {,5
,#2 ) Off,1
,#2 ) End,1
,#2 ) if:,5
,size:2 ) (,9
,<Board:sizeHome> ) (,1
,<Players:numPlayers> ) (,2
,<Board:size> ) ),19
,STRING ) <Players:home>,1
,Orthogonal ) ),107
,) <Players:home>,2
,to ) STRING,189
,) ) #3,9
,To ) #2,9
,Next ) INTEGER,64
,#2 ) (,34
,possibilities ) (,1
,To ) STRING,16
,) ) If,3
,Piece ) },15
,<Board:size> ) (,24
,Each ) <Players:home>,1
,INTEGER ) column:,18
,STRING ) column:,5
,STRING ) column:0,5
,column:0 ) steps:,11
,) column:,24
,) column:0,9
,Each ) <Board:home>,1
,STRING ) steps:3,16
,STRING ) steps:4,4
,) <Board:home>,1
,<Version:numPlayers> ) (,11
,Each ) <Version:home>,1
,Orthogonal ) (,152
,) ) N,1
,N ) (,173
,) ) W,2
,W ) },12
,INTEGER ) column:0,4
,) ) E,2
,E ) (,35
,) ) S,2
,S ) },118
,INTEGER ) Orthogonal,4
,INTEGER ) N,2
,INTEGER ) E,2
,E ) },10
,INTEGER ) W,2
,INTEGER ) S,2
,W ) (,31
,) <Version:home>,1
,) W,39
,) E,41
,#1 ) Diagonal,11
,) Diagonal,45
,Top ) steps:3,19
,INTEGER ) -,1
,) ) -,1
,#1 ) },7
,from ) if:,44
,Empty ) #2,1
,from ) Diagonal,7
,Diagonal ) ),36
,) ) or,2
,To ) or,1
,to ) #2,8
,) ) #4,1
,P2 ) #3,1
,#4 ) (,5
,#3 ) (,16
,#3 ) #5,2
,#5 ) },1
,} ) end,1
,or ) end,1
,piece ) #1,1
,} ) steps:8,1
,E ) steps:16,1
,S ) (,52
,} ) steps:6,2
,} ) steps:16,3
,} ) steps:5,2
,} ) steps:3,4
,-1 ) (,6
,STRING ) -1,2
,to:Next ) next:,1
,) -,2
,) or,3
,) #4,11
,) #5,29
,) end,2
,) steps:8,16
,) steps:16,4
,) steps:6,22
,) steps:5,9
,) -1,3
,by:#2 ) ),6
,by:#1 ) (,10
,Prev ) STRING,76
,at:32 ) (,6
,at:33 ) (,6
,size:2 ) },5
,To ) to:Next,4
,to:Next ) ),6
,Prev ) ),55
,prev ) ),6
,Players ) (,3
,Active ) ),4
,) to:Next,5
,from ) Orthogonal,36
,to ) Orthogonal,14
,) ) Not,1
,) ) if,1
,) ) Only,2
,site ) P1,1
,site ) P2,1
,To ) Orthogonal,8
,) ) Any,1
,State ) ),3
,From ) Orthogonal,3
,) ) An,1
,) ) With,2
,size:6 ) (,4
,value:2 ) (,14
,value:3 ) (,27
,value:4 ) (,13
,value:5 ) (,11
,value:6 ) },1
,) ) pieces,2
,State ) (,1
,Win ) (,4
,Loss ) },1
,) Not,1
,) if,1
,) Only,2
,) Any,1
,) An,1
,) With,2
,) pieces,2
,directed:True ) <Player:trackP3>,3
,count:4 ) <Player:startP3>,2
,) <Player:trackP3>,3
,) <Player:startP3>,3
,} ) <Version:map>,1
,P3 ) count:2,1
,P4 ) count:2,1
,) <Version:map>,1
,top:False ) ),15
,level ) if:,13
,from ) #2,5
,pips ) (,2
,site ) #2,8
,) ) The,5
,} ) state:1,11
,P1 ) count:21,1
,P2 ) count:21,1
,count:21 ) },1
,) count:21,2
,SE ) (,14
,NW ) },2
,size:<Board:numPieces> ) (,1
,num:<Board:numDice> ) (,1
,) ) steps:<Board:sizeHome>,2
,P1 ) state:1,1
,INTEGER ) state:2,3
,state:2 ) (,21
,INTEGER ) state:3,5
,state:3 ) (,28
,INTEGER ) state:4,5
,state:4 ) (,12
,INTEGER ) state:5,5
,state:5 ) (,14
,INTEGER ) state:6,4
,state:6 ) (,13
,P2 ) state:1,2
,state:6 ) >,1
,P1 ) state:2,4
,INTEGER ) state:8,2
,state:8 ) (,10
,INTEGER ) state:9,2
,state:9 ) (,2
,INTEGER ) state:10,2
,state:10 ) (,2
,INTEGER ) state:11,2
,state:11 ) (,2
,INTEGER ) state:12,2
,state:12 ) (,1
,P2 ) state:2,4
,state:12 ) >,1
,) steps:<Board:sizeHome>,2
,) state:2,23
,) state:3,7
,) state:4,7
,) state:5,5
,) state:6,4
,) state:8,152
,) state:9,2
,) state:10,2
,) state:11,2
,) state:12,2
,moveagain ) envoked,1
,between ) at:EndOfTurn,13
,at:EndOfTurn ) ),37
,) ) Defines,6
,from ) Forward,3
,To ) Forward,1
,Forward ) ),13
,from ) Backward,2
,To ) Backward,31
,Backward ) ),43
,Forward ) (,25
,Backward ) (,11
,) envoked,1
,) at:EndOfTurn,35
,) Defines,6
,) Forward,13
,) Backward,35
,<Num:pieces> ) (,1
,num:<Num:dice> ) (,1
,STRING ) <Player:startP3>,1
,W ) ),63
,P1 ) to:P2,5
,to:P2 ) (,28
,P2 ) to:P1,5
,to:P1 ) },4
,STRING ) False,4
,to:P1 ) (,33
,STRING ) to:P1,5
,STRING ) to:P2,5
,to:P2 ) },7
,) to:P2,15
,) to:P1,15
,) False,83
,num:1 ) (,7
,by:All ) (,11
,Neutral ) ),24
,Neutral ) (,73
,STRING ) level:,6
,From ) to:,33
,site ) FromTop,12
,<Player:number> ) (,3
,sites:86 ) {,3
,if:True ) (,66
,) ) maxState:85,1
,maxState:85 ) (,1
,container:1 ) ),1
,Mover ) level:,3
,Player ) (,16
,) maxState:85,1
,To ) >,1
,From ) >,1
,) ) A,1
,index/value ) (,1
,state:7 ) (,12
,state:8 ) },2
,) A,1
,Mover ) Off,6
,Off ) #1,3
,From ) STRING,32
,STRING ) to:,15
,loop:True ) (,37
,loop:True ) },36
,use:Edge ) (,27
,) ) phases:,143
,P5 ) (,11
,P6 ) (,11
,P7 ) (,10
,Neutral ) level:,11
,LevelTo ) (,6
,Neutral ) STRING,4
,maxState:10 ) (,1
,2-stack ) in,1
,1-stack ) .,1
,) ) <Stack:limit>,2
,<Stack:limit> ) ),2
,) ) Sacrifice,2
,) ) This,3
,. ) stack:True,2
,) ) stack:,3
,) ) Throw,2
,Backwards ) (,3
,INTEGER ) if:True,20
,<Board:shape> ) ),1
,} ) top:True,1
,) ) <End:event>,1
,) in,1
,) .,16
,) <Stack:limit>,2
,) Sacrifice,2
,) This,3
,) stack:,3
,) Throw,2
,) <End:event>,1
,P1 ) count:<Scoring:num>,2
,count:<Scoring:num> ) (,2
,P3 ) count:<Scoring:num>,2
,count:<Scoring:num> ) },2
,) count:<Scoring:num>,4
,INTEGER ) look,1
,<Variant:capture> ) ),1
,#1 ) >,1
,) look,1
,Pass ) },5
,directed:True ) <Player:track58>,1
,<Player:diceHand> ) },1
,roll ) (,3
,pips ) STRING,2
,P5 ) count:4,2
,P6 ) count:4,2
,P7 ) count:4,2
,P8 ) count:4,2
,P9 ) count:4,1
,P10 ) count:4,1
,P11 ) count:4,1
,P12 ) count:4,1
,P13 ) count:4,1
,P14 ) count:4,1
,P15 ) count:4,1
,P16 ) count:4,1
,) <Player:track58>,1
,distance:7 ) ),8
,} ) <Player:tracks>,1
,} ) <Player:center>,1
,) <Player:tracks>,7
,) <Player:center>,1
,<Play:capture> ) ),1
,<Play:movePiece> ) (,1
,STRING ) stack:True,1
,by:Mover ) STRING,1
,} ) **,2
,UNE ) (,3
,USE ) (,2
,USW ) (,2
,UNW ) },1
,pyramidal:True ) use:Vertex,4
,count:15 ) ),2
,Empty ) if:,41
,Flat ) (,1
,Flat ) ),11
,at:#1 ) (,13
,at:#2 ) ),6
,on:Edge ) (,6
,Cell ) (,12
,Each ) <Players:regions>,1
,Edge ) (,15
,Edge ) ),39
,) ) ifAfterwards:<Players:pathRule>,1
,ifAfterwards:<Players:pathRule> ) (,1
,P1 ) count:10,2
,count:10 ) (,3
,P2 ) count:10,2
,P3 ) count:5,38
,P4 ) count:5,38
,) <Players:regions>,1
,) ifAfterwards:<Players:pathRule>,1
,) count:10,4
,Each ) Map,1
,To ) if:,3
,) Map,1
,) ) <Players:entries>,1
,} ) <Player:track>,1
,num:3 ) },1
,P3 ) },16
,P4 ) },6
,) <Player:track>,1
,count:2 ) <Player:teams>,1
,Team1 ) ),6
,by:Team1 ) ),1
,Team2 ) ),6
,by:Team2 ) ),1
,) <Player:teams>,1
,Players ) INTEGER,8
,Mover ) steps:1,1
,All ) },17
,P7 ) ),24
,P8 ) ),23
,P9 ) ),24
,P10 ) ),7
,P11 ) ),6
,P12 ) ),5
,P13 ) ),4
,P14 ) ),3
,P15 ) ),2
,P16 ) ),1
,STRING ) True,7
,STRING ) #2,35
,Neutral ) #1,1
,level:#2 ) ),2
,) ) maxState:8,1
,maxState:8 ) (,1
,) ) <Player:start>,1
,) maxState:8,1
,) <Player:start>,1
,) ) maxState:7,1
,maxState:7 ) (,1
,size:1 ) },1
,) maxState:7,1
,mover ) STRING,1
,LevelTo ) INTEGER,1
,From ) #1,57
,#1 ) to:,1
,to ) to:Mover,2
,to:Mover ) ),12
,To ) False,17
,to:Next ) (,11
,to:Mover ) },4
,) ) to:P1,1
,) ) to:P2,1
,) to:Mover,2
,) ) Forward,5
,Columns ) ),4
,Rows ) INTEGER,8
,) ) column:,1
,Columns ) INTEGER,1
,INTEGER ) to:,4
,} ) <Player:startPos>,1
,Vertex ) ),9
,) <Player:startPos>,1
,steps:#1 ) (,1
,value:36 ) (,3
,value:38 ) },1
,value:38 ) (,2
,value:37 ) },1
,value:37 ) (,1
,value:39 ) },1
,num:3 ) INTEGER,1
,INTEGER ) All,2
,INTEGER ) One,1
,INTEGER ) Two,2
,) All,20
,) One,1
,) Two,3
,) ) From,11
,by:Enemy ) (,6
,} ) cells:,2
,-36 ) (,1
,-72 ) },1
,Out ) ),12
,) From,11
,mover ) INTEGER,7
,-10 ) (,1
,afterConsequence:True ) },71
,Prev ) (,76
,mover ) apply:,86
,Pending ) STRING,8
,) apply:,122
,loop:True ) ),79
,Shared ) },57
,Bottom ) counts:,1
,Top ) counts:,1
,From ) steps:,1
,sow ) (,1
,to ) count:,15
,<Board:rowSize> ) (,4
,<Board:InitOneSeed> ) (,1
,<Board:InitTwoSeeds> ) (,1
,Next ) if:,6
,mover ) apply:<Capture:type>,3
,apply:<Capture:type> ) ),1
,apply:<Capture:type> ) (,2
,STRING ) Undefined,2
,Undefined ) STRING,1
,) apply:<Capture:type>,3
,To ) steps:#1,1
,store:None ) (,1
,} ) next:,2
,From ) count:,14
,Board ) if:,50
,) steps:#1,1
,STRING ) if:#1,1
,if:#1 ) (,3
,mover ) if:,3
,} ) apply:,6
,Pending ) },4
,) ) steps:3,7
,) ) <Sow:numSeed>,1
,<Sow:numSeed> ) ),1
,STRING ) We,2
,) <Sow:numSeed>,1
,) We,6
,INTEGER ) count:2,28
,) ) count:1,31
,count:1 ) ),17
,mover ) skipIf:,2
,) ) skipIf:,14
,) skipIf:,16
,) ) origin:True,11
,origin:True ) ),8
,next ) (,21
,) origin:True,14
,afterConsequence:True ) ),16
,Turns ) INTEGER,10
,) ) False,45
,False ) },1
,STRING ) store:None,2
,Passed ) STRING,28
,STRING ) count:,8
,) store:None,2
,afterConsequence:True ) STRING,2
,steps:1 ) },6
,steps:1 ) count:,2
,) ) steps:2,9
,E ) ),59
,Pending ) We,1
,<Row:size> ) (,16
,var ) },5
,<ExtraCapture:num> ) ),2
,from ) Mover,6
,Turns ) ),11
,) ) counts:,10
,P1 ) <Board:track2>,1
,) ) to:,3
,P2 ) >,21
,) <Board:track2>,1
,<Board:track> ) (,1
,Each ) <Board:regions>,2
,P1 ) counts:,1
,P2 ) counts:,1
,P3 ) counts:,1
,P4 ) counts:,1
,INTEGER ) sowEffect:,1
,) ) apply:,23
,STRING ) steps:1,1
,loop:True ) >,8
,) <Board:regions>,2
,) sowEffect:,1
,Prev ) True,4
,False ) ),9
,<Board:tracks> ) (,2
,Pass ) Forfeit,1
,) Forfeit,1
,Player ) ),12
,<Row:size> ) INTEGER,3
,mover ) origin:True,3
,origin:True ) },1
,<Board:innerInitP1> ) Inner,1
,<Board:innerInitP2> ) Inner,1
,) Inner,2
,INTEGER ) <Board:leftMostP2>,1
,) <Board:leftMostP2>,1
,<Sow:numSeed> ) (,1
,site ) W,1
,site ) E,1
,) ) origin:,4
,) origin:,4
,) ) second,1
,) second,1
,<Row:tracks> ) (,1
,from ) N,5
,from ) S,4
,loop:True ) use:Vertex,5
,} ) kalahs,39
,pits ) (,31
,Track ) ),92
,var ) if:True,1
,) kalahs,39
,Each ) <Player:regions>,1
,) <Player:regions>,1
,) ) Middle,1
,} ) leftHole,1
,) Middle,2
,) leftHole,1
,P1 ) if:,6
,P2 ) if:,6
,Right ) steps:2,14
,Left ) steps:2,14
,) ) count:4,31
,STRING ) {,29
,FirstSite ) (,33
,LastSite ) },33
,) ) backtracking:True,11
,backtracking:True ) (,1
,value ) (,7
,) backtracking:True,11
,backtracking:True ) ),18
,unique:True ) (,8
,unique:True ) ),4
,origin:True ) (,3
,forward:True ) ),3
,Next ) {,3
,<Capture:doneSoFar> ) },1
,} ) Two,1
,) ) <Capture:numCounters>,1
,<Capture:numCounters> ) ),1
,) ) No,7
,) ) We,2
,) <Capture:numCounters>,1
,) No,11
,) ) <Counters:num>,1
,<Counters:num> ) apply:,1
,Mover ) {,1
,) ) no,2
,) <Counters:num>,1
,) no,2
,Empty ) index:0,2
,) ) includeSelf:False,14
,Track ) if:,1
,) includeSelf:False,14
,forward:True ) (,3
,INTEGER ) apply:,5
,) ) backtracking:,4
,) backtracking:,4
,to ) #1,38
,moveAgain ) #2,1
,steps:7 ) ),2
,steps:8 ) ),6
,LastSite ) (,7
,FirstSite ) },7
,) ) count:5,2
,) ) <Board:centreMove>,1
,Passed ) {,8
,) ) count:6,5
,count:6 ) ),8
,Left ) steps:1,3
,Right ) steps:1,3
,) <Board:centreMove>,1
,) count:6,9
,afterConsequence:True ) steps:1,2
,to ) steps:1,17
,to ) steps:2,6
,pits ) },10
,<Rightmost:sitesP1> ) ),1
,<Rightmost:sitesP2> ) ),1
,Board ) INTEGER,1
,steps:1 ) count:3,1
,pass ) (,1
,Track ) (,3
,at:7 ) INTEGER,1
,at:8 ) INTEGER,1
,at:9 ) INTEGER,1
,at:10 ) INTEGER,1
,at:11 ) INTEGER,1
,at:12 ) INTEGER,1
,at:1 ) INTEGER,1
,at:2 ) INTEGER,1
,at:3 ) INTEGER,1
,at:4 ) INTEGER,1
,at:5 ) INTEGER,1
,at:6 ) INTEGER,1
,To ) steps:1,1
,next ) INTEGER,1
,Cycle ) (,6
,includeSelf:False ) ),4
,to ) W,11
,to ) E,11
,STRING ) count:4,1
,) ) count:7,2
,INTEGER ) count:4,1
,from ) steps:,2
,STRING ) W,6
,STRING ) E,6
,} ) fourth,1
,) fourth,1
,} ) if:,12
,sow ) ),6
,) ) forward:True,4
,) forward:True,4
,steps:1 ) to:,1
,) ) count:<Board:init>,1
,) count:<Board:init>,1
,From ) apply:,1
,<Players:track> ) (,1
,Shared ) <Players:homes>,1
,) ) <Players:Play>,1
,<Players:end> ) ),2
,Each ) >,2
,) <Players:homes>,1
,) <Players:Play>,1
,INTEGER ) count:3,1
,Mover ) to:,1
,To ) unique:True,1
,) unique:True,17
,Bottom ) if:,1
,P1 ) count:72,1
,count:72 ) ),1
,) count:72,1
,Shared ) count:17,1
,count:17 ) ),4
,INTEGER ) count:,4
,Mover ) count:,1
,STRING ) count:5,1
,loop:True ) <Board:homeTracks>,1
,} ) <Board:openingRegions>,1
,) <Board:homeTracks>,1
,) <Board:openingRegions>,1
,) ) count:8,1
,) ) <End:rule>,1
,<End:rule> ) ),1
,) <End:rule>,1
,afterConsequence:True ) (,2
,STRING ) count:7,1
,count:7 ) ),1
,Right ) steps:5,1
,Left ) steps:5,1
,} ) First,1
,) First,1
,To ) count:,2
,#1 ) INTEGER,9
,Mover ) >,1
,Cycle ) ),1
,by:Mover ) to:1,1
,<Result> ) ),11
,) to:1,1
,to ) if:,1
,) ) not,1
,) not,1
,<Columns:num> ) ),4
,numSides:4 ) (,2
,numSides:4 ) },2
,mover ) state:0,2
,state:0 ) (,7
,mover ) state:1,1
,<End:result> ) ),3
,) state:0,5
,count:10 ) },1
,to ) Own,10
,Own ) ),7
,to ) Enemy,3
,Enemy ) ),6
,) Own,16
,) Enemy,9
,by:P2 ) (,9
,INTEGER ) edges:,10
,between ) Off,1
,Slide ) (,1
,STRING ) Diagonal,2
,} ) <Play>,4
,<Play> ) ),1
,) <Play>,4
,use:Vertex ) <Version:hand>,1
,) ) <Move:limit>,1
,by:P2 ) to:0,1
,P1 ) >,10
,) <Version:hand>,1
,) <Move:limit>,1
,) to:0,2
,state:2 ) },3
,by:Neutral ) ),8
,<Play> ) },1
,Orthogonal ) INTEGER,9
,diagonals:Solid ) use:Vertex,7
,to ) NotEmpty,3
,) NotEmpty,4
,<Rules:start> ) <Rules:play>,1
,count:2 ) >,1
,) <Rules:play>,1
,swap ) ),18
,count:29 ) (,1
,count:30 ) },1
,Empty ) STRING,7
,counter ) INTEGER,24
,Counter ) ),58
,) ) To,1
,. ) (,2
,) To,21
,diagonals:Solid ) edges:,1
,<Players> ) (,1
,All ) <Players>,1
,<Players> ) STRING,1
,Playable ) (,1
,) <Players>,1
,NE ) (,24
,SW ) },7
,NW ) (,35
,SE ) },10
,) ) copy:True,14
,copy:True ) ),5
,<Result:mover> ) ),2
,<Result:next> ) ),1
,) copy:True,14
,P2 ) in:,1
,Full ) ),3
,Loop ) ),1
,} ) #1,4
,to:All ) ),5
,to:All ) (,5
,var ) represents,4
,here ) ),4
,) in:,13
,) represents,4
,NE ) },2
,SW ) (,18
,next ) },1
,STRING ) Mover,121
,INTEGER ) count:25,4
,count:25 ) },1
,Bottom ) },1
,Right ) },4
,swap ) (,1
,noRepeat ) },1
,centrePoint ) },4
,) ) to:2,2
,) ) -------------------------------------------------------------------------,5
,} ) -------------------------------------------------------------------------,2
,) to:2,2
,) -------------------------------------------------------------------------,7
,Loop ) (,1
,SidesNoCorners ) (,1
,Corners ) },1
,Sides ) (,3
,<Board:size> ) use:Vertex,5
,#1 ) Orthogonal,4
,site ) if:,2
,) ) Main,9
,<BoardSize:smallSide> ) use:Vertex,7
,use:Vertex ) ),19
,) ) Options,7
,LightTan ) ),1
,) Main,9
,) Options,7
,<Swap:playRules> ) (,1
,<Result:nonMover> ) ),1
,) ) Can,7
,INTEGER ) No,4
,Turns ) (,3
,Players ) ),6
,Prev ) Mover,1
,player ) },1
,) ) Select,2
,) ) Swap,1
,index ) ),2
,) ) Mover,37
,own ) },1
,) Select,2
,) Swap,1
,by:All ) Orthogonal,1
,copy:True ) (,2
,Square ) (,4
,colour:1 ) (,2
,colour:2 ) },2
,automove ) ),1
,STRING ) ifAfterwards:,2
,SidesMatch ) ),1
,mover ) path:True,1
,path:True ) (,2
,next ) path:True,1
,Players ) STRING,2
,) path:True,2
,SW ) #3,1
,#2 ) #3,1
,NE ) ),15
,SE ) ),8
,<Edge:target_zone> ) ),1
,Empty ) >,4
,Inner ) ),1
,N ) },7
,by:Mover ) Empty,1
,by:Enemy ) ),6
,<Size> ) ),4
,) Empty,11
,min:3 ) ),2
,min:5 ) ),1
,} ) included:True,2
,included:True ) (,2
,} ) STRING,51
,) included:True,2
,copy:True ) ifAfterwards:,1
,site ) Own,3
,sites ) if:,1
,site ) stop:,1
,) ) stopIncluded:True,8
,stopIncluded:True ) ),7
,sites ) ),3
,) stop:,5
,) stopIncluded:True,8
,P1 ) min:<Group>,2
,min:<Group> ) (,2
,P2 ) min:<Group>,2
,min:<Group> ) ),2
,Full ) (,5
,) min:<Group>,4
,<Version:endScore> ) ),1
,<Stars> ) (,1
,) ) <Balance>,1
,<Balance> ) ),1
,Board ) >,1
,Outer ) >,1
,Corners ) >,1
,centrePoint ) WSW,2
,WSW ) (,2
,centrePoint ) ESE,2
,ESE ) },2
,) <Balance>,1
,) WSW,2
,) ESE,2
,Bottom ) steps:,5
,) ) <Board:size>,1
,<Board:dot0> ) ),1
,) ) Places,1
,site ) steps:4,1
,site ) steps:8,1
,site ) steps:5,1
,site ) steps:10,1
,site ) steps:15,1
,) <Board:size>,1
,) Places,1
,) steps:10,1
,) steps:15,3
,exact:True ) (,19
,INTEGER ) <Variant>,1
,<Variant> ) (,1
,rings:2 ) use:Vertex,3
,) <Variant>,1
,byLevel:True ) (,3
,Slide ) ),7
,<Tiling:type> ) (,2
,<Tiling:numSides> ) },2
,centrePoint ) E,5
,Playable ) if:,2
,NotEmpty ) ),2
,surround:Next ) (,1
,count:18 ) ),1
,by:Mover ) Orthogonal,1
,#1 ) Cannot,1
,Pending ) next:,1
,<Board:BoardDef> ) (,1
,) ) <Board:ExtraRows>,1
,) ) <Board:ExtraCols>,1
,INTEGER ) cells:,11
,) Cannot,2
,) <Board:ExtraRows>,1
,) <Board:ExtraCols>,1
,<Model:rules> ) ),1
,<Board> ) (,3
,INTEGER ) use:Vertex>,1
,) use:Vertex>,1
,#1 ) exact:True,1
,from ) exact:True,1
,count:12 ) ),19
,) exact:True,2
,by:Next ) if:,7
,Piece ) ifAfterwards:,64
,joinCorners:True ) use:Vertex,12
,count:24 ) ),3
,<Exact> ) (,1
,Outer ) ),26
,count:8 ) ),1
,count:9 ) ),11
,) ) All,5
,diagonals:Alternating ) use:Vertex,4
,count:<Board:size> ) ),1
,exact:True ) },1
,joinCorners:True ) vertices:,1
,rings:3 ) use:Vertex,7
,<Players:player1> ) (,2
,diagonals:Solid ) vertices:,1
,#5 ) ),34
,#6 ) ),3
,#8 ) ),5
,<Board:type> ) (,2
,<To> ) ),1
,To ) },2
,#2 ) STRING,4
,STRING ) N,2
,STRING ) S,2
,LastTo ) what:,4
,) what:,5
,size:16 ) },1
,INTEGER ) value:1,4
,INTEGER ) state:1,11
,what ) (,1
,) ) Colour,1
,who ) (,1
,) ) State,4
,state ) (,1
,) ) Value,1
,) value:1,4
,) Colour,1
,) State,5
,) Value,1
,Outer ) if:,1
,centrePoint ) NE,1
,centrePoint ) SE,1
,centrePoint ) SW,1
,SW ) ),7
,centrePoint ) NW,1
,NW ) ),5
,centrePoint ) W,3
,Groups ) ),4
,) NE,3
,) SE,2
,) SW,2
,) NW,3
,centrePoint ) what:,1
,) ) count:12,2
,) ) site,5
,To ) steps:2,5
,To ) steps:3,2
,) site,5
,Rows ) (,17
,) ) SameLayer,2
,SameLayer ) (,3
,INTEGER ) SameLayer,1
,) SameLayer,3
,<Num:players> ) (,1
,count:14 ) ),1
,<Piece> ) },1
,size:3 ) (,4
,num:1 ) },3
,) ) <Play:choice>,1
,<Play:choice> ) ),1
,) <Play:choice>,1
,from ) E,10
,from ) W,10
,rings:4 ) >,1
,joinCorners:True ) >,1
,) ) use:Cell,8
,use:Cell ) (,6
,mover ) P1,3
,INTEGER ) add,1
,) use:Cell,18
,) add,1
,count:40 ) ),1
,joinCorners:True ) ),1
,Piece ) STRING,3
,STRING ) All,5
,size:4 ) (,1
,Next ) },11
,site ) #1,11
,#2 ) },1
,UNE ) ),2
,USE ) ),1
,USW ) ),1
,from ) steps:2,21
,P1 ) count:6,2
,count:6 ) (,3
,P2 ) count:6,2
,INTEGER ) count:144,2
,count:144 ) (,1
,count:144 ) },1
,Mover ) All,1
,) count:144,2
,To ) NotEmpty,1
,noRepeat ) ),8
,Liberties ) INTEGER,1
,) ) numException:1,1
,numException:1 ) ),1
,) numException:1,1
,) ) state:2,1
,state:4 ) },4
,by:Neutral ) Empty,1
,centrePoint ) Orthogonal,4
,STRING ) in:,6
,) ) Orthogonal>,4
,) Orthogonal>,4
,by:P1 ) (,9
,by:P4 ) ),1
,by:P3 ) ),1
,diagonals:Solid ) (,1
,) ) with:,1
,} ) with:,1
,Player ) INTEGER,1
,) with:,2
,<Disc> ) },1
,) ) Axial,2
,) Axial,2
,Centre ) steps:2,4
,P2 ) count:20,1
,P1 ) Off,2
,counter ) (,3
,counter ) STRING,2
,) ) except:1,2
,except:1 ) ),2
,Left ) steps:6,4
,Right ) steps:6,4
,) except:1,2
,Rows ) ),19
,between ) Own,2
,Own ) if:,1
,) ) except:3,1
,except:3 ) ),1
,) ) <Board:start>,1
,) except:3,1
,) <Board:start>,1
,<Repetition> ) (,2
,INTEGER ) <Version>,2
,<Version> ) (,2
,INTEGER ) #2,4
,#3 ) #4,6
,) ) Capture/Release,3
,) ) Block,3
,) ) Rescue,3
,) ) Release,3
,) ) Hop,3
,) ) Movement,3
,count:16 ) ),2
,between ) INTEGER,1
,to ) N,5
,to ) S,5
,) ) Surround,2
,count:20 ) ),4
,) ) Capture,1
,Bottom ) steps:4,15
,count:23 ) ),2
,count:27 ) ),2
,count:31 ) ),2
,count:35 ) ),2
,count:49 ) ),2
,count:87 ) ),2
,count:44 ) ),2
,count:65 ) ),2
,) <Version>,2
,) Capture/Release,3
,) Block,3
,) Rescue,3
,) Release,3
,) Hop,3
,) Movement,3
,) Surround,2
,) Capture,1
,count:144 ) ),2
,count:152 ) ),2
,STRING ) Orthogonal,51
,count:<Board:numPieces> ) ),1
,To ) N,1
,To ) E,1
,To ) W,1
,To ) S,1
,W ) W,1
,E ) E,1
,N ) N,2
,S ) S,1
,STRING ) <Jarl:captureType>,1
,) <Jarl:captureType>,1
,#4 ) #5,2
,to ) SameDirection,7
,SameDirection ) (,4
,from ) OppositeDirection,7
,) SameDirection,17
,) OppositeDirection,7
,) ) #5,10
,from ) steps:3,2
,by:Next ) #1,1
,Right ) steps:3,11
,Left ) steps:3,11
,Rows ) after:,45
,Rows ) at:EndOfTurn,22
,) after:,57
,Between ) ),3
,) ) Diagonal,23
,Rows ) if:,28
,top:True ) },6
,stack:True ) top:True,1
,OppositeDirection ) SameDirection,2
,SameDirection ) ),4
,STRING ) do,1
,here ) (,1
,) do,1
,) ) SameDirection,4
,To ) SameDirection,3
,) ) Non,1
,) Non,1
,) ) after:,10
,Diagonal ) (,32
,) ) steps:8,2
,#2 ) ifAfterwards:,1
,<Tag:boardSize> ) ),1
,) ) value:10,2
,value:10 ) (,3
,Top ) steps:,4
,value:10 ) },1
,) value:10,2
,Diagonal ) if:,3
,Cell ) Diagonal,1
,count:66 ) },1
,Vertex ) (,6
,on:Cell ) if:,2
,steps:3 ) (,23
,<Board:startP1> ) (,2
,<Board:startP2> ) },1
,Diagonal ) top:True,2
,steps:2 ) >,8
,Slide ) ifAfterwards:,1
,INTEGER ) after:,2
,from ) to:,11
,) ) distance:,1
,#1 ) stack:True,1
,) distance:,1
,between ) #4,2
,) ) before:,1
,from ) before:,1
,) before:,2
,STRING ) steps:5,4
,Top ) steps:1,3
,STRING ) steps:6,4
,STRING ) steps:7,4
,STRING ) steps:2,7
,) steps:7,4
,Slide ) STRING,1
,by:#1 ) to:,2
,by:Next ) index:0,2
,value:2 ) },1
,<Play> ) (,1
,bySite:True ) (,2
,} ) W,1
,} ) E,1
,<End> ) ),2
,Loss ) >,2
,from ) },1
,from ) Enemy,2
,to ) <Board>,4
,~ ) (,1
,) <Board>,4
,To ) Own,1
,<Board:armSize> ) (,1
,<Board:numPiece> ) (,1
,Centre ) steps:,1
,count:6 ) },2
,<Variant:promotedCaptureMove> ) (,1
,<Variant:promotedMove> ) ),1
,) ) <Variant:endRule>,1
,<Variant:endRule> ) ),1
,All ) >,1
,) <Variant:endRule>,1
,Next ) ifAfterwards:,81
,<Elephant> ) (,1
,) ) Backward,2
,) ) to,1
,) to,4
,N ) if:,1
,size:5 ) (,6
,) ) index:0,3
,) ) maxState:3,1
,maxState:3 ) (,3
,) maxState:3,1
,) ) Rukh,1
,) ) Ghora,1
,) ) Fil,1
,) ) Wazir,1
,) ) Shahzada,1
,) ) Padshah,1
,) ) Kotwal,1
,) ) Urdabegini,1
,) ) Paidal,1
,) Rukh,1
,) Ghora,1
,) Fil,1
,) Wazir,1
,) Shahzada,1
,) Padshah,1
,) Kotwal,1
,) Urdabegini,1
,) Paidal,1
,) ) Layakúcan,1
,) ) Lúdkax,1
,) ) Alyx,1
,) ) Slúnax,1
,) ) Kúnax,1
,) ) Férsix,1
,) Layakúcan,1
,) Lúdkax,1
,) Alyx,1
,) Slúnax,1
,) Kúnax,1
,) Férsix,1
,site ) NE,1
,site ) NW,1
,site ) SE,1
,site ) SW,1
,value:1 ) Baidaq,1
,value:2 ) Baidaq,1
,value:3 ) To,1
,value:4 ) To,1
,value:5 ) To,1
,value:6 ) To,1
,value:7 ) To,1
,value:8 ) To,1
,value:9 ) To,1
,value:10 ) To,1
,value:11 ) To,1
,value:12 ) To,1
,value:13 ) To,1
,value:14 ) To,1
,value:15 ) To,1
,value:16 ) To,1
,value:17 ) To,1
,value:18 ) To,1
,value:19 ) To,1
,value:20 ) To,1
,value:21 ) To,1
,value:22 ) To,1
,} ) ifAfterwards:,19
,) Baidaq,2
,INTEGER ) CW,2
,CCW ) (,2
,Orthogonal ) if:,6
,To ) CW,2
,CW ) ),2
,To ) CCW,2
,CCW ) ),2
,Diagonal ) Diagonal,1
,} ) state:0,2
,) CW,4
,) CCW,2
,Corners ) steps:1,1
,STRING ) Move,1
,pot ) (,6
,} ) Mover,28
,P3 ) INTEGER,6
,P4 ) INTEGER,4
,#3 ) if:#4,27
,if:#4 ) #5,15
,) if:#4,27
,) ) Usage:,37
,<p2_directions> ) (,6
,) ) Source:,19
,<player2_arg> ) (,6
,P1 ) #1,8
,<then> ) (,14
,) ) History,3
,castling ) Source:,3
,<piece_name_key> ) (,3
,) ) King,18
,) ) At,2
,<then> ) Source:,3
,<rook_spaces> ) (,3
,<rook_spaces> ) Example:,3
,) ) Pawn,18
,. ) .,13
,from ) steps:1,2
,NNE ) (,3
,SSE ) ),4
,) ) Non-capturing,2
,<back_dir> ) (,5
,<directions> ) (,12
,) ) Handle,1
,directions ) =,2
,<RB2> ) (,2
,#6 ) (,2
,NNW ) ),3
,<piece_types> ) (,7
,~ ) ),24
,Start ) },1
,) Usage:,37
,) Source:,25
,) History,3
,) King,18
,) At,2
,) Example:,3
,) Pawn,18
,) Non-capturing,2
,) Handle,1
,) =,2
,if:#4 ) (,12
,INTEGER ) level:,4
,value ) to:P1,2
,to:P1 ) ),4
,value ) to:P2,2
,to:P2 ) ),4
,) ) Empty,2
,Next ) Off,11
,) ) Courier,1
,site ) steps:2,3
,) Courier,1
,) ) @,1
,) ) Double-step,1
,ENE ) ),2
,SSW ) },1
,<BoardConfig:BoardLayout> ) (,1
,<BoardConfig:King2Start> ) },1
,<BoardConfig:RookLeft2Start> ) },1
,<BoardConfig:RookRight2Start> ) },1
,<BoardConfig:RegionDarkPhase> ) ),1
,<BoardConfig:RegionLightPhase> ) ),1
,<BoardConfig:RegionMediumPhase> ) ),1
,coord:<BoardConfig:Queen2Start> ) (,1
,<BoardConfig:Bishop2Start> ) (,1
,<BoardConfig:Knight2Start> ) (,1
,<BoardConfig:Pawn1Start> ) (,1
,<BoardConfig:Pawn2Start> ) },1
,) @,1
,) Double-step,1
,#1 ) Mover,2
,P1 ) S,1
,N ) distance:1,1
,distance:1 ) (,2
,) distance:1,3
,Mover ) ifAfterwards:,30
,<NumOfPlayers:NumPlayers> ) (,2
,<NumOfPlayers:BoardShape> ) (,2
,) ) <NumOfPlayers:BoardRegions>,2
,<NumOfPlayers:CheckMate> ) ),2
,Player ) Off,5
,Active ) INTEGER,3
,state:1 ) >,4
,) <NumOfPlayers:BoardRegions>,2
,<Placement:Pawn1> ) (,1
,<Placement:Pawn2> ) },1
,) ) <Variant:dice>,1
,<Variant:movement> ) (,1
,) <Variant:dice>,1
,) ) <Play:doubleStep>,1
,) <Play:doubleStep>,1
,steps:2 ) },6
,Left ) steps:4,6
,Right ) steps:4,6
,steps:4 ) },6
,Top ) steps:6,4
,steps:6 ) (,9
,Bottom ) steps:6,4
,steps:6 ) },3
,Top ) steps:8,3
,steps:8 ) (,9
,Bottom ) steps:8,3
,Left ) steps:8,3
,Right ) steps:8,3
,steps:8 ) },3
,size:6 ) },2
,<p2_arg> ) (,1
,to:#2 ) ),3
,to:#2 ) from:#1,2
,to:#2 ) if:,2
,) from:#1,2
,) ) Pawns:,1
,non-capturing ) Note:,1
,) ) For,1
,) Pawns:,1
,) Note:,1
,) For,1
,) ) Here's,1
,) ) Castling,1
,from ) but,1
,W ) #3,1
,) ) Non-Pawn,1
,) ) Pawns,1
,) ) Core,1
,Forward ) },3
,) Here's,1
,) Castling,1
,) but,3
,) Non-Pawn,1
,) Pawns,1
,) Core,1
,} ) ~,20
,) ) <PlacementConditions:PlacementConditions>,2
,<PlacementConditions:PlacementConditions> ) ),1
,INTEGER ) count:8,2
,<PlacementConditions:PlacementConditions> ) (,1
,) <PlacementConditions:PlacementConditions>,2
,<p3_dirs> ) (,1
,<piece_type> ) (,1
,<p3_arg> ) (,1
,P2 ) #2,1
,) ) Hand,1
,captured ) until,1
,colour ) .,1
,Knight ) of,1
,. ) The,1
,. ) Variations:,1
,. ) In,1
,INTEGER ) .,1
,) Hand,1
,) until,1
,) of,1
,) Variations:,1
,) In,1
,) ) Silver,8
,) ) Rook,7
,) ) Bishop,8
,) ) Gold,8
,STRING ) Promoted,27
,) ) Promoted,12
,) Silver,8
,) Rook,8
,) Bishop,8
,) Gold,8
,) Promoted,39
,STRING ) Rook,1
,) ) Knight,6
,) ) Lance,6
,site ) N,1
,site ) S,1
,site ) steps:3,2
,size:7 ) },4
,) Knight,6
,) Lance,6
,size:4 ) },1
,size:5 ) },2
,Adjacent ) (,6
,Adjacent ) on,2
,to ) to:,10
,Adjacent ) ),6
,Forwards ) (,14
,BL ) (,1
,FL ) (,1
,FR ) (,1
,Rightward ) ),1
,Leftward ) ),1
,Forwards ) ),2
,STRING ) Row,26
,) ) Row,8
,Off ) },4
,) on,2
,) Row,35
,Backwards ) STRING,2
,INTEGER ) after:2,1
,after:2 ) },1
,) ) Eric,1
,Backward ) },16
,Rightwards ) STRING,2
,Leftwards ) STRING,2
,BR ) (,1
,Backward ) STRING,1
,INTEGER ) after:35,6
,after:35 ) },3
,Forward ) STRING,2
,Diagonal ) STRING,5
,INTEGER ) after:34,4
,after:34 ) STRING,1
,after:34 ) },4
,after:34 ) ),1
,W ) STRING,1
,E ) STRING,1
,Orthogonal ) STRING,7
,Leftwards ) ),1
,Rightwards ) ),1
,} ) before:34,1
,Diagonal ) },1
,} ) before:35,1
,after:35 ) ),5
,Backwards ) ),1
,after:35 ) (,2
,} ) Todo:,1
,} ) Row,1
,) after:2,1
,) Eric,1
,) after:35,6
,) after:34,4
,) before:34,1
,) before:35,1
,) Todo:,1
,size:8 ) },2
,P1 ) count:9,4
,count:9 ) (,1
,P2 ) count:9,1
,count:9 ) },2
,) count:9,5
,P1 ) N,5
,use:Vertex ) General,4
,STRING ) Guard,1
,STRING ) Elephant,1
,of:All ) (,14
,) ) Horse,6
,) ) Chariot,5
,between ) STRING,6
,) ) Canon,6
,Rows ) STRING,2
,) ) Jump,1
,) ) Soldier,5
,) General,6
,) Guard,5
,) Elephant,5
,) Horse,6
,) Chariot,6
,) Canon,6
,) Jump,1
,) Soldier,6
,) ) Guard,4
,) ) Elephant,4
,STRING ) Chariot,1
,STRING ) Soldier,1
,at:#1 ) Shared,1
,P7 ) },1
,) Shared,5
,) ) General,2
,<Player:size> ) <Player:tracks>,5
,Enemy ) (,10
,P5 ) count:5,36
,P6 ) count:5,36
,count:5 ) >,38
,P7 ) count:5,30
,P8 ) count:5,30
,P9 ) count:5,24
,P10 ) count:5,24
,P11 ) count:5,18
,P12 ) count:5,18
,P13 ) count:5,12
,P14 ) count:5,12
,P15 ) count:5,6
,P16 ) count:5,6
,DiceEqual ) INTEGER,3
,STRING ) count:#1,1
,count:#1 ) ),1
,Bottom ) state:1,5
,Top ) state:1,5
,) count:#1,1
,<High:value> ) (,1
,<High:value> ) },1
,to:P2 ) #1,1
,value:6 ) (,4
,value:7 ) (,4
,Board ) to:P1,2
,Board ) to:P2,1
,From ) False,3
,to:Mover ) (,6
,site ) False,3
,Left ) steps:9,1
,steps:9 ) ),2
,Right ) steps:9,1
,) steps:9,2
,INTEGER ) <Player:tracks>,1
,P8 ) (,5
,P9 ) (,4
,P10 ) (,4
,P11 ) (,3
,P12 ) (,3
,P13 ) (,2
,P14 ) (,2
,P15 ) (,1
,P16 ) (,1
,next:1 ) (,1
,next:2 ) (,1
,next:3 ) (,1
,next:4 ) (,1
,<Player:option> ) },1
,} ) <Player:end>,1
,<Player:end> ) (,1
,Trials ) INTEGER,66
,) <Player:end>,1
,value:5 ) },2
,All ) INTEGER,2
,INTEGER ) We,1
,dice ) (,1
,at:6 ) ),1
,at:7 ) ),1
,at:22 ) ),1
,at:21 ) ),1
,at:20 ) ),1
,at:19 ) ),1
,to ) level:0,2
,) ) <Board:dice>,1
,<Board:size> ) <Board:tracks>,1
,) <Board:dice>,1
,) <Board:tracks>,1
,site ) #3,5
,site ) #4,2
,#4 ) },1
,INTEGER ) we,1
,) we,1
,Left ) steps:17,1
,steps:17 ) ),2
,Right ) steps:17,1
,) steps:17,2
,directed:True ) Local,2
,) Local,2
,sites:88 ) {,1
,) ) Enemy,3
,Enemy ) if:,1
,by:All ) if:,1
,<Board:size> ) <Board:track>,1
,num:8 ) (,2
,) ) <Players:start>,1
,) <Board:track>,1
,) <Players:start>,1
,num:<Dice:num> ) <Dice:throwValues>,1
,) <Dice:throwValues>,1
,by:Team1 ) (,2
,by:Team2 ) (,2
,Team1 ) (,3
,) ) <Slide:to>,1
,<Option:players> ) (,1
,<Option:board> ) (,1
,<Step:to> ) (,1
,<Option:start1> ) (,1
,<Option:start2> ) <Option:start3>,1
,) ) <End:rules>,1
,<End:rules> ) ),1
,INTEGER ) loops:3>,1
,INTEGER ) loops:3,1
,} ) steps:2,16
,steps:3 ) >,2
,) <Slide:to>,1
,) <Option:start3>,1
,) <End:rules>,1
,) loops:3>,1
,) loops:3,1
,} ) maxState:100,3
,maxState:100 ) },1
,NoEnd ) ),4
,INTEGER ) <Players:setupRules>,1
,value:3 ) >,3
,P3 ) state:2,2
,P4 ) state:2,1
,P5 ) state:2,1
,P6 ) state:2,1
,P7 ) state:2,1
,P8 ) state:2,1
,P9 ) state:2,1
,P10 ) state:2,1
,P11 ) state:2,1
,P12 ) state:2,1
,) maxState:100,3
,) <Players:setupRules>,1
,Cell ) if:,2
,on:#2 ) (,1
,Edge ) },1
,} ) <Players:removeLastPiece>,1
,<Players:removeLastPiece> ) ),1
,) ) <Players:end>,1
,) <Players:removeLastPiece>,1
,) <Players:end>,1
,<ThrowSix:value> ) (,1
,} ) stop:,1
,) ) Sites,3
,on ) (,1
,STRING ) includeSelf:True,1
,includeSelf:True ) (,5
,} ) Forward,4
,distance:1 ) Orthogonal,3
,distance:2 ) Orthogonal,1
,includeSelf:True ) },1
,site ) Orthogonal,8
,next:False ) ),3
,) ) Entrenchments,1
,) ) Entrenchment,1
,) ) Checks,1
,) ) distance:1,1
,next:False ) (,1
,) ) Bridge,2
,To ) Mover,2
,) ) Fire,1
,) ) Infantry,1
,) ) Shoot,3
,normal ) (,1
,entrenchment ) (,1
,enemy ) (,1
,) ) Build,1
,STRING ) Cavalry,1
,infantry ) (,2
,STRING ) Artillery,1
,) ) Cannot,1
,) ) Regions,1
,Board ) False,2
,pass ) ),2
,mover ) components:,3
,Left ) steps:15,1
,steps:15 ) ),2
,Right ) steps:15,1
,steps:2 ) Orthogonal,2
,maxValue:10000 ) (,1
,maxState:100 ) (,1
,STRING ) rotation:2,1
,value:0 ) (,4
,STRING ) rotation:4,1
,STRING ) rotation:6,1
,STRING ) rotation:0,1
,Empty ) },1
,) ) Add,1
,) Sites,3
,) includeSelf:True,5
,) Entrenchments,1
,) Entrenchment,1
,) Checks,1
,) Bridge,2
,) Fire,1
,) Infantry,1
,) Shoot,3
,) Build,1
,) Cavalry,1
,) Artillery,1
,) Regions,1
,) components:,3
,) rotation:2,1
,) rotation:4,1
,) rotation:6,1
,) rotation:0,1
,) Add,1
,to ) False,4
,to:Next ) },5
,from ) False,4
,size:12 ) (,1
,value:9 ) (,2
,value:8 ) (,2
,size:3 ) },1
,) ) from:,5
,from ) #3,1
,INTEGER ) Mountain,1
,depth ) ),2
,#1 ) Forest/Shallow,1
,) ) Vehicle,1
,) ) Aircraft,1
,) ) Boat,1
,) ) Attacks,1
,) ) Counter,1
,components:#3 ) ),1
,#5 ) (,3
,) ) Attack,1
,STRING ) <FogOfWar:AttackCheck>,1
,) ) state,2
,) ) counter-attack,1
,From ) },1
,To ) by:Enemy,3
,From ) by:Mover,3
,From ) True,2
,) ) Attacker,1
,purposes ) #3,1
,boolean ) (,2
,INTEGER ) #1,11
,#1 ) Planes,1
,) ) Shooter,1
,humans ) (,1
,forests ) (,1
,water ) (,1
,land ) ),2
,#1 ) 75%,1
,#1 ) 125%,1
,#1 ) 100%,1
,4x4x4x5x100x4 ) ),1
,) ) Specific,1
,) ) Doctrine,1
,) ) Healing,1
,) ) Buying,1
,) ) Player,3
,against ) INTEGER,1
,movement ) (,2
,} ) value,2
,health ) (,2
,) ) Doctrines,1
,) ) Fog,1
,steps:2 ) STRING,1
,steps:1 ) STRING,1
,steps:3 ) STRING,2
,to:#1 ) ),4
,site ) True,1
,team ) (,2
,<Scenario:numPlayers> ) (,1
,<Scenario:boardShape> ) <Scenario:boardRegins>,1
,size:14 ) (,1
,Neutral ) <Scenario:playerMaps>,1
,<Scenario:startingMoney> ) (,1
,INTEGER ) count:30,1
,value:30 ) (,1
,INTEGER ) count:50,1
,value:40 ) (,4
,INTEGER ) count:60,3
,value:60 ) (,2
,INTEGER ) count:80,3
,INTEGER ) count:100,4
,value:80 ) (,1
,value:50 ) (,4
,value:100 ) (,137
,INTEGER ) count:120,2
,value:70 ) (,1
,value:120 ) <FogOfWar:EachMove>,1
,} ) state:8,106
,value:100 ) >,16
,STRING ) scale:0,36
,} ) state:3,2
,} ) state:4,2
,value:80 ) >,1
,) ) num:1,73
,num:1 ) ),76
,) ) num:2,8
,num:2 ) ),8
,) ) num:3,2
,num:3 ) ),2
,STRING ) num:5,2
,num:5 ) ),4
,) ) num:8,2
,num:8 ) ),2
,STRING ) state:8,44
,Left ) num:1,2
,Right ) num:1,2
,) ) num:4,4
,num:4 ) ),4
,) ) num:5,2
,STRING ) num:14,2
,num:14 ) ),2
,) ) num:20,2
,num:20 ) ),2
,) from:,5
,) Mountain,1
,) Forest/Shallow,1
,) Vehicle,1
,) Aircraft,1
,) Boat,1
,) Attacks,1
,) Counter,1
,) Attack,1
,) <FogOfWar:AttackCheck>,1
,) state,2
,) counter-attack,1
,) by:Enemy,3
,) by:Mover,3
,) Attacker,1
,) Planes,1
,) Shooter,1
,) 75%,1
,) 125%,1
,) 100%,1
,) Specific,1
,) Doctrine,1
,) Healing,1
,) Buying,1
,) Player,3
,) value,2
,) Doctrines,1
,) Fog,1
,) <Scenario:boardRegins>,1
,) <Scenario:playerMaps>,1
,) count:30,1
,) count:50,1
,) count:60,3
,) count:80,3
,) count:100,4
,) count:120,2
,) <FogOfWar:EachMove>,1
,) scale:0,36
,) num:1,77
,) num:2,8
,) num:3,2
,) num:5,4
,) num:8,2
,) num:4,4
,) num:14,2
,) num:20,2
,<Version:removeRule> ) (,1
,Rotation ) ),2
,use:Vertex ) <Version:rulesCommander>,1
,of:All ) ),1
,<Version:consequence> ) ),1
,) ) <Version:endRules>,1
,<Version:endRules> ) ),1
,rotation:0 ) (,22
,rotation:7 ) (,7
,rotation:4 ) (,17
,rotation:3 ) (,8
,rotation:4 ) >,1
,rotation:1 ) (,9
,rotation:2 ) (,1
,rotation:5 ) (,6
,rotation:6 ) (,1
,rotation:7 ) >,1
,rotation:0 ) >,1
,) <Version:rulesCommander>,1
,) <Version:endRules>,1
,<CheckmateRule:Move> ) (,1
,Piece ) >,1
,<Columns> ) ),1
,<Moves> ) },1
,size:21 ) (,1
,dominoes ) },1
,LineOfPlay ) ),1
,PipsMatch ) ),1
,Domino ) (,1
,Mover ) to:Next,1
,INTEGER ) upper,1
,) upper,1
,Mover ) <CapThreshold>,1
,<CapThreshold> ) (,1
,) <CapThreshold>,1
,includeSelf:True ) ),5
,<SType:selScoring> ) ),3
,) ) /-----------------------------------------,1
,<BoardShape:directionScored> ) (,2
,<BoardShape:directionUsed> ) (,2
,<BoardShape:gridType> ) (,6
,use:Cell ) ),14
,<BoardSize:smallSide> ) use:Cell,7
,<GType:selGame> ) (,2
,Win ) to,1
,tie ) (,1
,) /-----------------------------------------,1
,<BoardSize> ) ),2
,<Connection:type> ) (,1
,<BoardShape:directionsUsed> ) (,3
,to ) <BoardShape:directionsUsed>,5
,<BoardShape:directionsUsed> ) ),5
,) ) <BoardShape:directionsWin>,2
,) <BoardShape:directionsUsed>,5
,) <BoardShape:directionsWin>,2
,SW ) >,6
,SE ) >,6
,Bottom ) >,1
,Right ) >,1
,from ) stop:,3
,value ) stack:True,1
,STRING ) Neutral,1
,To ) steps:,5
,NNW ) (,2
,SSW ) (,2
,SSE ) (,3
,NNE ) },1
,SSW ) ),4
,NNE ) ),2
,) ) Next,2
,INTEGER ) next:,2
,) Neutral,1
,) Next,5
,counter ) ),6
,site ) at:StartOfMove,1
,at:StartOfMove ) (,3
,value ) at:StartOfMove,1
,Positional ) ),1
,<Scoring:calculation> ) (,1
,Passed ) },1
,STRING ) ***,6
,) at:StartOfMove,3
,) ***,6
,site ) includeSelf:True,1
,Mover ) in:,6
,to ) distance:<Placement:distance>,1
,distance:<Placement:distance> ) ),1
,by:Mover ) to:,1
,by:Next ) to:,1
,INTEGER ) strokeColour:,4
,degrees:180 ) ),2
,INTEGER ) edgeColour:,1
,) distance:<Placement:distance>,1
,) strokeColour:,4
,) edgeColour:,1
,<Scoring:updateOption> ) ),1
,) ) <TurnType:turnOption>,1
,<TurnType:turnOption> ) ),1
,) <TurnType:turnOption>,1
,<Board:start> ) (,6
,by:Neutral ) (,1
,at:0 ) (,22
,at:1 ) (,21
,at:2 ) (,11
,at:3 ) (,11
,at:4 ) (,12
,at:5 ) (,11
,at:6 ) (,11
,at:7 ) (,11
,at:8 ) (,11
,at:9 ) (,11
,at:10 ) (,11
,at:11 ) (,11
,at:12 ) (,10
,at:13 ) (,10
,at:14 ) (,10
,at:15 ) (,10
,at:16 ) (,10
,at:17 ) (,10
,at:18 ) (,10
,at:19 ) (,9
,at:20 ) },1
,at:20 ) (,8
,at:21 ) (,8
,at:22 ) (,8
,at:23 ) (,7
,at:24 ) (,6
,at:25 ) (,6
,at:26 ) (,6
,at:27 ) (,6
,at:28 ) (,6
,at:29 ) (,6
,at:30 ) (,6
,at:31 ) (,5
,at:34 ) (,5
,at:35 ) },2
,at:35 ) (,3
,at:36 ) (,3
,at:37 ) (,3
,at:38 ) (,3
,at:39 ) (,3
,at:40 ) (,3
,at:41 ) (,3
,at:42 ) (,2
,at:43 ) (,2
,at:44 ) },2
,<Version:start> ) (,2
,<Version:play> ) (,2
,by:Shared ) (,6
,To ) All,5
,<Play:start> ) (,1
,<Play:move> ) (,1
,to ) Shared,3
,To ) Shared,1
,to ) Mover,1
,to ) All,1
,to ) Next,1
,on:Edge ) ),6
,use:Edge ) },3
,<Version:result> ) ),2
,k:3 ) (,1
,Passed ) ),1
,at:23 ) },1
,at:24 ) },1
,at:19 ) },1
,k:4 ) (,1
,at:31 ) },1
,) ) <Boundary:cornerSetup>,1
,nextPhase ) ),2
,To ) P1,5
,To ) P2,5
,) <Boundary:cornerSetup>,1
,<Multi:capture> ) ),1
,All ) next:,1
,) ) role,1
,) ) <NumberPlayers:inGame>,1
,<NumberPlayers:inGame> ) ),3
,mover ) <NumberPlayers:inGame>,1
,) ) region,1
,) ) constants,1
,<ScoreOption:discVal> ) (,1
,INTEGER ) functional,1
,) ) -1,1
,} ) <NumberPlayers:inGame>,1
,component:#3 ) ),1
,#6 ) },1
,if:<PlaceDisc:location> ) ),1
,) ) for,2
,<Multi:influence> ) ),3
,site ) distance:<Equi:method>,1
,distance:<Equi:method> ) (,1
,Orthogonal ) },2
,site ) to:,3
,site ) <Multi:influence>,1
,<NumberPlayers:inGame> ) (,1
,<Board:size> ) use:Cell,1
,<ChosenHop:prioritySetting> ) (,1
,STRING ) ****,8
,STRING ) learner,1
,STRING ) advanced,1
,STRING ) Hops-a-Daisy,1
,STRING ) default,3
,STRING ) first,1
,STRING ) third,1
,STRING ) Equi,1
,STRING ) Eqiversi,1
,) role,1
,) <NumberPlayers:inGame>,3
,) region,1
,) constants,1
,) functional,1
,) for,2
,) distance:<Equi:method>,1
,) <Multi:influence>,1
,) ****,8
,) learner,1
,) advanced,1
,) Hops-a-Daisy,1
,) default,3
,) first,1
,) third,1
,) Equi,1
,) Eqiversi,1
,<BoardSize:smallSide> ) ),2
,) ) assumes,1
,by:Next ) Orthogonal,1
,) assumes,1
,Outer ) <Board:excludeFromEdge>,1
,<Board:excludeFromEdge> ) ),1
,N ) S,1
,S ) E,1
,E ) W,1
,W ) distance:1,1
,by:Mover ) },3
,<Board:type> ) use:Cell,2
,<Edge:controlType> ) (,1
,<Center:controlType> ) (,1
,) <Board:excludeFromEdge>,1
,lot ) the,1
,WSW ) ),1
,game ) (,1
,#2 ) index:0,1
,#2 ) index:1,1
,) ) Connectivity,1
,on:Cell ) (,1
,#1 ) Cell,2
,) ) Allow,1
,liberties ) State,1
,) ) from:#3,2
,at:#3 ) ),1
,) ) Suicidal,1
,#4 ) Cell,1
,site ) unique:True,2
,) ) Find,1
,value ) Next,2
,#2 ) to,1
,Forget ) (,1
,#5 ) Cell,1
,} ) to,1
,remember ) (,1
,between ) Orthogonal,1
,between ) level:,1
,Mover ) Cell,5
,on:Cell ) ),1
,) ) at:StartOfMove,1
,Next ) Cell,3
,) ) special,1
,) ) incase,1
,sides ) (,1
,maxState:6 ) (,1
,maxState:6 ) },1
,) ) use:Edge,4
,use:Edge ) ),2
,Cream ) ),1
,) the,1
,) Connectivity,1
,) Cell,12
,) Allow,1
,) from:#3,2
,) Suicidal,1
,) Find,1
,) special,1
,) incase,1
,) use:Edge,5
,#1 ) All,1
,) ) -------------------------------------------,1
,Neutral ) at:,1
,) -------------------------------------------,1
,) at:,4
,site ) Enemy,1
,site ) Empty,3
,from ) Empty,3
,to ) Empty,1
,Outer ) place,1
,piece ) (,1
,) ) but,2
,STRING ) nor,1
,) ) place,1
,STRING ) bug,3
,) place,2
,) nor,1
,) bug,3
,level:0 ) (,1
,sites ) Orthogonal,1
,sites ) (,3
,) ) Adjacent,1
,STRING ) These,1
,yielded ) (,1
,value ) unique:True,7
,) ) Key,1
,STRING ) unique:True,7
,#1 ) includeSelf:True,2
,) ) Processing,1
,) ) Continuation,1
,) ) Defining,1
,) ) Each,1
,) ) i,2
,) ) Structure,2
,} ) Defining,1
,) ) stack:False,3
,stack:False ) ),2
,<Board:startP2> ) (,1
,state:7 ) },2
,) ) Definitions,1
,) ) Perforated,1
,) ) <Variants:starting>,1
,) ) eg,1
,) ) ---------------------------------------------,1
,} ) -------------------------------------,1
,) Adjacent,1
,) These,1
,) Key,1
,) Processing,1
,) Continuation,1
,) Defining,2
,) Each,1
,) i,2
,) Structure,2
,) stack:False,3
,) Definitions,1
,) Perforated,1
,) <Variants:starting>,1
,) eg,1
,) ---------------------------------------------,1
,) -------------------------------------,1
,) ) is,1
,Loss ) prevent,1
,boards ) (,1
,} ) Notes:,1
,) is,1
,) prevent,1
,) Notes:,1
,count:55 ) ),1
,P2 ) {,1
,<Board> ) },1
,Cell ) ),1
,} ) use:Edge,1
,use:Vertex ) },4
,Cells ) INTEGER,1
,<Size> ) <Dual:end>,1
,<Dual:end> ) },1
,< ) >,1
,) <Dual:end>,1
,) ) <Version:start>,1
,by:Shared ) >,1
,by:Mover ) >,1
,) <Version:start>,1
,) ) closed:True,3
,closed:True ) (,3
,) closed:True,4
,closed:True ) ),1
,INTEGER ) closed:True,1
,#2 ) state:0,1
,state:5 ) ),1
,<Players:sumFingers> ) (,1
,) ) applyAfterAllMoves:True,1
,applyAfterAllMoves:True ) ),1
,Simultaneous ) (,2
,P2 ) <Players:initP3>,1
,) ) <Players:betP3>,1
,P2 ) <Players:showHandP3>,1
,INTEGER ) <Players:removeP3>,1
,INTEGER ) <Players:endP3>,1
,at:2 ) },2
,P3 ) >,2
,) applyAfterAllMoves:True,1
,) <Players:initP3>,1
,) <Players:betP3>,1
,) <Players:showHandP3>,1
,) <Players:removeP3>,1
,) <Players:endP3>,1
,INTEGER ) P1,1
,INTEGER ) P2,1
,<Num:row> ) (,1
,) ) index:,1
,Bottom ) index:,1
,) ) to:0,1
,STRING ) index:,1
,To ) to:P2,1
,INTEGER ) Init,1
,) index:,3
,) Init,1
,MoverLastTurn ) ),1
,<Size:board> ) ),1
,<Size:piles> ) (,1
,at:1 ) },1
,at:3 ) },1
,at:4 ) },1
,at:5 ) },1
,at:6 ) },1
,at:7 ) },1
,at:8 ) },1
,at:9 ) },1
,<Challenge> ) (,7
,Different ) },6
,Solved ) (,19
,<Challenge:size> ) (,7
,from ) includeSelf:True,1
,includeSelf:True ) of:1,1
,hint ) ),4
,) of:1,4
,<Challenge:size> ) ),1
,use:Vertex ) <Challenge:hints>,1
,<Challenge:start> ) (,1
,Vertex ) >,2
,) <Challenge:hints>,1
,HintRegions ) },3
,) ) <Challenge>,1
,) <Challenge>,1
,<Size> ) (,3
,Different ) ),5
,<Challenge:maxVal> ) ),1
,<Challenge:sum> ) },1
,Board ) of:1,1
,except:0 ) },1
,) ) Bottom,1
,} ) Bottom,1
,} ) Middle,1
,} ) Top,2
,) Bottom,2
,) Top,2
,Cell ) },1
,Edge ) INTEGER,1
,) ) of:1,2
,) ) NE,1
,included:True ) ),2
,) ) NW,1
,Unique ) (,1
,Vertex ) if:,1
,of:#1 ) ),3
,of:#2 ) ),4
,) ) if:#5,1
,if:#5 ) ),1
,of:#1 ) (,1
,row ) (,1
,column ) ),1
,) if:#5,1
,<Robots:num> ) (,1
,<SafeTeleportation:num> ) (,1
,Random ) ),1
,by:Shared ) ),1
,#1 ) at:,2
,Mover ) at:,1
,Next ) STRING,2
,Turns ) <challenge:limit>,2
,<challenge:limit> ) },2
,) <challenge:limit>,2
,from ) SameDirection,1
,<Board:start1> ) (,1
,<Board:start2> ) (,1
,Pieces ) INTEGER,1
,num:1 ) False,1
,<Version:boardSize> ) ),1
,) ) <Version:pieces>,2
,) <Version:pieces>,2
,<Variant:noPieceSite> ) ),1
,Threatened ) (,1
,at:60 ) (,1
,<OuterRing:extraBoardSize> ) (,1
,<OuterRing:extraBoardSize> ) ),1
,P1 ) <OuterRing:tilePlacementRegion>,1
,count:<Size:numTiles> ) },1
,) <OuterRing:tilePlacementRegion>,1
,coord:<Board:startTheseus> ) (,1
,coord:<Board:startMinotaur> ) (,1
,<Minotaur:threat> ) ),1
,Moves ) <Version:limit>,1
,<Version:limit> ) (,1
,) <Version:limit>,1
neutral,Places neutral dots,1
,neutral dots,1
*,) * (,374
,* (,447
,) * },133
,* },133
,( * INTEGER,59
,* INTEGER,59
,( * (,71
,( * STRING,109
,* STRING,109
,( * <Row:size>,3
,* <Row:size>,3
,( * {,13
,( * #1,5
,* {,13
,* #1,5
,players * (,2
,Promotion: * When,1
,. * When,3
,. * If,1
,Movement: * Rooks,1
,. * There,1
,. * Kings,1
,. * Knights,1
,. * Queens,1
,. * Pawns,1
,* When,4
,* If,1
,* Rooks,1
,* There,1
,* Kings,1
,* Knights,1
,* Queens,1
,* Pawns,1
,( * <Board>,2
,* <Board>,2
num:<Dice:num>,d:6 num:<Dice:num> ),3
,num:<Dice:num> ),4
,from:0 num:<Dice:num> ),1
optional,#3 optional 3rd,1
,optional 3rd,1
,- optional remember,2
,optional remember,2
+,( + (,320
,+ (,320
,( + INTEGER,68
,+ INTEGER,70
,( + {,14
,+ {,14
,( + #1,23
,+ #1,23
,( + <Row:size>,1
,+ <Row:size>,1
,( + <Board>,4
,+ <Board>,4
,directions + INTEGER,2
,( + <BoardSize:smallSide>,4
,+ <BoardSize:smallSide>,4
,( + STRING,1
,+ STRING,1
,( + <Size:boardHeight>,1
,( + <Size:boardWidth>,1
,+ <Size:boardHeight>,1
,+ <Size:boardWidth>,1
--COMMA--,again --COMMA-- because,3
,--COMMA-- because,4
,again --COMMA-- INTEGER,1
,--COMMA-- INTEGER,5
,P1 --COMMA-- P2,1
,--COMMA-- P2,1
,location --COMMA-- an,1
,--COMMA-- an,1
,direction --COMMA-- hopped,1
,--COMMA-- hopped,1
,left --COMMA-- diagonally,2
,left --COMMA-- straight,2
,ahead --COMMA-- diagonally,2
,right --COMMA-- or,2
,--COMMA-- diagonally,4
,--COMMA-- straight,2
,--COMMA-- or,5
,#1 --COMMA-- #2,1
,S --COMMA-- N,1
,N --COMMA-- NE,1
,NE --COMMA-- NW,1
,NW --COMMA-- SE,1
,SE --COMMA-- SW,1
,--COMMA-- #2,2
,--COMMA-- N,1
,--COMMA-- NE,1
,--COMMA-- NW,1
,--COMMA-- SE,1
,--COMMA-- SW,1
,INTEGER --COMMA-- Jay,8
,Coskey --COMMA-- except,8
,lud --COMMA-- as,8
,direction --COMMA-- then,1
,--COMMA-- Jay,8
,--COMMA-- except,8
,--COMMA-- as,12
,--COMMA-- then,5
,promote --COMMA-- it,1
,--COMMA-- it,2
,omnicheck --COMMA-- they,2
,castling --COMMA-- because,1
,--COMMA-- they,3
,red --COMMA-- yellow,1
,yellow --COMMA-- and,1
,captured --COMMA-- they,1
,side --COMMA-- it,1
,promotion --COMMA-- and,1
,capture --COMMA-- then,1
,pieces --COMMA-- as,1
,side --COMMA-- then,1
,Then --COMMA-- on,1
,turn --COMMA-- the,1
,space---West --COMMA-- East,1
,East --COMMA-- or,1
,. --COMMA-- along,1
,edge --COMMA-- to,1
,above --COMMA-- Pawns,1
,side --COMMA-- but,1
,Queen --COMMA-- Rook,1
,Rook --COMMA-- or,1
,available --COMMA-- then,1
,promotion --COMMA-- on,1
,Currently --COMMA-- on,1
,place --COMMA-- the,1
,captured --COMMA-- or,1
,checkmate --COMMA-- the,1
,wins --COMMA-- the,1
,loses --COMMA-- and,1
,stalemate --COMMA-- all,1
,move --COMMA-- This,1
,game --COMMA-- the,1
,variant --COMMA-- some,1
,King --COMMA-- then,1
,overview --COMMA-- see,1
,details --COMMA-- see,1
,Variants --COMMA-- by,1
,edition --COMMA-- completed,1
,Beasley --COMMA-- INTEGER,1
,Coskey --COMMA-- with,1
,lud --COMMA-- by,1
,--COMMA-- yellow,1
,--COMMA-- and,4
,--COMMA-- on,3
,--COMMA-- the,5
,--COMMA-- East,1
,--COMMA-- along,1
,--COMMA-- to,2
,--COMMA-- Pawns,1
,--COMMA-- but,2
,--COMMA-- Rook,1
,--COMMA-- all,1
,--COMMA-- This,1
,--COMMA-- some,1
,--COMMA-- see,2
,--COMMA-- by,2
,--COMMA-- completed,1
,--COMMA-- with,1
,entrenchment --COMMA-- checked,1
,site --COMMA-- #2,1
,--COMMA-- checked,1
,move --COMMA-- INTEGER,2
,INTEGER --COMMA-- means,2
,--COMMA-- means,2
,from --COMMA-- who's,3
,sites --COMMA-- piece,1
,hopped --COMMA-- piece,1
,INTEGER --COMMA-- New,1
,--COMMA-- who's,3
,--COMMA-- piece,2
,--COMMA-- New,1
,from --COMMA-- to,1
,cosmetic --COMMA-- but,1
,OK --COMMA-- State,1
,INTEGER --COMMA-- State,1
,to --COMMA-- and,1
,game --COMMA-- so,1
,--COMMA-- State,2
,--COMMA-- so,1
,INTEGER --COMMA-- INTEGER,1
,changes --COMMA-- as,2
,captures --COMMA-- including,1
,removal --COMMA-- as,1
,selection --COMMA-- plus,1
,moves --COMMA-- passing,1
,--COMMA-- including,1
,--COMMA-- plus,1
,--COMMA-- passing,1
-,( - (,361
,- (,364
,( - INTEGER,12
,- INTEGER,12
,( - #1,26
,- #1,26
,) - region,2
,#1 - region,4
,#2 - state,3
,#1 - extra,1
,#1 - from,2
,#2 - to,2
,#3 - capture,1
,#4 - (,1
,#5 - (,1
,#1 - Name,2
,#2 - Side,1
,#3 - Target,1
,#4 - Transit,1
,#5 - Capture,1
,#1 - state,2
,#1 - player,2
,- region,6
,- state,5
,- extra,1
,- from,2
,- to,2
,- capture,1
,- Name,2
,- Side,1
,- Target,1
,- Transit,1
,- Capture,1
,- player,2
,moves - conditional,1
,- conditional,1
,( - STRING,14
,- STRING,16
,#2 - sides,1
,- sides,1
,( - #2,1
,- #2,1
,( - <Board:size>,2
,- <Board:size>,2
,#1 - site,2
,#1 - STRING,2
,#2 - index,2
,- site,2
,- index,2
,( - <Tag:pieceNumber>,2
,- <Tag:pieceNumber>,2
,( - <Board>,6
,- <Board>,6
,lud - CaptureToPieceAndResetCounter,7
,lud - NextCanNotMove,8
,lud - PieceHasNeverMoved,3
,lud - PieceHasMoved,3
,lud - RememberPieceHasMoved,3
,lud - KingNotCheckedAndToEmpty,3
,lud - DoCastle,3
,lud - DoubleStep,5
,passant - Save,6
,Pending - Save,6
,- CaptureToPieceAndResetCounter,7
,- NextCanNotMove,8
,- PieceHasNeverMoved,3
,- PieceHasMoved,3
,- RememberPieceHasMoved,3
,- KingNotCheckedAndToEmpty,3
,- DoCastle,3
,- DoubleStep,5
,- Save,12
,lud - CaptureForwardDiagonal,3
,- CaptureForwardDiagonal,3
,#1 - P1,2
,#1 - (,1
,#2 - direction,1
,#3 - number,1
,#4 - condition,1
,#5 - then,1
,#1 - direction,3
,#2 - optional,2
,#1 - Directions,3
,#2 - between,1
,- P1,2
,- direction,4
,- number,1
,- condition,1
,- then,2
,- optional,2
,- Directions,3
,- between,1
,. - They,1
,- They,1
,#1 - Large,1
,#2 - Paths,1
,#3 - Small,1
,#1 - then,1
,#1 - P1/P2,1
,- Large,1
,- Paths,1
,- Small,1
,- P1/P2,1
,( - <BoardSize:smallSide>,15
,- <BoardSize:smallSide>,15
,shift - .,1
,INTEGER - .,1
,- .,2
,( - <NumberPlayers:inGame>,1
,( - #5,1
,choice - default,1
,- <NumberPlayers:inGame>,1
,- #5,1
,- default,1
,Observations: - full,1
,INTEGER - liberties,1
,yet - eg,1
,- full,1
,- liberties,1
,- eg,1
,move - shows,1
,turn - Flow,1
,end - Script,1
,good - <,1
,- shows,1
,- Flow,1
,- Script,1
,- <,1
,( - <Size:pile>,1
,- <Size:pile>,1
.,INTEGER . INTEGER,401
,-0 . INTEGER,37
,. INTEGER,2191
,INTEGER . .,1644
,. . INTEGER,1645
,. .,1729
,source . },2
,. },5
,another . (,1
,. (,106
,-1 . INTEGER,23
,-2 . INTEGER,7
,sites . (,1
,-3 . INTEGER,8
,there . (,3
,pawns . (,2
,double . (,4
,player . (,5
,awaiting . (,1
,double . ),1
,. ),25
,-5 . INTEGER,13
,-4 . INTEGER,9
,it . (,1
,to . (,1
,move . (,4
,pushing . (,1
,piece . (,3
,mine . (,1
,mine . ),1
,P1 . (,1
,P2 . (,1
,pair . (,1
,removed . #1,1
,site . The,1
,removed . @example,1
,. #1,2
,. The,5
,. @example,1
,first . (,1
,) . (,3
,cell . ),2
,3-stack/catapult . (,1
,cell . (,2
,<0 . .,5
,. . 7>,2
,<48 . .,2
,. . 55>,1
,<56 . .,1
,. . 63>,2
,. . 15>,1
,. . 10>,2
,<50 . .,1
,. . 60>,1
,. 7>,2
,. 55>,1
,. 63>,2
,. 15>,1
,. 10>,2
,. 60>,1
,-8 . INTEGER,2
,-10 . INTEGER,2
,-11 . INTEGER,1
,building . (,1
,<7 . .,1
,<17 . .,1
,. . 20>,1
,<8 . .,1
,. . 11>,1
,<20 . .,1
,. . 23>,1
,<9 . .,1
,. . 12>,1
,<23 . .,1
,. . 26>,1
,<10 . .,1
,. . 13>,1
,<26 . .,2
,. . 29>,2
,. 20>,1
,. 11>,1
,. 23>,1
,. 12>,1
,. 26>,1
,. 13>,1
,. 29>,2
,value . (,3
,<24 . .,1
,. . 31>,1
,<32 . .,1
,. . 39>,2
,<27 . .,1
,. . 35>,1
,<36 . .,1
,. . 44>,1
,<30 . .,2
,<40 . .,1
,. . 49>,1
,<33 . .,1
,. . 43>,1
,<44 . .,1
,. . 54>,1
,. 31>,1
,. 39>,2
,. 35>,1
,. 44>,1
,. 49>,1
,. 43>,1
,. 54>,1
,state . (,1
,<18 . .,1
,. . 21>,1
,<22 . .,1
,. . 25>,1
,. . 33>,1
,<34 . .,1
,. . 37>,1
,<38 . .,1
,. . 41>,1
,. 21>,1
,. 25>,1
,. 33>,1
,. 37>,1
,. 41>,1
,capture . (,1
,seed . STRING,1
,. STRING,32
,far . <Capture:ruleSecondCapture>,1
,far . },1
,. <Capture:ruleSecondCapture>,1
,<0 . 8>,1
,. 8>,1
,play . (,1
,Oware . ),1
,placed . (,1
,shift . INTEGER,1
,slide . ),1
,board . (,2
,skew . INTEGER,2
,option . {,1
,. {,1
,implementation . That's,1
,mover . (,1
,. That's,1
,attacker . (,3
,pieces . (,5
,moves . (,4
,phase . (,3
,rules . (,2
,Wazir . (,2
,Knight_rotated . (,2
,Elephant . (,2
,Queen . (,2
,King_noCross . (,2
,Amazon . (,2
,Giraffe . (,2
,Bishop_noCross . (,2
,Knight . (,2
,Rook . (,2
,Baidaq . (,1
,M . Coskey,8
,Chess . lud,47
,STRING . .,39
,. . .,14
,. . ),13
,) . Brusky,1
,diretion . But,1
,direction . (,1
,directions . Note:,2
,Var . Note:,6
,) . Usage:,7
,e . p,1
,p . from,1
,. Coskey,8
,. lud,47
,. Brusky,1
,. But,2
,. Note:,8
,. Usage:,7
,. p,1
,. from,1
,capture . It,1
,<fwd_dir> . Source:,1
,. It,3
,. Source:,4
,. . STRING,26
,) . Source:,3
,thing . The,1
,different . Furthermore,1
,have . However,1
,this . We,1
,check . Then,1
,INTEGER . It,1
,omnicheck . INTEGER,1
,INTEGER . If,2
,turn . INTEGER,1
,lost . #1,1
,. Furthermore,1
,. However,1
,. We,1
,. Then,2
,. If,3
,Wellisch . STRING,1
,vertically . The,1
,spaces . The,1
,black . Capture,1
,promotion . When,1
,promotion . *,1
,chooses . *,1
,captured . Then,1
,promoted . Piece,1
,Chess . -,1
,direction . *,1
,Chess . *,1
,those . They,1
,player . Castling,1
,before . *,1
,i . e,4
,e . --COMMA--,1
,) . Note,1
,from . *,1
,space . *,1
,forward . Pawns,1
,space . There,1
,capture . As,1
,captured . If,1
,turn . (,2
,place . ),1
,move . *,1
,draws . *,1
,draw . (,1
,stalemate . ),1
,movement . ),1
,move . STRING,1
,/>Wikipedia</a> . For,1
,D . B,1
,B . Pritchard,1
,) . STRING,1
,INTEGER . STRING,1
,. Capture,1
,. When,1
,. *,9
,. Piece,1
,. -,1
,. They,1
,. Castling,1
,. e,4
,. --COMMA--,1
,. Note,1
,. Pawns,1
,. There,1
,. As,1
,. For,1
,. B,1
,. Pritchard,1
,steps . Hop,5
,INTEGER . Hop,6
,. Hop,11
,here . (,1
,IntFunction . },1
,pieces . ),1
,site . (,1
,spirale . (,1
,make . (,1
,scale:0 . INTEGER,36
,order . if:,1
,. if:,1
,- . INTEGER,2
,eg . STRING,1
,INTEGER . 6>,2
,. 6>,2
,AI . But,1
,much . Observations:,1
,twice . maybe,1
,down . Sometimes,1
,displayed . Direction,1
,considerably . Liberties,1
,markers . ),1
,. Observations:,1
,. maybe,1
,. Sometimes,1
,. Direction,1
,. Liberties,1
,<5 . 5>,1
,<10 . 3>,1
,. 5>,1
,. 3>,1
,location . I,1
,hop . Care,1
,executed . (,2
,move . It,1
,process . Care,1
,define . ),1
,placement . The,1
,movement . (,1
,e . =,2
,cells . because,1
,fixed . .,1
,. . (,1
,test . },1
,<0 . 03>,3
,<0 . 07>,1
,. I,1
,. Care,2
,. =,2
,. because,1
,. 03>,3
,. 07>,1
,e . unique,1
,only . (,1
,. unique,1
,try . (,1
,square . (,5
/,( / (,85
,/ (,85
,( / STRING,2
,/ STRING,2
,( / <Board>,2
,/ <Board>,2
distance:<Placement:distance>,) distance:<Placement:distance> ),1
,distance:<Placement:distance> ),1
Game,Game modelled,1
Related,is Related Adjacent,1
,Related Adjacent,1
,is Related Diagonal,1
,Related Diagonal,1
,is Related Orthogonal,3
,Related Orthogonal,3
size,( size Stack,143
,size Stack,143
,( size Array,32
,size Array,32
,( size Group,15
,size Group,15
,( size Territory,16
,size Territory,16
,the size of,1
,size of,1
triple,for triple and,1
,triple and,1
left,stone left --COMMA--,2
,diagonally left --COMMA--,2
,left --COMMA--,4
,four left inner,2
,left inner,2
,slightly left or,1
,left or,1
,Bottom left 9x9,1
,Top left 9x9,1
,left 9x9,2
<suicide>,<capture> <suicide> <influence>,1
,<suicide> <influence>,1
<Square>,STRING <Square> STRING,2
,<Square> STRING,2
Classified,The Classified Encyclopedia,1
,Classified Encyclopedia,1
<challenge>,STRING <challenge> args:,2
,<challenge> args:,2
;,source ; however,1
,; however,1
,pieces ; (,1
,; (,1
,> ; <,1
,> ; ---------------------------------------------,1
,; <,1
,; ---------------------------------------------,1
<,STRING < (,477
,> < (,402
,< (,1366
,> < {,111
,< {,271
,( < (,184
,> < STRING,1
,< STRING,19
,( < INTEGER,294
,< INTEGER,326
,> < phases:,4
,< phases:,10
,<2> < (,47
,<3> < (,29
,<> < (,26
,<4> < (,36
,<5> < {,8
,<11> < {,3
,<17> < {,3
,<23> < {,2
,<20> < {,3
,<25> < {,3
,<30> < {,3
,<35> < {,2
,<40> < {,2
,<45> < {,2
,<50> < {,2
,<55> < {,2
,<60> < {,2
,<65> < {,2
,<70> < {,2
,<75> < {,2
,<80> < {,2
,<85> < {,2
,<90> < {,2
,<95> < {,2
,<100> < {,2
,( < Undefined,1
,<2> < {,7
,<4> < {,8
,<6> < {,6
,< Undefined,1
,( < STRING,2
,<5> < (,12
,<6> < (,17
,<3> < {,9
,<7> < {,5
,<8> < {,5
,<7> < (,8
,<8> < (,14
,<16> < (,7
,<10> < (,12
,<9> < (,4
,<11> < (,2
,<12> < (,8
,<13> < (,2
,<14> < (,6
,<15> < (,2
,STRING < >,3
,< >,22
,> < >,17
,STRING < {,38
,<18> < (,1
,<20> < (,12
,STRING < skipIf:,1
,< skipIf:,1
,STRING < phases:,6
,8> < (,2
,7> < (,2
,<Hexagon> < (,3
,<Limping> < (,3
,Orthogonal> < (,2
,STRING < Capture,4
,< Capture,4
,3> < (,1
,5> < (,2
,9> < (,1
,RookRight2Start < {,2
,Bishop2Start < {,2
,Knight2Start < {,2
,STRING < ifAfterwards:True,1
,STRING < ifAfterwards:,1
,< ifAfterwards:True,1
,< ifAfterwards:,1
,<25> < (,15
,<30> < (,6
,<40> < (,1
,<50> < (,1
,<60> < (,1
,<70> < (,1
,<80> < (,1
,<90> < (,1
,<100> < (,1
,<10> < {,2
,<12> < {,1
,<13> < {,2
,<14> < {,1
,<15> < {,2
,<16> < {,1
,<18> < {,1
,<19> < {,2
,<21> < {,1
,<22> < {,1
,<24> < {,1
,<26> < {,1
,<27> < {,1
,<28> < {,1
,<29> < {,1
,loops:3> < (,1
,from:1> < (,1
,STRING < STRING,16
,> < INTEGER,32
,<4> < >,2
,Diamond> < (,6
,<square> < (,1
,variants: < {,1
,; < {,1
,- < {,1
,> < ),1
,< ),1
,<9> < {,1
,4> < (,1
,6> < (,1
,12> < (,1
,10> < (,1
,46> < (,1
=,! = INTEGER,212
,( = INTEGER,939
,= INTEGER,1162
,( = (,1462
,= (,1841
,! = (,379
,( = STRING,44
,= STRING,63
,( = #1,197
,= #1,203
,( = Off,42
,= Off,56
,( = End,24
,= End,24
,! = #1,6
,! = STRING,19
,! = Off,14
,( = #2,2
,= #2,2
,#1 = To,1
,#2 = Direction,1
,Direction = Forward,2
,#3 = Then,1
,#1 = Direction,1
,= To,1
,= Direction,2
,= Forward,2
,= Then,1
,pips = INTEGER,1
,! = Infinity,9
,= Infinity,10
,( = Undefined,5
,= Undefined,10
,moves = draw,1
,= draw,1
,! = Undefined,5
,) = INTEGER,2
,STRING = Move,1
,= Move,1
,state = INTEGER,4
,#1 = fire,1
,#2 = mover,1
,= fire,1
,= mover,1
,INTEGER = Human,1
,INTEGER = Direct,1
,INTEGER = Indirect,1
,INTEGER = Aircraft,1
,INTEGER = Boat,1
,INTEGER = Building,1
,INTEGER = Cost,1
,INTEGER = Damage,1
,INTEGER = First,1
,INTEGER = Counter,1
,INTEGER = Random,2
,= Human,1
,= Direct,1
,= Indirect,1
,= Aircraft,1
,= Boat,1
,= Building,1
,= Cost,1
,= Damage,1
,= First,1
,= Counter,1
,= Random,2
,( = -1,3
,INTEGER = liberties,1
,liberties = INTEGER,1
,Liberties = INTEGER,1
,! = -1,1
,= -1,4
,= liberties,1
,( = Infinity,1
,. = INTEGER,2
,( = <challenge:limit>,2
,= <challenge:limit>,2
contiguous:False,Orthogonal contiguous:False ),1
,contiguous:False ),1
<45>,STRING <45> <,2
,<45> <,2
,STRING <45> STRING,3
,<45> STRING,3
>,) > STRING,680
,) > <,443
,> STRING,1364
,> <,568
,STRING > STRING,465
,} > STRING,213
,) > <1>,4
,) > <2>,2
,> <1>,5
,> <2>,2
,( > (,364
,> (,364
,<size > },1
,> },1
,) > <>,34
,> <>,37
,( > INTEGER,64
,> INTEGER,65
,} > <,43
,STRING > <,32
,} > <>,3
,STRING > <7,2
,STRING > <8,1
,STRING > <9,1
,STRING > <10,1
,< > STRING,5
,> <7,3
,> <8,2
,> <9,2
,> <10,2
,STRING > <24,1
,STRING > <27,1
,STRING > <30,2
,STRING > <33,1
,> <24,1
,> <27,1
,> <30,2
,> <33,1
,STRING > <18,1
,STRING > <22,1
,STRING > <26,1
,STRING > <34,1
,STRING > <38,1
,> <18,1
,> <22,1
,> <26,1
,> <34,1
,> <38,1
,STRING > <12>,1
,STRING > <14>,1
,> <12>,1
,> <14>,2
,) > <4>,2
,} > <3>,2
,> <4>,2
,> <3>,8
,) > <phases:,1
,> <phases:,1
,STRING > <numSides:6>,2
,STRING > <numSides:4>,2
,STRING > <numSides:3>,2
,> <numSides:6>,2
,> <numSides:4>,2
,> <numSides:3>,2
,) > <5>,4
,) > <6>,1
,) > <7>,1
,> <5>,5
,> <6>,1
,> <7>,1
,) > <Step,1
,) > <Slide>,1
,> <Step,1
,> <Slide>,1
,} > Pawn1Start,2
,STRING > King2Start,2
,STRING > Queen2Start,2
,STRING > RookLeft2Start,2
,STRING > RookRight2Start,2
,} > Bishop2Start,2
,} > Knight2Start,2
,} > Pawn2Start,2
,> Pawn1Start,2
,> King2Start,2
,> Queen2Start,2
,> RookLeft2Start,2
,> RookRight2Start,2
,> Bishop2Start,2
,> Knight2Start,2
,> Pawn2Start,2
,ifAfterwards:True > STRING,1
,( > #1,1
,> #1,1
,INTEGER > <,32
,< > <,17
,STRING > <Orthogonal>,24
,STRING > <Adjacent>,2
,STRING > <All>,14
,> <Orthogonal>,24
,> <Adjacent>,2
,> <All>,14
,liberties > INTEGER,1
,} > <5,1
,} > <10,1
,} > <14>,1
,} > <19>,1
,} > <23>,1
,> <5,2
,> <19>,1
,> <23>,1
,} > ;,2
,} > and,1
,} > <0,4
,> ;,2
,> and,1
,> <0,4
,dual > <,1
,) > <3>,6
,) > <11>,1
,> <11>,1
,INTEGER > <149>,1
,> <149>,1
,INTEGER > <5>,1
,STRING > <3,1
,STRING > <13,1
,STRING > <21,1
,> <3,2
,> <13,1
,> <21,1
,STRING > <34>,1
,STRING > <1>,1
,STRING > <16>,1
,> <34>,1
,> <16>,1
,) > <2,1
,) > <3,1
,) > <4,1
,) > <5,1
,) > <6,1
,) > <7,1
,) > <8,1
,) > <9,1
,> <2,1
,> <4,1
,> <6,1
much,too much .,1
,much .,1
Problems:,Problems: even,1
?,P1 ? Not,2
,? Not,2
,Hops-a-Daisy ? (,1
,? (,2
,elements ? (,1
<Disc>,Each <Disc> ),1
,STRING <Disc> args:,1
,<Disc> ),1
,<Disc> args:,1
@,) @ Start,1
,@ Start,1
A,) A rat,1
,A rat,1
,as: A player,1
,A player,2
,STRING A 3-player,1
,Note: A player,1
,A 3-player,1
B,. B .,1
,B .,1
<47>,STRING <47> STRING,1
,<47> STRING,1
role,current role },2
,role },2
,) role function,1
,role function,1
100%,) 100% damage,1
,100% damage,1
<TurnType>,STRING <TurnType> args:,1
,<TurnType> args:,1
D,by D .,1
,D .,1
E,P2 E STRING,1
,E STRING,2
,S E W,10
,E W,74
,P1 E (,1
,E (,7
,INTEGER E through:,5
,E through:,5
,) E ),41
,E ),108
,steps:8 E ),1
,Side E ),9
,W E },5
,E },9
,from:19 E included:True,1
,from:0 E included:True,1
,E included:True,2
,player E ),12
,steps:3 E ),3
,steps:2 E ),15
,steps:1 E ),3
,N E },2
,STRING E ),5
,INTEGER E exact:True,1
,E exact:True,1
,STRING E W,7
,W E ),3
,N E ),2
,S E ),2
,steps:5 E ),2
,steps:6 E ),2
,steps:7 E ),2
,steps:4 E ),1
,P3 E (,1
,P4 E (,1
,STRING E INTEGER,61
,E INTEGER,61
,NNW E },2
,{ E S,1
,STRING E (,4
,E S,1
,( E or,1
,E or,1
,Adjacent E ),4
,{ E W,57
,#2 E ),1
,P1 E STRING,1
ahead,( ahead (,277
,ahead (,277
,straight ahead --COMMA--,2
,ahead --COMMA--,2
,( ahead #2,2
,( ahead #1,4
,ahead #2,2
,ahead #1,4
,( ahead Cell,10
,ahead Cell,10
F,{ F R,6
,R F R,6
,R F },11
,F R,15
,F },41
,{ F },6
,{ F F,11
,F F R,3
,F F L,3
,L F },9
,R F F,3
,F F },15
,{ F L,3
,L F F,7
,F F,34
,F L,8
,F F F,13
,L F L,2
FLL,FL FLL Backward,1
,FLL Backward,1
forAll,( forAll Hint,4
,forAll Hint,4
,( forAll Cell,2
,( forAll Vertex,1
,forAll Cell,2
,forAll Vertex,1
roll,( roll ),183
,roll ),183
,( roll #6,1
,roll #6,1
,( roll (,1
,roll (,1
yellow,--COMMA-- yellow --COMMA--,1
,yellow --COMMA--,1
I,. I start,1
,I start,1
slowing,also slowing the,1
,slowing the,1
turn,first turn (,4
,a turn (,2
,turn (,6
,next turn .,3
,turn .,3
,next turn --COMMA--,1
,a turn where,1
,turn --COMMA--,1
,turn where,1
,each turn phase,1
,turn phase,1
,passed turn at,1
,Each turn -,1
,turn at,1
,turn -,1
<Version:result>,end <Version:result> ),2
,<Version:result> ),2
,{ <Version:result> },1
,<Version:result> },1
L,F L F,8
,L F,18
,{ L F,7
,{ L L,3
,L L F,3
,L L L,1
,L L,4
M,Jay M .,8
,M .,8
N,P2 N (,10
,N (,18
,P1 N (,3
,P2 N STRING,1
,N STRING,4
,) N ),23
,N ),199
,P2 N <Moves:dog>,1
,N <Moves:dog>,1
,{ N S,54
,N S,61
,INTEGER N through:,2
,N through:,2
,steps:6 N ),1
,steps:5 N ),2
,steps:16 N ),2
,steps:3 N ),2
,player N ),118
,from:55 N included:True,1
,from:56 N included:True,1
,N included:True,2
,P1 N STRING,3
,Side N ),11
,{ N E,2
,N E,4
,--COMMA-- N --COMMA--,1
,S N ),4
,STRING N SW,1
,N --COMMA--,1
,N SW,1
,steps:4 N ),1
,steps:8 N ),1
,steps:10 N ),1
,steps:15 N ),1
,STRING N ),1
,INTEGER N exact:True,1
,N exact:True,1
,STRING N S,7
,STRING N E,2
,STRING N W,2
,N W,3
,P1 N ),23
,P4 N (,1
,{ N },1
,N },1
,S N WSW,1
,{ N ENE,1
,N WSW,1
,N ENE,1
,STRING N INTEGER,6
,N INTEGER,6
,{ N W,1
,STRING N (,4
,steps:2 N ),1
,Adjacent N ),4
,Forward N ),1
,) N stop:,5
,N stop:,5
,Diagonal N ),1
,#2 N ),1
result,( result P1,230
,result P1,230
,( result P2,186
,result P2,186
,( result Mover,699
,result Mover,699
,( result TeamMover,20
,result TeamMover,20
,( result Player,49
,result Player,49
,( result P3,12
,( result P4,10
,result P3,12
,result P4,10
,( result #1,3
,( result #2,1
,result #1,3
,result #2,1
,( result Next,39
,result Next,39
,( result Team1,4
,( result Team2,4
,result Team1,4
,result Team2,4
,( result <Players:player2>,1
,( result <Players:player1>,1
,result <Players:player2>,1
,result <Players:player1>,1
,( result Draw,1
,result Draw,1
,not result in,1
,result in,1
,( result P5,6
,( result P6,6
,( result P7,5
,( result P8,5
,( result P9,4
,( result P10,4
,( result P11,3
,( result P12,3
,( result P13,2
,( result P14,2
,( result P15,1
,( result P16,1
,result P5,6
,result P6,6
,result P7,5
,result P8,5
,result P9,4
,result P10,4
,result P11,3
,result P12,3
,result P13,2
,result P14,2
,result P15,1
,result P16,1
,( result <Result>,2
,result <Result>,2
,( result All,2
,result All,2
<piece_types>,STRING <piece_types> ),7
,<piece_types> ),7
characters,two characters to,1
,characters to,1
bugs,grid bugs are,1
,bugs are,1
R,F R F,15
,R F,20
,{ R F,3
,{ R R,2
,R R F,2
,R R,2
corners,on corners (,2
,corners (,2
S,) S included:True,1
,S included:True,3
,P1 S (,1
,N S E,10
,S (,8
,S E,12
,) S ),20
,S ),194
,INTEGER S through:,2
,S through:,2
,steps:16 S ),2
,steps:6 S ),1
,steps:5 S ),1
,steps:3 S ),2
,player S ),118
,N S },44
,S },46
,from:94 S included:True,1
,from:93 S included:True,1
,P2 S STRING,3
,S STRING,3
,Side S ),11
,( S --COMMA--,1
,STRING S N,3
,STRING S NW,1
,S --COMMA--,1
,S N,5
,S NW,1
,) S (,1
,STRING S ),4
,INTEGER S exact:True,1
,S exact:True,1
,N S ),5
,STRING S E,2
,STRING S W,2
,S W,4
,P2 S ),23
,P2 S (,3
,P3 S (,1
,{ S },1
,N S ENE,1
,WSW S N,1
,{ S WSW,1
,S ENE,1
,S WSW,1
,) S N,1
,STRING S INTEGER,6
,S INTEGER,6
,{ S W,1
,E S },1
,STRING S (,2
,steps:2 S ),1
,Adjacent S ),4
,Forward S ),1
,N S W,1
,#2 S ),1
same,the same player,1
,the same colour,3
,same player,1
,same colour,3
W,E W },67
,W },71
,INTEGER W through:,5
,W through:,5
,) W ),39
,W ),110
,player W ),12
,Side W ),9
,{ W E,5
,W E,8
,from:34 W included:True,1
,from:50 W included:True,1
,W included:True,2
,steps:3 W ),3
,steps:2 W ),15
,steps:1 W ),3
,STRING W ),5
,INTEGER W exact:True,1
,W exact:True,1
,E W ),7
,STRING W E,2
,S W ),2
,N W ),2
,steps:5 W ),2
,steps:6 W ),2
,steps:7 W ),2
,steps:4 W ),1
,P1 W (,1
,P2 W (,1
,W (,7
,STRING W INTEGER,61
,W INTEGER,61
,SSE W },2
,N W },1
,S W },1
,STRING W (,5
,or W ),1
,Adjacent W ),4
,S W E,1
,#2 W ),1
,P1 W STRING,1
,W STRING,1
index:4,) index:4 ),6
,index:4 ),6
index:5,) index:5 ),6
,index:5 ),6
index:6,) index:6 ),4
,index:6 ),4
@example,. @example (,1
,@example (,1
after,swapping after everyone's,4
,after everyone's,4
,even after complicated,1
,seconds after the,1
,states after move,1
,after complicated,1
,after the,1
,after move,1
,yields after any,1
,after any,1
index:0,) index:0 ),14
,index:0 ),14
<46>,STRING <46> STRING,1
,<46> STRING,1
listing,the listing as,1
,listing as,1
index:1,) index:1 ),7
,index:1 ),7
flip,( flip (,5
,flip (,5
index:2,) index:2 ),6
,index:2 ),6
^,( ^ <Board:size>,1
,^ <Board:size>,1
hand,( hand P1,24
,hand P1,24
,( hand P2,3
,hand P2,3
,( hand Each,361
,hand Each,361
,the hand and,3
,hand and,3
,( hand Shared,13
,hand Shared,13
,the hand of,2
,hand of,2
,( hand P3,2
,hand P3,2
,the hand to,1
,hand to,1
index:3,) index:3 ),6
,index:3 ),6
<NumOfPlayers:BoardShape>,board <NumOfPlayers:BoardShape> ),2
,<NumOfPlayers:BoardShape> ),2
a,needs a condition,2
,a condition,2
,from a site,1
,a site,2
,Move a piece,2
,Enter a captured,1
,Enter a new,1
,a piece,21
,a captured,1
,a new,1
,that's a counter,1
,that's a twin,1
,capture a twin,1
,a counter,3
,a twin,2
,If a piece,1
,With a lower,2
,a lower,2
,Defines a hop,2
,a hop,2
,Move a tower,1
,contain a mover/own,1
,Sacrifice a tower,2
,from a 3-stack/catapult,1
,Throw a stone,2
,a tower,3
,a mover/own,1
,a 3-stack/catapult,1
,a stone,2
,to a player,1
,a player,3
,if a capture,1
,a capture,2
,not a slide,1
,a slide,1
,had a turn,2
,had a move,2
,a turn,3
,a move,3
,add a piece,1
,reach a terminal,1
,a terminal,1
,Block a piece,4
,Rescue a piece,3
,Release a piece,3
,Capture a piece,1
,move a Baidaq,2
,to a site,1
,a Baidaq,2
,Forward a pawn,1
,a pawn,2
,If a pawn,1
,Here's a curious,1
,with a suitable,1
,If a player,2
,of a castling,1
,a curious,1
,a suitable,1
,a castling,1
,on a board,1
,on a hexagonal,1
,When a Pawn,2
,when a Pawn,1
,until a piece,2
,that a Knight,1
,to a space,1
,to a Rook,1
,or a Knight,1
,to a piece,1
,If a Pawn,1
,on a turn,1
,when a King,1
,is a stalemate,1
,without a capture,1
,in a stalemate,1
,with a rule,1
,exposes a threat,1
,had a chance,1
,a board,1
,a hexagonal,1
,a Pawn,4
,a Knight,2
,a space,1
,a Rook,1
,a King,1
,a stalemate,2
,a rule,1
,a threat,1
,a chance,1
,that a piece,1
,its a building,2
,Attacking a building,1
,Attacking a unit,1
,is a counter,2
,a building,3
,a unit,1
,wins a tie,1
,a tie,1
,helped a lot,1
,of a piece,1
,on a cell,1
,changes a few,1
,a lot,1
,a cell,1
,a few,1
,to a friendly,1
,with a limit,1
,a friendly,1
,a limit,1
,is a series,1
,of a total,1
,of a move,1
,as a removal,1
,by a destination,1
,as a destination,1
,After a passed,1
,place a piece,1
,for a pie,1
,Make a large,1
,a series,1
,a total,1
,a removal,1
,a destination,2
,a passed,1
,a pie,1
,a large,1
,or a set,1
,a set,1
WNW,{ WNW ENE,7
,WNW ENE,7
,STRING WNW INTEGER,8
,WNW INTEGER,8
<369>,<81> <369> STRING,1
,<369> STRING,1
<48>,STRING <48> STRING,1
,<48> STRING,1
<row>,{ <row> },1
,<row> },1
Infinity,= Infinity (,10
,Infinity (,10
e,move e .,1
,e .,5
,. e .,4
follows:,as follows: INTEGER,1
,follows: INTEGER,1
spiral,( spiral turns:5,4
,spiral turns:5,4
,the spiral board,1
,spiral board,1
<Players:init>,Count <Players:init> to:,1
,<Players:init> to:,1
i,( i .,1
,i .,4
,) i .,2
,difference i .,1
<ChosenHop:prioritySetting>,play <ChosenHop:prioritySetting> ),1
,<ChosenHop:prioritySetting> ),1
union,( union (,380
,union (,380
,( union {,191
,union {,191
Artillery,) Artillery (,1
,Artillery (,1
<Player:startP3>,) <Player:startP3> <Player:startP4>,3
,<Player:startP3> <Player:startP4>,3
forests,in forests ),1
,in forests (,1
,forests ),1
,forests (,1
the,for the winning,2
,in the source,3
,the winning,2
,the source,3
,to the hand,3
,to the starting,4
,the hand,6
,the starting,6
,Reset the value,1
,the value,1
,Remove the Twin,1
,to the centre,1
,the Twin,1
,the centre,1
,of the knight,1
,all the possibilities,1
,on the goal,1
,of the enemy,1
,the knight,1
,the possibilities,1
,the goal,1
,the enemy,2
,in the target,1
,the target,3
,if the to,1
,on the to,1
,if the from,1
,to the to,1
,store the piece,1
,in the next,1
,not the previous,1
,of the piece,3
,in the hand,2
,the to,3
,the from,1
,the piece,5
,the next,5
,the previous,2
,in the given,1
,all the orthogonal,1
,the given,3
,the orthogonal,1
,in the water,1
,the water,1
,into the two,1
,if the destination,1
,removes the only,1
,in the 'to',2
,between the 3-stack,2
,and the target,2
,the two,2
,the destination,1
,the only,1
,the 'to',2
,the 3-stack,2
,look the notched,1
,the notched,2
,build the building,1
,the building,1
,is the notched,1
,store the next,2
,in the pending,2
,the pending,2
,pending the next,1
,at the initial,2
,the initial,3
,update the number,1
,the number,1
,of the P1,1
,of the P2,1
,the P1,1
,the P2,1
,without the simultaneous,2
,the simultaneous,2
,check the previous,1
,except the last,1
,the last,3
,represents the phase,4
,the phase,4
,separate the four,1
,of the board,3
,the four,1
,the board,4
,in the STRING,1
,the STRING,2
,in the designated,1
,in the supergame,1
,the designated,1
,the supergame,1
,following the rules,1
,and the game,1
,for the mover,1
,the rules,4
,the game,8
,the mover,1
,capturing the attacker,3
,of the pieces,4
,the attacker,3
,the pieces,4
,do the promoted,1
,the promoted,1
,for the last,1
,Only the king,1
,the king,1
,of the game,2
,in the rules,2
,in the promotion,1
,in the second,1
,the promotion,2
,the second,1
,begin the playing,1
,the playing,1
,in the other,1
,the other,3
,be the compass,1
,the compass,1
,whatever the die,1
,the die,1
,For the initial,1
,of the pawns,1
,the pawns,1
,for the Persians,1
,Furthermore the Persian,1
,Kings the Spartans,1
,all the Kings,1
,on the board,1
,at the time,1
,Then the rules,1
,the Persians,1
,the Persian,1
,the Spartans,1
,the Kings,1
,the time,1
,reaches the side,1
,then the Pawn,2
,of the captured,1
,as the player,1
,of the given,2
,reaches the far,1
,on the player's,2
,--COMMA-- the Pawn,1
,of the INTEGER,1
,of the six,2
,of the Rooks,1
,to the same,1
,neither the King,1
,nor the Rook,1
,of the same,3
,as the space,1
,on the current,1
,reaching the side,1
,reaches the farthest,1
,where the delayed,1
,--COMMA-- the possible,1
,of the Pawn,1
,before the promotion,1
,When the game,2
,--COMMA-- the checkmating,1
,--COMMA-- the checkmated,1
,and the remaining,1
,passes the current,1
,--COMMA-- the first,1
,of the other,1
,the side,2
,the Pawn,4
,the captured,1
,the player,1
,the far,1
,the player's,2
,the INTEGER,1
,the six,2
,the Rooks,1
,the same,4
,the King,1
,the Rook,1
,the space,1
,the current,2
,the farthest,1
,the delayed,1
,the possible,1
,the checkmating,1
,the checkmated,1
,the remaining,3
,the first,1
,on the palace,1
,on the Palace,1
,the palace,1
,the Palace,1
,remove the dice,2
,the dice,2
,from the hand,1
,to the central,1
,from the central,1
,to the entry,1
,of the spiral,1
,capturing the other,1
,on the two,1
,of the spirale,1
,the central,2
,the entry,1
,the spiral,1
,the spirale,1
,from the unit,1
,Sets the owner,1
,at the end,1
,at the rotation,1
,outnumber the enemy,1
,attack the CannonOutline,1
,the unit,1
,the owner,1
,the end,1
,the rotation,1
,the CannonOutline,1
,of the attacking,2
,the attacking,2
,) the script,1
,on the AI,1
,slowing the script,1
,Sometimes the locations,1
,og the secone,1
,and the size,1
,of the indecise,1
,after the move,1
,for the players,1
,understand the game,1
,filter the Add,1
,during the game,1
,the script,2
,the AI,1
,the locations,1
,the secone,1
,the size,1
,the indecise,1
,the move,1
,the players,1
,the Add,1
,to the Influence,1
,around the starting,1
,defining the individual,1
,and the resulting,1
,as the remaining,2
,at the starting,1
,start the hopping,1
,Handles the STRING,1
,into the define,1
,handling the moves,1
,STRING the last,1
,restore the included,1
,Selects the piece,1
,in the listing,1
,on the next,1
,of the moves,1
,in the listiong,1
,Defining the structure,1
,clearing the remembered,1
,for the double,1
,for the game:,2
,Defining the option,1
,Boards the game,1
,because the regions,1
,when the tri,1
,eg the bitter,1
,the Influence,1
,the individual,1
,the resulting,1
,the hopping,1
,the define,1
,the moves,2
,the included,1
,the listing,1
,the listiong,1
,the structure,1
,the remembered,1
,the double,1
,the game:,2
,the option,1
,the regions,1
,the tri,1
,the bitter,1
straight,--COMMA-- straight ahead,2
,straight ahead,2
p,. p .,1
,p .,1
<Triangular>,STRING <Triangular> STRING,2
,<Triangular> STRING,2
<Start:tigerSites>,STRING <Start:tigerSites> ),1
,<Start:tigerSites> ),1
<Tiling>,STRING <Tiling> args:,4
,<Tiling> args:,4
<diagShow>,<directionUsed> <diagShow> <directionScored>,3
,<diagShow> <directionScored>,3
of:Cell,Edge of:Cell at:#1,4
,Edge of:Cell at:#2,4
,of:Cell at:#1,6
,of:Cell at:#2,6
,Cell of:Cell at:,5
,of:Cell at:,28
,Vertex of:Cell at:,9
,Vertex of:Cell at:#1,2
,Vertex of:Cell at:#2,2
,Edge of:Cell at:,14
<Players:regions>,) <Players:regions> },1
,<Players:regions> },1
<Board:kingMove>,move <Board:kingMove> (,1
,<Board:kingMove> (,1
Forward,{ Forward Leftward,2
,Forward Leftward,2
,{ Forward Rightward,31
,Forward Rightward,33
,= Forward |,2
,) Forward (,7
,) Forward ),1
,directions Forward ),1
,Forward |,2
,Forward (,87
,Forward ),43
,Step Forward (,9
,) Forward Backward,1
,Forward Backward,71
,{ Forward FL,6
,Forward FL,8
,{ Forward FR,11
,Forward FR,12
,Slide Forward (,30
,{ Forward BL,11
,Forward BL,11
,Backward Forward ),2
,FR Forward },2
,Forward },16
,Hop Forward (,4
,Move Forward a,1
,Forward a,1
,steps:2 Forward ),1
,#1 Forward (,1
,STRING Forward Backward,3
,STRING Forward (,28
,STRING Forward ),35
,{ Forward Backward,43
,STRING Forward STRING,3
,Forward STRING,3
,Direction Forward (,8
,{ Forward BR,10
,Backward Forward },2
,BL Forward },5
,Adjacent Forward ),3
,FL Forward Backward,16
,Leftward Forward Backwards,1
,{ Forward Backwards,4
,Backwards Forward Rightward,2
,Forward BR,10
,Forward Backwards,5
,STRING Forward ~,4
,BR Forward },4
,FR Forward Backward,3
,Leftward Forward },1
,Leftward Forward FR,1
,BL Forward Backward,4
,Leftward Forward Backward,1
,Forward ~,4
,STRING Forward N,1
,STRING Forward S,1
,{ Forward },2
,Backward Forward FL,2
,Forward N,1
,Forward S,1
,) Forward distance:1,3
,) Forward distance:2,1
,Forward distance:1,3
,Forward distance:2,1
,directions Forward of:All,1
,Forward of:All,1
max:12,min:1 max:12 (,1
,max:12 (,1
obvious,an obvious implementation,1
,obvious implementation,1
{,equipment { (,957
,start { (,642
,sites { STRING,680
,end { (,303
,args: { <dogs>,1
,} { (,515
,{ (,5480
,{ STRING,2491
,{ <dogs>,1
,merge { (,104
,sites { INTEGER,461
,phases: { (,318
,{ INTEGER,7712
,counts: { INTEGER,19
,equipment { <Board:type>,4
,args: { <tigerSites>,1
,args: { <type>,70
,edges: { {,148
,{ { {,3
,{ { INTEGER,320
,} { INTEGER,4659
,} { {,17
,args: { <move>,5
,rulesets { (,168
,STRING { STRING,1361
,{ <Board:type>,4
,{ <tigerSites>,1
,{ <type>,70
,{ {,340
,{ <move>,5
,args: { <tigers>,1
,{ <tigers>,1
,equipment { <Board>,4
,union { (,188
,args: { <hare>,1
,{ <Board>,4
,{ <hare>,1
,args: { <coyote>,1
,STRING { },60
,{ <coyote>,1
,{ },78
,< { STRING,51
,vertices: { INTEGER,21
,) { (,180
,args: { <leopard>,1
,priority { (,54
,{ <leopard>,1
,start { <Place:geese>,1
,args: { <geese>,1
,{ <Place:geese>,1
,{ <geese>,1
,directions { Rightward,57
,{ Rightward,57
,concentric { INTEGER,32
,and { (,494
,poly { {,32
,{ { -3,1
,or { (,414
,{ -3,4
,directions { FR,283
,{ FR,283
,equipment { <Variant:board>,2
,args: { <board>,10
,vertices: { {,89
,{ <Variant:board>,2
,{ <board>,10
,args: { <pieces>,3
,{ <pieces>,3
,args: { <dog>,1
,{ <dog>,1
,args: { <bean>,1
,{ <bean>,1
,args: { <num>,66
,{ <num>,66
,directions { Forwards,32
,args: { <hopCapture>,1
,directions { N,56
,directions { NE,12
,{ Forwards,32
,{ <hopCapture>,1
,{ N,59
,{ NE,12
,args: { <start>,18
,{ <start>,18
,args: { <kingHop>,1
,{ <kingHop>,1
,} { -0,10
,} { -1,9
,} { -2,8
,} { -3,3
,{ -0,12
,{ -1,11
,{ -2,9
,args: { <pieceMoves>,1
,{ <pieceMoves>,1
,args: { <seleucid>,2
,{ <seleucid>,2
,equipment { STRING,8
,STRING { INTEGER,981
,map { (,92
,args: { <carnarvon>,1
,{ <carnarvon>,1
,INTEGER { P1,87
,INTEGER { P2,55
,{ P1,90
,{ P2,55
,P1 { INTEGER,25
,P2 { INTEGER,25
,cells: { {,13
,STRING { (,323
,args: { <rules>,18
,{ <rules>,18
,sites { #2,1
,faces: { INTEGER,6
,{ #2,3
,directions { Forward,120
,args: { <size,1
,{ Forward,120
,{ <size,1
,P3 { INTEGER,1
,P4 { INTEGER,1
,sites { (,198
,byScore { (,109
,facesByDie: { {,6
,args: { <piece>,4
,variations: { STRING,105
,{ <piece>,4
,games { (,3
,end { <Player:end>,1
,{ <Player:end>,1
,args: { <site1>,1
,< { INTEGER,84
,{ <site1>,1
,args: { <ludus>,1
,{ <ludus>,1
,args: { <size>,138
,{ <size>,138
,) { <Players:tracks>,3
,start { <Players:start>,2
,INTEGER { P3,5
,{ <Players:tracks>,3
,{ <Players:start>,2
,{ P3,5
,} { -4,1
,< { (,136
,{ -4,1
,) { <Track>,2
,{ <Track>,2
,or { Square,2
,or { #2,1
,and { #2,1
,args: { <track>,1
,args: { <dice>,3
,args: { <throw>,1
,whats: { (,12
,+ { (,13
,STRING { Ruleset,9
,{ Square,2
,{ <track>,1
,{ <dice>,3
,{ <throw>,1
,{ Ruleset,9
,args: { <numPlayers>,13
,{ <numPlayers>,13
,priority { If,1
,{ If,1
,start { <Version:start>,3
,{ <Version:start>,3
,intersection { (,10
,and { STRING,18
,players { (,115
,or { STRING,37
,start { <Board:start>,2
,{ <Board:start>,2
,<Each:AIstyle> { (,1
,args: { <AIstyle>,1
,{ <AIstyle>,1
,Piece { STRING,32
,items: { STRING,23
,args: { <number>,4
,{ <number>,4
,args: { <rule>,14
,{ <rule>,14
,directions { W,5
,{ W,5
,start { <Player:start>,1
,{ <Player:start>,1
,sites { <Board:rangeP1>,1
,sites { <Board:rangeP2>,1
,args: { <limit>,2
,args: { <shape>,4
,args: { <event>,1
,{ <Board:rangeP1>,1
,{ <Board:rangeP2>,1
,{ <limit>,2
,{ <shape>,4
,{ <event>,1
,args: { <capture>,3
,{ <capture>,3
,args: { <wikipedia>,1
,{ <wikipedia>,1
,concentric { <Player:num>,1
,{ <Player:num>,1
,priority { <Play:enterBoard>,1
,args: { <enterBoard>,1
,{ <Play:enterBoard>,1
,{ <enterBoard>,1
,Pattern { F,3
,{ F,26
,array { (,1
,start { <Player:init>,1
,{ <Player:init>,1
,items: { <Player:initHorse>,1
,{ <Player:initHorse>,1
,} { -6,4
,} { -5,8
,{ -6,4
,{ -5,8
,cells: { INTEGER,19
,store:None { (,63
,sites { <Board:LeftInnerHolesP1>,1
,sites { <Board:LeftInnerHolesP2>,1
,phases: { <Phase:opening>,1
,args: { <rowSize>,4
,args: { <opening>,2
,{ <Board:LeftInnerHolesP1>,1
,{ <Board:LeftInnerHolesP2>,1
,{ <Phase:opening>,1
,{ <rowSize>,4
,{ <opening>,2
,args: { <numSeed>,2
,{ <numSeed>,2
,sites { <Board:HalfRightInnerP1>,1
,sites { <Board:HalfRightInnerP2>,1
,{ <Board:HalfRightInnerP1>,1
,{ <Board:HalfRightInnerP2>,1
,start { <Start:rules>,1
,{ <Start:rules>,1
,phases: { <Start:misoroPhase>,2
,{ <Start:misoroPhase>,2
,sites { <Row:specialHoles>,1
,sites { <Row:singleHoles>,1
,{ <Row:specialHoles>,1
,{ <Row:singleHoles>,1
,store:None { <Board:tracks>,1
,{ <Board:tracks>,1
,sites { <Row:size>,1
,{ <Row:size>,1
,equipment { <Board:board>,1
,counts: { STRING,8
,{ <Board:board>,1
,sites { <Board:thirdHoleInnerP1>,2
,sites { <Board:thirdHoleInnerP2>,1
,{ <Board:thirdHoleInnerP1>,2
,{ <Board:thirdHoleInnerP2>,1
,concentric { (,1
,byScore { <Player:scores>,1
,args: { <numSeeds>,2
,{ <Player:scores>,1
,{ <numSeeds>,2
,INTEGER { (,6
,args: { <doneSoFar>,1
,{ <doneSoFar>,1
,args: { <directionP1>,1
,{ <directionP1>,1
,args: { <sitesP1>,1
,{ <sitesP1>,1
,STRING { <Row:hogon>,1
,{ <Row:hogon>,1
,phases: { <Variant:opening>,1
,{ <Variant:opening>,1
,args: { <value>,3
,{ <value>,3
,args: { <cond>,1
,{ <cond>,1
,P1 { F,1
,P2 { F,2
,args: { <result>,5
,{ <result>,5
,P1 { R,1
,{ R,5
,start { <Board:placement>,1
,{ <Board:placement>,1
,args: { <direction>,2
,args: { <hand>,1
,{ <direction>,2
,{ <hand>,1
,<phases: { (,1
,Random { STRING,29
,Connected { (,8
,P1 { (,9
,P2 { (,9
,args: { <mover>,1
,{ <mover>,1
,* { INTEGER,12
,STRING { #1,2
,{ #1,5
,meta { (,1
,All { (,2
,Orthogonal { (,4
,args: { <smallSide>,8
,{ <smallSide>,8
,P3 { (,1
,args: { <nonMover>,1
,args: { <playRules>,1
,{ <nonMover>,1
,{ <playRules>,1
,rotations { N,1
,numSides:4 { (,2
,args: { <target_zone>,1
,{ <target_zone>,1
,start { <Board:seed>,1
,{ <Board:seed>,1
,directions { NW,6
,{ NW,6
,. { {,1
,{ { F,11
,} { F,9
,args: { <BoardDef>,1
,{ <BoardDef>,1
,equipment { <Model:board>,1
,{ <Model:board>,1
,args: { <exact>,1
,{ <exact>,1
,INTEGER { INTEGER,11
,args: { <player1>,1
,{ <player1>,1
,intersect { (,1
,args: { <where>,1
,{ <where>,1
,end { Shape,1
,{ Shape,1
,args: { <players>,2
,{ <players>,2
,args: { <choice>,1
,{ <choice>,1
,priority { Move,1
,{ Move,1
,whats: { INTEGER,3
,phases: { <Rules:play>,2
,{ <Rules:play>,2
,args: { <activate>,2
,args: { <version>,2
,{ <activate>,2
,{ <version>,2
,args: { <captureType>,1
,{ <captureType>,1
,union { <Board:startP1>,1
,union { <Board:startP2>,1
,{ <Board:startP1>,1
,{ <Board:startP2>,1
,or { Capture,1
,{ Capture,1
,args: { <boardSize>,2
,{ <boardSize>,2
,Cell { STRING,1
,directions { FL,10
,directions { BL,6
,{ FL,10
,{ BL,6
,step: { {,11
,start { <Start:rule>,1
,{ <Start:rule>,1
,args: { <rules>>,1
,{ <rules>>,1
,{ { -0,2
,equipment { <Start:board>,1
,{ <Start:board>,1
,start { <Start>,2
,{ <Start>,3
,args: { <armSize>,1
,{ <armSize>,1
,args: { <promotedCaptureMove>,1
,{ <promotedCaptureMove>,1
,directions { BR,50
,{ BR,50
,Leap { {,4
,args: { <murray>,1
,{ <murray>,1
,piece { STRING,35
,STRING { N,2
,} { S,2
,STRING { WNW,6
,} { WSW,6
,STRING { NNW,8
,} { SSW,6
,{ S,3
,{ WNW,7
,{ WSW,6
,{ NNW,8
,{ SSW,6
,Random { (,2
,} { SSE,2
,STRING { <BoardConfig:RookLeft2Start>,1
,args: { <BoardLayout>,1
,{ SSE,2
,{ <BoardConfig:RookLeft2Start>,1
,{ <BoardLayout>,1
,start { <NumOfPlayers:PieceSetup>,2
,args: { <NumPlayers>,2
,{ <NumOfPlayers:PieceSetup>,2
,{ <NumPlayers>,2
,args: { <Pawn1>,1
,{ <Pawn1>,1
,directions { S,1
,directions { E,58
,directions { SW,1
,directions { SE,1
,STRING { {,6
,{ E,58
,{ SW,1
,{ SE,1
,args: { <doubleStep>,1
,{ <doubleStep>,1
,components: { STRING,96
,directions { WNW,1
,args: { <PlacementConditions>,1
,{ <PlacementConditions>,1
,} { L,10
,} { R,4
,{ L,10
,piece { (,1
,directions { Backward,12
,directions { Rightwards,8
,directions { Backwards,25
,directions { Leftward,1
,start { Row,3
,{ Backward,12
,{ Rightwards,8
,{ Backwards,25
,{ Leftward,1
,{ Row,3
,start { <PiecePlacement:PiecePlacement>,1
,args: { <PiecePlacement>,1
,{ <PiecePlacement:PiecePlacement>,1
,{ <PiecePlacement>,1
,start { <Player:team>,5
,INTEGER { P4,7
,INTEGER { P5,5
,INTEGER { P6,5
,INTEGER { P7,5
,INTEGER { P8,5
,INTEGER { P9,5
,{ <Player:team>,5
,{ P4,7
,{ P5,5
,{ P6,5
,{ P7,5
,{ P8,5
,{ P9,5
,Hidden { What,4
,{ What,4
,start { <Player:teams>,1
,{ <Player:teams>,1
,args: { <name>,2
,{ <name>,2
,{ { -1,2
,) { <Row:track>,1
,{ <Row:track>,1
,args: { <to>,2
,{ <to>,2
,directions { #1,1
,Rotation { INTEGER,2
,) { #1,1
,by:Mover { STRING,3
,* { (,1
,start { <Scenario:buildingSetup>,1
,and { <FogOfWar:EachMove>,2
,args: { <playerMaps>,1
,sites { },18
,args: { <AttackCheck>,1
,args: { <doctrine>,4
,{ <Scenario:buildingSetup>,1
,{ <FogOfWar:EachMove>,2
,{ <playerMaps>,1
,{ <AttackCheck>,1
,{ <doctrine>,4
,args: { <Move>,1
,{ <Move>,1
,args: { <moves>,1
,{ <moves>,1
,args: { <selGame>,2
,args: { <selScoring>,2
,args: { <gridType>,8
,{ <selGame>,2
,{ <selScoring>,2
,{ <gridType>,8
,P1 { <Board:regionsP1>,1
,P2 { <Board:regionsP2>,1
,{ <Board:regionsP1>,1
,{ <Board:regionsP2>,1
,phases: { STRING,3
,args: { <calculation>,1
,{ <calculation>,1
,args: { <distance>,1
,args: { <defs>,1
,{ <distance>,1
,{ <defs>,1
,args: { <updateOption>,1
,args: { <turnOption>,1
,{ <updateOption>,1
,{ <turnOption>,1
,addScore { P1,3
,end { <Version:result>,1
,{ <Version:result>,1
,args: { <play>,2
,{ <play>,2
,+ { <NumberPlayers:inGame>,1
,args: { <inGame>,1
,args: { <enemyHops>,1
,args: { <prioritySetting>,1
,args: { <method>,1
,args: { <location>,1
,args: { <discVal>,1
,{ <NumberPlayers:inGame>,1
,{ <inGame>,1
,{ <enemyHops>,1
,{ <prioritySetting>,1
,{ <method>,1
,{ <location>,1
,{ <discVal>,1
,args: { <stack>,1
,{ <stack>,1
,union { <Board:north>,1
,Orthogonal { <Board:north>,1
,Orthogonal { <Board:east>,1
,args: { <controlType>,2
,{ <Board:north>,2
,{ <Board:east>,1
,{ <controlType>,2
,args: { <color>,1
,{ <color>,1
,args: { <qtyMax>,1
,args: { <nbrMax>,1
,{ <qtyMax>,1
,{ <nbrMax>,1
,tri { INTEGER,1
,args: { <starting>,1
,{ <starting>,1
,args: { <begin>,1
,{ <begin>,1
,equipment { <Players:board>,1
,{ <Players:board>,1
,args: { <row>,1
,{ <row>,1
,args: { <pile>,1
,{ <pile>,1
,regions { Columns,10
,satisfy { (,13
,set { {,10
,{ Columns,10
,hints { <Challenge:hints>,4
,{ <Challenge:hints>,4
,hints { (,4
,hint { INTEGER,830
,regions { INTEGER,197
,args: { <hints>,1
,{ <hints>,1
,regions { (,1
,regions { AllDirections,1
,{ AllDirections,1
,set { <Challenge:start>,1
,{ <Challenge:start>,1
,sites { #1,1
,start { <challenge:start>,2
,{ <challenge:start>,2
,Target { INTEGER,2
,STRING { <Board:start1>,1
,STRING { <Board:start2>,1
,STRING { <Board:walls>,1
,args: { <walls>,2
,{ <Board:start1>,1
,{ <Board:start2>,1
,{ <Board:walls>,3
,{ <walls>,2
,STRING { <Board:exit>,2
,sites { <Board:walls>,2
,{ <Board:exit>,2
,Random { <Version:random>,1
,Target { <Version:order>,2
,{ <Version:random>,1
,{ <Version:order>,2
,{ { -2,1
,) { STRING,1
,args: { <boardHeight>,1
,args: { <extraBoardSize>,1
,{ <boardHeight>,1
,{ <extraBoardSize>,1
,args: { <threat>,1
,{ <threat>,1
,sites { <Start>,1
|,Forward | Backward,2
,| Backward,2
everyone's,after everyone's had,4
,everyone's had,4
},) } ),4687
,STRING } ),2054
,<dogs> } {,1
,} ),9198
,} {,5273
,INTEGER } ),880
,) } (,290
,} (,378
,<tigerSites> } {,1
,<type> } {,44
,INTEGER } {,4693
,INTEGER } },323
,} } {,17
,} } },3
,} } ),208
,<playMove> } {,1
,} },339
,<tigers> } {,1
,<hare> } {,1
,<coyote> } {,1
,{ } ),78
,<initTiger> } {,1
,STRING } >,51
,} } vertices:,2
,} >,281
,} vertices:,2
,<leopard> } {,1
,<geese> } {,1
,Leftward } ),95
,-3 } {,2
,<leopardGoal> } {,1
,. } ),5
,FL } ),237
,<p1Moves> } {,1
,-2 } {,3
,-2 } },2
,} } edges:,80
,} edges:,81
,<pieces> } {,2
,<dog> } {,1
,<bean> } {,1
,<num> } {,27
,* } ),133
,<rememberHopCapture> } {,1
,W } ),71
,SW } ),12
,<play> } {,10
,) } >,146
,<numKings> } {,1
,<Variant:pieceMoves> } ),1
,<endRules> } {,2
,<seleucid> } {,2
,<carnarvon> } {,1
,P3 } ),28
,P4 } ),29
,End } P1,20
,End } P2,20
,) } use:Vertex,82
,} P1,122
,} P2,122
,} use:Vertex,83
,INTEGER } P1,102
,INTEGER } P2,102
,<rules> } {,19
,<move> } {,6
,#2 } ),6
,INTEGER } num:3,2
,} num:3,4
,Rightward } ),3
,> } {,1
,INTEGER } P3,64
,INTEGER } P4,63
,} P3,64
,} P4,63
,<Players:track4> } use:Vertex,1
,} } num:4,4
,<track4> } {,1
,<piece> } {,3
,** } ),27
,STRING } variations:,105
,} num:4,4
,} variations:,105
,P2 } ),27
,<Player:trackP3P4> } ),1
,<Player:startP3P4> } ),1
,<Player:end> } ),1
,<end> } {,5
,INTEGER } directed:True,12
,} directed:True,14
,<sites> } {,1
,INTEGER } >,84
,Home } ),5
,<ludus> } {,1
,<track> } {,8
,<Players:start> } ),3
,<start> } {,37
,P1 } ),23
,-1 } {,2
,<Players:endTracks> } ),1
,<playingTeamPieces> } {,1
,P5 } ),9
,P6 } ),14
,<Track> } ),2
,<dice> } {,2
,<throw> } {,1
,Reconstruct } ),9
,<Players:home> } ),2
,<sizeHome> } {,1
,<size> } {,80
,<home> } {,1
,<Version:home> } ),1
,<Version:start> } ),4
,INTEGER } state:,4
,} state:,4
,value } ),1
,<Player:trackP4> } ),3
,<Player:startP4> } ),3
,<trackP4> } {,3
,<map> } {,1
,<Board:start> } ),3
,<AIstyle> } {,1
,STRING } (,71
,STRING } STRING,8
,} STRING,52
,<init> } {,6
,<rule> } {,14
,E } ),7
,S } ),46
,INTEGER } loop:True,127
,) } use:Edge,9
,} } num:3,2
,} loop:True,127
,} use:Edge,9
,<Player:start> } ),2
,<Board:rangeP1> } ),1
,<Board:rangeP2> } ),1
,<End:event> } ),1
,<limit> } {,5
,<rangeP2> } {,1
,<event> } {,1
,<goal> } {,1
,<wikipedia> } {,1
,} } cells:,1
,<Player:track916> } ),1
,INTEGER } num:2,4
,<track916> } {,1
,} cells:,1
,} num:2,4
,<Player:num> } ),1
,<Player:center> } ),1
,<tracks> } {,10
,INTEGER } P5,57
,INTEGER } P6,57
,INTEGER } P7,47
,INTEGER } P8,47
,INTEGER } P9,37
,INTEGER } P10,37
,} P5,57
,} P6,57
,} P7,47
,} P8,47
,} P9,37
,} P10,37
,<capture> } {,1
,<movePiece> } {,1
,F } whats:,2
,} whats:,2
,<Players:regions> } ),1
,<pathRule> } {,1
,<Players:tracks> } ),2
,<Players:entries> } ),2
,<entries> } {,2
,<Player:teams> } ),2
,<teams> } {,1
,STRING } INTEGER,15
,} INTEGER,846
,<Player:init> } ),1
,<startRules> } {,1
,up } ),1
,<Player:initHorse> } INTEGER,1
,<initHorse> } {,1
,<track2> } {,16
,<Board:LeftInnerHolesP1> } ),1
,<Board:LeftInnerHolesP2> } ),1
,<InitTwoSeeds> } {,1
,<opening> } {,2
,<numSeed> } {,2
,<Board:HalfRightInnerP1> } ),1
,<Board:HalfRightInnerP2> } ),1
,<HalfRightInnerP2> } {,1
,<CW2> } {,1
,<Start:rules> } ),1
,<misoroPhase> } {,2
,INTEGER } state:1,6
,INTEGER } state:2,6
,} state:1,87
,} state:2,14
,<Row:specialHoles> } ),1
,<Row:singleHoles> } ),1
,<singleHoles> } {,1
,<Board:track2> } ),1
,<Board:regions> } ),2
,<regions> } {,2
,<Board:tracks> } ),1
,<CCW2> } {,2
,<innerInitP2> } {,1
,<Board:leftMostP2> } ),1
,<leftMostP2> } {,1
,<Board:rightMostInnerHoleP1> } ),1
,<Board:rightMostInnerHoleP2> } ),1
,<Board:thirdHoleInnerP2> } ),1
,<rightMostInnerHoleP2> } {,1
,<Board:stores> } ),1
,<trackCW2> } {,1
,<Player:regions> } ),1
,<Player:scores> } ),1
,<numSeeds> } {,1
,<scores> } {,1
,home } ),14
,<ruleSecondCapture> } {,1
,<trackDirection> } {,1
,<Board:centreMove> } ),1
,<centreMove> } {,1
,<stores> } {,1
,<sitesP2> } {,1
,hole } ),1
,<Row:hogon> } ),1
,<hogon> } {,1
,<usingHogon> } {,1
,<Board:homeTracks> } ),1
,<openingRegions> } {,1
,<value> } {,3
,holes } ),1
,<cond> } {,1
,F } numSides:4,4
,<result> } {,6
,} numSides:4,4
,<Board:placement> } ),1
,<placement> } {,1
,<direction> } {,2
,STRING } count:29,1
,STRING } count:30,1
,} count:29,1
,} count:30,1
,<board> } {,3
,<number> } {,1
,<next> } {,1
,#1 } ),15
,<cornerSetup> } {,2
,<smallSide> } {,8
,<mover> } {,1
,<playRules> } {,3
,role } ),2
,move } ),2
,#3 } ),1
,<target_zone> } {,1
,<seed> } {,1
,STRING } count:1,6
,STRING } count:3,1
,} count:1,6
,} count:3,1
,SE } ),6
,<endScore> } {,1
,<shape> } {,1
,<3dSites> } {,1
,<piece2> } {,2
,F } {,23
,F } },11
,} } (,14
,<Board:ExtraCols> } ),1
,<ExtraCols> } {,1
,<exact> } {,1
,} } INTEGER,1
,INTEGER } INTEGER,828
,INTEGER } edges:,1
,<player2> } {,1
,<where> } {,1
,) } if:,4
,} if:,4
,<players> } {,1
,<choice> } {,1
,F } #1,1
,} #1,1
,<distance> } {,3
,<kingMove> } {,1
,<activate> } {,2
,<version> } {,2
,<numPieces> } {,1
,<Jarl:captureType> } ),1
,<captureType> } {,1
,<Board:startP1> } ),1
,<Board:startP2> } ),1
,<startP2> } {,2
,<pieceNumber> } {,1
,FR } ),29
,BR } ),20
,<Start:rule> } ),1
,<rules>> } {,1
,Leftward } bySite:True,2
,} bySite:True,2
,<Start> } ),3
,<numPiece> } {,1
,<endRule> } {,1
,STRING } state:1,80
,BL } ),55
,Forward } ),16
,king } ),1
,<murray> } {,1
,N } {,1
,ENE } {,7
,ESE } ),7
,NNE } {,6
,SSE } ),6
,E } {,2
,WSW } ),1
,<BoardConfig:RookRight2Start> } state:1,1
,<RegionMediumPhase> } {,1
,<NumOfPlayers:BoardRegions> } ),2
,<NumOfPlayers:PieceSetup> } ),2
,<CheckMate> } {,2
,<Pawn2> } {,1
,NW } ),1
,NE } ),1
,<movement> } {,1
,) } #2,1
,<doubleStep> } {,1
,} #2,1
,STRING } state:0,1
,} state:0,1
,<PlacementConditions> } {,1
,} } rotations:False,2
,} rotations:False,2
,Backward } ),87
,Backwards } ),5
,Leftwards } ),19
,Forwards } ),20
,BLL } ),1
,) } STRING,39
,BRR } ),1
,Rightwards } ),1
,<PiecePlacement:PiecePlacement> } ),1
,<PiecePlacement> } {,1
,FL } of:All,8
,} of:All,13
,<Player:team> } ),5
,P8 } ),12
,P10 } ),7
,P12 } ),7
,INTEGER } P11,27
,INTEGER } P12,27
,P7 } ),7
,P14 } ),6
,INTEGER } P13,18
,INTEGER } P14,18
,P16 } ),6
,INTEGER } P15,9
,INTEGER } P16,9
,} P11,27
,} P12,27
,} P13,18
,} P14,18
,} P15,9
,} P16,9
,<tracks>> } {,1
,STRING } count:5,2
,STRING } count:2,11
,Who } (,2
,} count:5,2
,} count:2,11
,} } STRING,5
,P9 } ),2
,P11 } ),2
,P13 } ),1
,P15 } ),1
,<option> } {,1
,STRING } value:1,8
,} value:1,8
,<name> } {,2
,End } directed:True,2
,<trackP2> } {,1
,<throwValues> } {,1
,<trackTeam2> } {,1
,<Row:track> } ),1
,<Option:start3> } ),1
,<to> } {,2
,<start3> } {,1
,<EnemyTrack2> } {,1
,<Players:setupRules> } ),1
,<setupRules> } {,1
,INTEGER } previous:False,2
,#1 } previous:False,1
,} previous:False,3
,<FogOfWar:AttackCheck> } ),1
,Value } at:,2
,<FogOfWar:EachMove> } ),3
,<terrainScale> } {,1
,<Metadata> } {,1
,<doctrine> } {,4
,} at:,2
,BR } of:All,1
,Backward } of:All,2
,Leftward } of:All,1
,FR } of:All,1
,STRING } rotation:0,7
,STRING } rotation:4,7
,STRING } rotation:1,1
,STRING } rotation:3,1
,STRING } rotation:5,1
,STRING } rotation:7,1
,} rotation:0,7
,} rotation:4,7
,} rotation:1,1
,} rotation:3,1
,} rotation:5,1
,} rotation:7,1
,<Ending> } {,1
,<moves> } {,1
,<selGame> } {,2
,<selScoring> } {,2
,<directionScored> } {,3
,<directionsWin> } {,2
,<Board:regionsP1> } ),1
,<Board:regionsP2> } ),1
,<regionsP2> } {,1
,<ForcedFillLevel> } {,1
,<calculation> } {,1
,<gridType> } {,2
,*** } ),2
,<defs> } {,1
,<updateOption> } {,1
,<turnOption> } {,1
,<numPlayers> } {,5
,P2 } {,3
,<Version:result> } ),1
,STRING } state:2,8
,STRING } state:3,8
,STRING } state:4,8
,STRING } state:5,8
,STRING } state:6,8
,STRING } state:7,8
,STRING } state:8,8
,} state:3,8
,} state:4,8
,} state:5,8
,} state:6,8
,} state:7,8
,} state:8,8
,-1 } ),3
,<inGame> } {,1
,<friendHops> } {,1
,Equi } ),1
,<prioritySetting> } {,1
,<influence> } {,1
,<method> } {,1
,Hops-a-Daisy } ),1
,<suicideOption> } {,1
,Equiversi } ),1
,<discVal> } {,1
,<stack> } {,1
,<Board:west> } (,1
,<Board:south> } ),1
,<Board:west> } ),1
,<west> } {,1
,<controlType> } {,2
,everything } ),1
,<color> } {,1
,piece } ),1
,<ctr> } {,1
,workaround } ),1
,<qtyMax> } {,1
,<nbrMax> } {,1
,<centering> } {,1
,<pieOrNot> } {,1
,<Players:initP3> } ),1
,<Players:betP3> } ),1
,<Players:showHandP3> } ),1
,<Players:removeP3> } ),1
,<Players:endP3> } ),1
,<endP3> } {,1
,<row> } {,1
,<pile> } {,1
,<piles> } {,1
,SubGrids } ),4
,<Challenge:hints> } ),3
,<hints> } {,5
,Rows } ),5
,) } Vertex,2
,} Vertex,2
,Diagonals } ),1
,<sum> } {,1
,AllDirections } ),1
,<Challenge:hints> } Cell,1
,} Cell,2
,) } Cell,1
,<Challenge:start> } ),1
,STRING } count:16,3
,} count:16,3
,STRING } count:,1
,} count:,1
,<challenge:start> } ),2
,<Board:start1> } ),1
,<Board:start2> } ),1
,<Board:walls> } ),3
,<start2> } {,1
,<Board:exit> } ),2
,<exit> } {,1
,<Version:pieces> } ),2
,<Version:random> } ),1
,<Version:order> } ),1
,<order> } {,1
,<OuterRing:tilePlacementRegion> } ),1
,STRING } count:<Size:numTiles>,1
,<numTiles> } {,1
,<tilePlacementRegion> } {,1
,} count:<Size:numTiles>,1
,<walls> } {,1
,<threat> } {,1
,<Version:order> } INTEGER,1
~,STRING ~ ~,9
,~ ~ at:EndOfTurn,2
,~ ~,16
,~ at:EndOfTurn,2
,) ~ (,16
,) ~ ~,3
,~ ~ ),2
,) ~ ),6
,~ (,41
,~ ),29
,STRING ~ (,14
,STRING ~ ),1
,All ~ ),9
,Diagonal ~ ),6
,Orthogonal ~ ),5
,Orthogonal ~ (,3
,Diagonal ~ (,3
,STRING ~ STRING,2
,Forward ~ STRING,4
,) ~ STRING,4
,~ ~ STRING,1
,~ ~ after:34,2
,Diagonal ~ ~,1
,Forwards ~ (,2
,~ ~ (,3
,~ ~ ~,2
,~ ~ after:35,4
,Orthogonal ~ ~,1
,~ STRING,14
,~ after:34,2
,~ after:35,4
,Diagonal ~ STRING,1
,Orthogonal ~ STRING,1
,Adjacent ~ STRING,1
<Start:board>,{ <Start:board> (,1
,<Start:board> (,1
Add,move Add (,194
,Add (,194
,or Add bridge,1
,) Add bridge,1
,Add bridge,2
,the Add moves,1
,Add moves,1
standard,move standard move,1
,standard move,1
,**** standard strategy,1
,standard strategy,1
<49>,STRING <49> STRING,1
,<49> STRING,1
,<7> <49> <175>,1
,<49> <175>,1
<Board:homeTracks>,) <Board:homeTracks> },1
,<Board:homeTracks> },1
path:True,) path:True ),2
,path:True ),2
Start,sites Start (,43
,Start (,44
,At Start Cell,2
,from Start (,1
,from Start ),1
,Start Cell,3
,Start ),1
,@ Start Cell,1
,game: Start options,1
,Start options,1
size:<Board:numPieces>,Each size:<Board:numPieces> ),1
,size:<Board:numPieces> ),1
origin:True,) origin:True ),11
,origin:True ),12
,) origin:True backtracking:,1
,origin:True backtracking:,1
,sow origin:True ),1
,) origin:True forward:True,2
,origin:True forward:True,2
,sow origin:True (,2
,origin:True (,2
arg:,STRING arg: STRING,1
,STRING arg: Site,1
,arg: STRING,1
,arg: Site,1
<Result:nonMover>,Player <Result:nonMover> ),1
,<Result:nonMover> ),1
got,just got swapped,2
,got swapped,2
good,as good -,1
,good -,1
Spiral>,<brick Spiral> STRING,1
,Spiral> STRING,1
directed:True,P1 directed:True ),230
,P2 directed:True ),231
,directed:True ),1093
,P3 directed:True ),98
,P4 directed:True ),91
,} directed:True ),14
,<Board:track> directed:True ),2
,P5 directed:True ),60
,P6 directed:True ),60
,INTEGER directed:True ),4
,STRING directed:True ),13
,P7 directed:True ),49
,P8 directed:True ),49
,P9 directed:True ),38
,P10 directed:True ),38
,P11 directed:True ),28
,P12 directed:True ),28
,P13 directed:True ),19
,P14 directed:True ),19
,P15 directed:True ),10
,P16 directed:True ),10
,loop:True directed:True ),2
empty,Any empty site,1
,empty site,2
,an empty site,1
,are empty or,1
,empty or,1
,any empty cell,2
,empty cell,3
,case: empty cell,1
,on empty location,1
,empty location,1
steps:#2,from:#1 steps:#2 ),20
,steps:#2 ),66
,#1 steps:#2 ),32
,STRING steps:#2 ),14
Vehicle,) Vehicle (,1
,Direct Vehicle Damage,1
,Indirect Vehicle Damage,1
,Vehicle (,1
,Vehicle Damage,2
steps:#3,#2 steps:#3 ),19
,steps:#3 ),19
<CW2>,<CW1> <CW2> <LeftInnerHolesP1>,1
,<CW2> <LeftInnerHolesP1>,1
,<CW1> <CW2> },1
,<CW2> },1
belonging,Rooks belonging to,1
,belonging to,1
tie,a tie ),1
,tie ),1
steps:#1,Move steps:#1 ),10
,steps:#1 ),13
,STRING steps:#1 ),2
,) steps:#1 (,1
,steps:#1 (,1
,#2 steps:#1 ),1
<Connection>,STRING <Connection> args:,2
,<Connection> args:,2
<Minotaur>,STRING <Minotaur> args:,2
,<Minotaur> args:,2
intersection,( intersection (,424
,intersection (,424
,( intersection {,10
,intersection {,10
,( intersection STRING,5
,intersection STRING,5
,( intersection #2,1
,( intersection <Multi:suicide>,1
,intersection #2,1
,intersection <Multi:suicide>,1
PieceHasNeverMoved,- PieceHasNeverMoved Usage:,3
,PieceHasNeverMoved Usage:,3
cosmetic,( cosmetic --COMMA--,1
,cosmetic --COMMA--,1
<Row:hogon>,{ <Row:hogon> },1
,<Row:hogon> },1
<Capture:distance>,between <Capture:distance> if:,2
,<Capture:distance> if:,2
utilities:,some utilities: clearing,1
,utilities: clearing,1
Dead,INTEGER Dead State,1
,Dead State,1
Quadrant,Opposite Quadrant of,4
,Quadrant of,4
FOR,JUST FOR ONE,1
,ROUND FOR NOW,1
,FOR ONE,1
,FOR NOW,1
check,We check the,1
,check the,1
,in check .,1
,to check during,1
,check .,1
,check during,1
,escape check passes,1
,check passes,1
,to check if,1
,check if,1
list,suicide list yet,1
,list yet,1
<celtic>,STRING <celtic> STRING,1
,<celtic> STRING,1
<threat>,{ <threat> },1
,<threat> },1
<CW1>,<CCW2> <CW1> <CW2>,2
,<CW1> <CW2>,2
<Track:stores>,home <Track:stores> kalahs,1
,<Track:stores> kalahs,1
aside,set aside for,1
,aside for,1
<Board:home>,) <Board:home> (,1
,<Board:home> (,1
Alyx,) Alyx (,1
,Alyx (,1
State,set State at:,179
,State at:,179
,set State at:#1,33
,State at:#1,33
,remember State ),4
,State ),4
,) State line,1
,State line,1
,sites State INTEGER,9
,State INTEGER,11
,sites State (,1
,State (,1
,) State of,3
,State of,3
,set State #1,18
,State #1,18
,What State Value,2
,State Value,2
,set State Edge,1
,) State 0:,1
,--COMMA-- State INTEGER,1
,--COMMA-- State 2:,1
,Dead State INTEGER,1
,set State Cell,1
,State Edge,1
,State 0:,1
,State 2:,1
,State Cell,1
Checks,) Checks if,1
,Checks if,1
ENEMY-OCCUPIED,target ENEMY-OCCUPIED cell,1
,ENEMY-OCCUPIED cell,1
<initLeopard>,<initTiger> <initLeopard> <leopardGoal>,1
,<initLeopard> <leopardGoal>,1
numException:1,) numException:1 ),1
,numException:1 ),1
Bottom,sites Bottom ),627
,Bottom ),630
,STRING Bottom STRING,2
,Bottom STRING,2
,STRING Bottom ),3
,) Bottom left,1
,) Bottom right,1
,Bottom left,1
,Bottom right,1
End,STRING End ),8
,End ),43
,) End ),34
,INTEGER End },40
,End },42
,= End (,24
,End (,24
,#1 End ),1
,P1 End holes,1
,P2 End holes,1
,End holes,2
,STRING End },2
Unique,is Unique ),1
,Unique ),1
<Version:random>,{ <Version:random> },1
,<Version:random> },1
by:Team1,Occupied by:Team1 ),3
,by:Team1 ),3
by:Team2,Occupied by:Team2 ),3
,by:Team2 ),3
size:6,Each size:6 ),6
,size:6 ),6
unique:True,#1 unique:True ),2
,unique:True ),12
,) unique:True ),10
,) unique:True (,7
,unique:True (,7
size:5,Each size:5 ),8
,size:5 ),8
size:8,Each size:8 ),1
,size:8 ),2
,Shared size:8 ),1
size:7,Each size:7 ),4
,size:7 ),4
<Fox>,STRING <Fox> args:,1
,<Fox> args:,1
size:2,Each size:2 ),9
,size:2 ),14
,Shared size:2 ),5
60>,. 60> STRING,1
,60> STRING,1
<Player:center>,) <Player:center> },1
,<Player:center> },1
previous:False,} previous:False next:False,3
,#1 previous:False next:False,1
,previous:False next:False,4
size:1,P1 size:1 ),1
,size:1 ),1
size:4,Each size:4 ),2
,size:4 ),2
Directions,- Directions #2,1
,- Directions (,2
,Directions #2,1
,Directions (,2
size:3,Each size:3 ),5
,size:3 ),5
<Center:controlType>,( <Center:controlType> ),1
,<Center:controlType> ),1
<name>,{ <name> },2
,<name> },2
King_noCross,to King_noCross .,2
,King_noCross .,2
Star>,<hex Star> STRING,1
,<tri Star> STRING,1
,Star> STRING,2
<Player:team>,{ <Player:team> },5
,<Player:team> },5
remove,( remove (,824
,remove (,824
,( remove INTEGER,6
,( remove Cell,6
,remove INTEGER,6
,remove Cell,6
,to remove an,1
,to remove one,1
,remove an,1
,remove one,1
,( remove STRING,12
,remove STRING,12
,We remove the,1
,remove the,2
,we remove the,1
,( remove Edge,15
,( remove Vertex,2
,( remove #2,1
,remove Edge,15
,remove Vertex,2
,remove #2,1
,then remove unwanted,1
,remove unwanted,1
<Result:next>,Next <Result:next> ),1
,<Result:next> ),1
<home>,<numPlayers> <home> <start>,2
,<home> <start>,3
,<num> <home> <start>,1
,<size> <home> },1
,<home> },1
rotations:False,} rotations:False (,2
,STRING rotations:False (,1
,rotations:False (,3
multiplayer,advanced multiplayer about,1
,multiplayer about,1
blocks,piece blocks all,1
,blocks all,1
victory,The victory conditions,1
,Persian victory conditions,1
,victory conditions,2
<discVal>,{ <discVal> },1
,<discVal> },1
<Players:endTracks>,) <Players:endTracks> },1
,<Players:endTracks> },1
Cells,two Cells away,1
,Cells away,1
,which Cells trigger,1
,Cells trigger,1
,count Cells ),1
,Cells ),1
Allow,) Allow state,1
,Allow state,1
args,INTEGER args Usage:,2
,args Usage:,2
with,round with no,2
,round with notches,1
,with no,2
,with notches,1
,holes with seeds,2
,with seeds,2
,swaps with previous,1
,mover with selected,2
,''shift-swaps'' with index,1
,with previous,1
,with selected,2
,with index,1
,state with its,1
,with its,1
,advancement with en,2
,with en,2
,However with a,1
,with a,3
,board with each,1
,locations with one,1
,advance with or,1
,play with a,1
,--COMMA-- with some,1
,with each,1
,with one,1
,with or,1
,with some,1
,improve with IntFunction,1
,with IntFunction,1
,Move with capture,3
,with capture,3
,pieces with too,1
,ge with a,1
,with too,1
,mess with these,1
,with these,1
<brick>,STRING <brick> STRING,1
,<brick> STRING,1
<Board:InitOneSeed>,STRING <Board:InitOneSeed> ),1
,<Board:InitOneSeed> ),1
there,already there .,3
,there .,3
,is there (,1
,there (,1
,and there are,1
,If there are,1
,or there is,1
,there are,2
,there is,1
WSW,) WSW ),2
,WSW ),3
,{ WSW ESE,6
,WSW ESE,7
,ENE WSW S,1
,N WSW ENE,1
,S WSW },1
,WSW S,1
,WSW ENE,1
,WSW },1
,STRING WSW INTEGER,4
,WSW INTEGER,4
,ENE WSW ESE,1
,#2 WSW ),1
suitable,a suitable definition,1
,suitable definition,1
handling,in handling the,1
,plus handling follow-up,1
,handling the,1
,handling follow-up,1
<Variants:starting>,) <Variants:starting> <Variants:pieOrNot>,1
,<Variants:starting> <Variants:pieOrNot>,1
<Board:type>,{ <Board:type> (,4
,<Board:type> (,4
,board <Board:type> use:Vertex,10
,<Board:type> use:Vertex,10
,board <Board:type> ),2
,<Board:type> ),4
,( <Board:type> <BoardSize>,2
,<Board:type> <BoardSize>,2
,board <Board:type> use:Edge,10
,<Board:type> use:Edge,10
,trim <Board:type> ),2
passant,en passant setup,2
,en passant directions,2
,En passant -,6
,passant setup,2
,passant directions,2
,passant -,6
,en passant capture,2
,passant capture,2
CaterpillarTree,is CaterpillarTree Mover,2
,CaterpillarTree Mover,2
<player1>,{ <player1> <player2>,1
,<player1> <player2>,1
FRR,FR FRR Backward,1
,FRR Backward,1
John,by John Beasley,1
,John Beasley,1
<Counters>,Count <Counters> to:,1
,STRING <Counters> args:,1
,<Counters> to:,1
,<Counters> args:,1
<captureType>,{ <captureType> },1
,<captureType> },1
Eqiversi,) Eqiversi Hops-a-Daisy,1
,Eqiversi Hops-a-Daisy,1
<Players:tracks>,{ <Players:tracks> (,1
,<Players:tracks> (,1
,) <Players:tracks> use:Vertex,1
,<Players:tracks> use:Vertex,1
,{ <Players:tracks> },2
,<Players:tracks> },2
<RegionDarkPhase>,<Pawn2Start> <RegionDarkPhase> <RegionLightPhase>,1
,<RegionDarkPhase> <RegionLightPhase>,1
<Phase:opening>,{ <Phase:opening> (,1
,<Phase:opening> (,1
block,not block movement,1
,block movement,1
to:,) to: (,100
,to: (,345
,INTEGER to: (,237
,<Start:numSeeds> to: (,2
,<Counters> to: (,1
,<Board:init> to: (,1
,<Players:init> to: (,1
,STRING to: (,2
,from:#1 to: (,1
Phil,by Phil Leduc,1
,Phil Leduc,1
count:<Size:numTiles>,} count:<Size:numTiles> ),1
,count:<Size:numTiles> ),1
Pieces,count Pieces P2,32
,Pieces P2,72
,no Pieces P2,40
,no Pieces P1,26
,Pieces P1,60
,count Pieces P1,34
,no Pieces Mover,109
,Pieces Mover,178
,no Pieces TeamMover,9
,Pieces TeamMover,9
,count Pieces of:#1,1
,Pieces of:#1,1
,count Pieces in:,3
,Pieces in:,5
,no Pieces of:,1
,Pieces of:,1
,no Pieces Enemy,10
,Pieces Enemy,10
,count Pieces Mover,69
,Swap Pieces (,7
,Pieces (,7
,count Pieces Next,87
,Pieces Next,190
,no Pieces Next,103
,no Pieces Player,8
,Pieces Player,10
,count Pieces All,14
,Pieces All,75
,no Pieces All,61
,no Pieces in:,2
,count Pieces Player,2
,count Pieces #1,6
,Pieces #1,11
,no Pieces #1,5
,Non-Pawn Pieces -------------------------------------------------------,1
,Pieces -------------------------------------------------------,1
,no Pieces P3,1
,count Pieces P3,3
,Pieces P3,4
,count Pieces Vertex,1
,count Pieces Edge,1
,count Pieces Cell,1
,Pieces Vertex,1
,Pieces Edge,1
,Pieces Cell,1
,count Pieces P4,2
,Pieces P4,2
,count Pieces STRING,1
,Pieces STRING,2
,no Pieces STRING,1
,count Pieces ),1
,Pieces ),1
order,in order to,2
,order to,2
,board order .,1
,order .,1
<Phase>,STRING <Phase> args:,1
,<Phase> args:,1
<openingRegions>,<homeTracks> <openingRegions> },1
,<openingRegions> },1
63>,. 63> STRING,2
,63> STRING,2
<teams>,<num> <teams> },1
,<teams> },1
,<num> <teams> <tracks>,1
,<teams> <tracks>,1
,<startingMoney> <teams> <pieceFlip>,1
,<teams> <pieceFlip>,1
<Capture:ruleSecondCapture>,. <Capture:ruleSecondCapture> Only,1
,<Capture:ruleSecondCapture> Only,1
<player2>,<player1> <player2> },1
,<player2> },1
<Multi:suicide>,intersection <Multi:suicide> (,1
,<Multi:suicide> (,1
<ExtraCapture:num>,STRING <ExtraCapture:num> ),1
,<ExtraCapture:num> ),2
,Var <ExtraCapture:num> ),1
understand,to understand the,1
,understand the,1
Square,{ Square INTEGER,2
,) Square INTEGER,1
,Square INTEGER,3
,boardless Square ),4
,Square ),4
,concentric Square rings:2,3
,Square rings:2,3
,concentric Square rings:3,19
,Square rings:3,19
,concentric Square rings:4,1
,Square rings:4,1
propose,( propose STRING,1
,propose STRING,1
<selScoring>,{ <selScoring> },2
,<selScoring> },2
<betP3>,<initP3> <betP3> <showHandP3>,1
,<betP3> <showHandP3>,1
<stack>,{ <stack> },1
,<stack> },1
even,Problems: even after,1
,even after,1
,on even boards,1
,even boards,1
spots,Move spots Human,1
,spots Human,1
Limping>,<hex Limping> STRING,2
,Limping> STRING,4
,<tri Limping> STRING,1
,<brick Limping> STRING,1
Bishop,) Bishop (,8
,Promoted Bishop (,7
,Bishop (,15
assumes,) assumes both,1
,assumes both,1
BLL,BL BLL },1
,BLL },1
Draw,Mover Draw ),67
,Draw ),69
,P1 Draw ),1
,result Draw ),1
<Players:Play>,) <Players:Play> <Players:end>,1
,<Players:Play> <Players:end>,1
<Board:rangeP1>,{ <Board:rangeP1> },1
,<Board:rangeP1> },1
<exact>,{ <exact> },1
,<exact> },1
restrict,to restrict (,1
,restrict (,1
Colour,) Colour line,1
,Colour line,1
,region Colour (,6
,Colour (,6
,piece Colour P1,2
,piece Colour P2,2
,Colour P1,2
,Colour P2,2
Side,- Side (,1
,Side (,1
,sites Side E,9
,sites Side W,9
,Side E,9
,Side W,9
,sites Side NE,27
,sites Side SW,26
,sites Side NW,25
,sites Side SE,26
,Side NE,27
,Side SW,26
,Side NW,25
,Side SE,26
,sites Side S,11
,sites Side N,11
,Side S,11
,Side N,11
,sites Side #1,1
,sites Side #2,1
,Side #1,1
,Side #2,1
<endRules>,<pieceMoves> <endRules> },1
,<endRules> },2
,<consequence> <endRules> },1
throughAny:,All throughAny: (,4
,throughAny: (,9
,INTEGER throughAny: (,5
SameLayer,) SameLayer ),3
,SameLayer ),3
too,down too much,1
,too much,1
,with too many,1
,too many,1
directional,( directional (,4
,directional (,4
have,and have to,3
,which have to,3
,have to,7
,we have to,1
,to have .,1
,to have on,1
,they have lost,1
,they have state,1
,have .,1
,have on,1
,have lost,1
,have state,1
,moved have moved,1
,have moved,1
modelled,Game modelled without,1
,modelled without,1
<boardHeight>,{ <boardHeight> <boardWidth>,1
,<boardHeight> <boardWidth>,1
Threatened,is Threatened at:,1
,Threatened at:,1
,is Threatened (,5
,Threatened (,5
,is Threatened ),1
,Threatened ),1
<ThrowSix:value>,INTEGER <ThrowSix:value> ),1
,<ThrowSix:value> ),1
<Version:rulesCommander>,) <Version:rulesCommander> (,1
,<Version:rulesCommander> (,1
2-stack,( 2-stack ),1
,2-stack ),1
<friendHops>,<enemyHops> <friendHops> },1
,<friendHops> },1
maxState:3,) maxState:3 ),1
,maxState:3 ),3
,P1 maxState:3 ),1
,P2 maxState:3 ),1
<Variant:board>,{ <Variant:board> (,2
,<Variant:board> (,2
<Minotaur:move>,( <Minotaur:move> #1,1
,<Minotaur:move> #1,1
apply:,) apply: (,122
,apply: (,223
,if:True apply: (,5
,sow apply: (,60
,STRING apply: (,34
,numPerHole:4 apply: (,1
,count:2 apply: (,1
Doctrines,) Doctrines (,1
,Doctrines (,1
maxState:6,P1 maxState:6 ),1
,P2 maxState:6 ),1
,maxState:6 ),2
maxState:7,) maxState:7 ),1
,maxState:7 ),1
maxState:8,) maxState:8 ),1
,maxState:8 ),1
<p2_arg>,<p1_arg> <p2_arg> ),1
,<p2_arg> ),1
,<p1_arg> <p2_arg> <p3_arg>,1
,<p2_arg> <p3_arg>,1
Leftward,Forwards Leftward },3
,Leftward },98
,Rightward Leftward },94
,Forward Leftward Rightward,2
,Leftward Rightward,3
,Rightward Leftward FL,14
,Leftward FL,14
,Rightward Leftward FR,7
,Rightward Leftward BR,4
,Rightward Leftward Forward,4
,FR Leftward },1
,{ Leftward FR,1
,Adjacent Leftward ),1
,Rightward Leftward Backward,18
,Leftward FR,8
,Leftward BR,4
,Leftward Forward,4
,Leftward ),1
,Leftward Backward,18
,STRING Leftward (,1
,Backward Leftward Rightward,1
,Rightward Leftward Forwards,2
,Rightward Leftward BL,1
,Leftward (,1
,Leftward Forwards,2
,Leftward BL,1
<ScoreOption>,STRING <ScoreOption> args:,1
,<ScoreOption> args:,1
<type>,{ <type> },44
,<type> },44
,{ <type> <initTiger>,2
,<type> <initTiger>,2
,{ <type> <start>,13
,<type> <start>,13
,{ <type> <seed>,1
,<type> <seed>,1
,{ <type> <tile>,2
,<type> <tile>,2
,{ <type> <distance>,2
,<type> <distance>,2
,{ <type> <startP1>,2
,<type> <startP1>,2
,{ <type> <regionsP1>,1
,<type> <regionsP1>,1
,{ <type> <result>,1
,<type> <result>,1
,{ <type> <north>,1
,<type> <north>,1
,{ <type> <startTheseus>,1
,<type> <startTheseus>,1
<Board:rangeP2>,{ <Board:rangeP2> },1
,<Board:rangeP2> },1
<startPos>,<num> <startPos> <init>,1
,<startPos> <init>,1
<king_dir>,STRING <king_dir> <king_spaces>,6
,<king_dir> <king_spaces>,6
markers,move markers changes,1
,broken markers (,1
,bridging markers need,1
,new markers .,1
,markers changes,1
,markers (,1
,markers need,1
,markers .,1
<tilePlacementRegion>,<extraBoardSize> <tilePlacementRegion> },1
,<tilePlacementRegion> },1
All,Value All ),8
,All ),103
,STRING All ),64
,difference All Backwards,2
,All Backwards,2
,) All flat,1
,) All round,1
,All flat,1
,All round,1
,Pieces All in:,69
,All in:,69
,Pieces All ),6
,Connected All Mover,1
,All Mover,1
,Connected All {,2
,All {,2
,INTEGER All ),8
,INTEGER All <Exact>,1
,All <Exact>,1
,) All (,6
,Vertex All (,3
,All (,16
,INTEGER All throughAny:,4
,All throughAny:,4
,Distance All from:,1
,All from:,1
,Step All (,2
,INTEGER All whats:,6
,INTEGER All P1,1
,INTEGER All P2,1
,All whats:,6
,All P1,1
,All P2,1
,Slide All ),3
,INTEGER All through:,1
,All through:,1
,) All ),11
,P1 All ),1
,P2 All ),1
,Hop All (,3
,STRING All STRING,3
,STRING All ~,9
,All STRING,3
,All ~,9
,Orthogonal All ),1
,Slide All (,1
,Step All <Step:to>,1
,All <Step:to>,1
,) All to,1
,All to,1
,regions All (,1
,result All Loss,1
,result All Win,1
,All Loss,1
,All Win,1
possibilities,the possibilities ),1
,possibilities ),1
New,--COMMA-- New Hops-a-Daisy,1
,New Hops-a-Daisy,1
<Movement>,STRING <Movement> args:,1
,<Movement> args:,1
T333333_33434>,<tiling T333333_33434> STRING,1
,T333333_33434> STRING,1
prameter-shift,note prameter-shift (,1
,prameter-shift (,1
pips,( pips ),192
,pips ),192
,count pips =,1
,pips =,1
consistancy,for consistancy (,1
,consistancy (,1
<activate>,{ <activate> },2
,<activate> },2
upon,promoted upon reaching,1
,upon reaching,1
pie,a pie phase,1
,pie phase,1
Copyright,Chess Copyright INTEGER,6
,Copyright INTEGER,8
,Hexchess Copyright INTEGER,1
,Starchess Copyright INTEGER,1
<CapOption>,STRING <CapOption> args:,1
,<CapOption> args:,1
<startP1>,<size> <startP1> <startP2>,1
,<startP1> <startP2>,3
,<type> <startP1> <startP2>,2
Counter,set Counter ),58
,Counter ),58
,Note: Counter is,13
,Counter is,13
,) Counter attacks,1
,= Counter Attack,1
,Counter attacks,1
,Counter Attack,1
Random,sites Random (,103
,Random (,124
,value Random (,20
,place Random {,32
,Random {,32
,= Random Damage,2
,Random Damage,2
,sites Random ),1
,Random ),1
,place Random (,1
row:,coord row: (,33
,row: (,33
Disc,use Disc (,1
,Disc (,1
castling,for castling ),3
,castling ),3
,a castling manouvre,1
,Spartan castling --COMMA--,1
,castling manouvre,1
,castling --COMMA--,1
function,role function define,1
,function define,1
<14><18><6>,STRING <14><18><6> STRING,1
,<14><18><6> STRING,1
<Board:excludeFromEdge>,) <Board:excludeFromEdge> ),1
,<Board:excludeFromEdge> ),1
<wikipedia>,{ <wikipedia> },1
,<wikipedia> },1
<Hidden>,<Orthogonal> <Hidden> <Orthogonal>,19
,<Adjacent> <Hidden> <Adjacent>,2
,<Orthogonal> <Hidden> <All>,2
,<Hidden> <Orthogonal>,21
,<Hidden> <Adjacent>,2
,<Hidden> <All>,2
,<All> <Hidden> <Orthogonal>,2
,<Orthogonal> <Hidden> <3>,3
,<All> <Hidden> <7>,1
,<Hidden> <3>,3
,<Hidden> <7>,1
tower,a tower (,1
,a tower piece,2
,tower (,1
,tower piece,2
<149>,> <149> <170>,1
,<149> <170>,1
to:Next,STRING to:Next ),6
,to:Next ),23
,) to:Next ),5
,False to:Next ),12
<p2_dirs>,<p1_dirs> <p2_dirs> <p3_dirs>,1
,<p2_dirs> <p3_dirs>,1
including,--COMMA-- including those,1
,including those,1
to:Mover,) to:Mover ),2
,False to:Mover ),9
,to:Mover ),22
,Hidden to:Mover ),3
,What to:Mover ),8
,False to:Mover #1,1
,to:Mover #1,1
<Version:playRules>,rules <Version:playRules> (,1
,<Version:playRules> (,1
swap,( swap Players,9
,swap Players,9
,( swap ),19
,swap ),19
,to swap players,1
,swap players,1
<ExtraCols>,<ExtraRows> <ExtraCols> },1
,<ExtraCols> },1
However,. However with,1
,However with,1
tri,( tri Hexagon,7
,tri Hexagon,7
,( tri Limping,7
,tri Limping,7
,( tri INTEGER,22
,tri INTEGER,22
,( tri <Board:size>,1
,tri <Board:size>,1
,( tri {,1
,the tri grid,1
,( tri (,1
,tri {,1
,tri grid,1
,tri (,1
<Board>,STRING <Board> args:,153
,<Board> args:,153
,{ <Board> (,4
,<Board> (,6
,square <Board> ),7
,<Board> ),37
,INTEGER <Board> store:None,1
,<Board> store:None,1
,hex <Board> ),13
,board <Board> use:Vertex,13
,<Board> use:Vertex,13
,Diamond <Board> ),3
,Triangle <Board> ),4
,( <Board> ),1
,square <Board> pyramidal:True,2
,<Board> pyramidal:True,2
,) <Board> ),4
,+ <Board> INTEGER,4
,- <Board> INTEGER,6
,<Board> INTEGER,12
,board <Board> ),3
,<Boundary:shape> <Board> ),1
,Hexagon <Board> ),1
,/ <Board> INTEGER,2
,* <Board> (,2
,( <Board> <Size>,1
,<Board> <Size>,1
Wagon,Bridge Wagon (,1
,Wagon (,1
affected,never affected by,1
,affected by,1
length:,Mover length: (,8
,length: (,8
Three,P1 Three LeftMost,1
,P2 Three LeftMost,1
,P1 Three RightMost,1
,P2 Three RightMost,1
,Three LeftMost,2
,Three RightMost,2
<startP2>,<startP1> <startP2> },2
,<startP2> },2
,<startP1> <startP2> <centering>,1
,<startP2> <centering>,1
condition,a condition for,2
,condition for,2
,- condition to,1
,condition to,1
<Slide>,> <Slide> STRING,1
,<Slide> STRING,1
,STRING <Slide> args:,1
,<Slide> args:,1
improve,to improve with,1
,improve with,1
<FogOfWar:AttackCheck>,) <FogOfWar:AttackCheck> },1
,<FogOfWar:AttackCheck> },1
Connectivity,) Connectivity and,1
,Connectivity and,1
<Sow:numSeed>,) <Sow:numSeed> ),1
,<Sow:numSeed> ),2
,STRING <Sow:numSeed> ),1
try,of try .,1
,try .,1
Row,sites Row INTEGER,283
,Row INTEGER,342
,sites Row (,18
,Row (,19
,sites Row STRING,1
,Row STRING,1
,Middle Row (,1
,STRING Row INTEGER,21
,{ Row INTEGER,3
,) Row INTEGER,35
,column Row row,1
,Row row,1
rarely,are rarely reset,1
,rarely reset,1
<size,{ <size >,1
,<size >,1
20>,. 20> <8,1
,<7 20> STRING,1
,20> <8,1
,20> STRING,3
,<10 20> STRING,1
,INTEGER 20> STRING,1
<hex>,STRING <hex> STRING,5
,<hex> STRING,5
rightMost,The rightMost hole,1
,rightMost hole,1
units,enemy units that,1
,units that,1
,to units in,2
,to units on,1
,Buying units (,1
,units in,2
,units on,1
,units (,1
<100>,STRING <100> <,3
,<100> <,3
,STRING <100> STRING,1
,<100> STRING,1
Any,) Any empty,1
,Any empty,1
represents,) represents the,4
,represents the,4
times,INTEGER times board,1
,times board,1
<startP3>,<num> <startP3> <trackP3>,3
,<startP3> <trackP3>,3
<Capture:type>,( <Capture:type> (,2
,<Capture:type> (,2
count:<Scoring:num>,) count:<Scoring:num> ),4
,count:<Scoring:num> ),4
extra,- extra region,1
,extra region,1
land,on land ),2
,land ),2
<Variant>,STRING <Variant> args:,25
,<Variant> args:,25
,) <Variant> ),1
,<Variant> ),1
direction,given direction --COMMA--,1
,direction --COMMA--,2
,any direction into,1
,direction into,1
,forward direction --COMMA--,1
,other direction .,1
,direction .,2
,- direction (,2
,- direction #2,2
,direction (,2
,direction #2,2
,adjacent direction .,1
,their direction of,1
,direction of,1
21>,. 21> <18,1
,<18 21> STRING,1
,21> <18,1
,21> STRING,1
That,Comment: That game,1
,That game,1
<ruleSecondCapture>,<numCounters> <ruleSecondCapture> },1
,<ruleSecondCapture> },1
SSE,SSW SSE ),1
,NNW SSE NNE,1
,NNE SSE NNW,1
,SSW SSE },6
,SSE ),7
,SSE NNE,1
,SSE NNW,1
,SSE },6
,{ SSE W,2
,SSE W,2
,STRING SSE ),3
,NNW SSE ),2
,#2 SSE ),1
RegularGraph,is RegularGraph Neutral,3
,RegularGraph Neutral,3
,is RegularGraph Mover,4
,RegularGraph Mover,4
forEach,( forEach Piece,1093
,forEach Piece,1093
,( forEach Site,272
,forEach Site,272
,( forEach (,173
,forEach (,173
,( forEach Die,98
,forEach Die,98
,( forEach Level,82
,forEach Level,82
,( forEach Value,44
,forEach Value,44
,( forEach Player,18
,forEach Player,18
,( forEach NonMover,35
,forEach NonMover,35
,( forEach Group,3
,forEach Group,3
,( forEach Direction,33
,forEach Direction,33
,( forEach Track,1
,forEach Track,1
,( forEach Team,2
,forEach Team,2
,( forEach <PlaceDisc:suicideOption>,1
,forEach <PlaceDisc:suicideOption>,1
custodial,( custodial (,66
,custodial (,66
,( custodial #1,5
,custodial #1,5
liberties,- liberties ),1
,0: liberties >,1
,= liberties =,1
,liberties ),1
,liberties >,1
,liberties =,1
<Knight2Start>,<Bishop2Start> <Knight2Start> <Pawn2Start>,1
,<Knight2Start> <Pawn2Start>,1
by:Player,Occupied by:Player STRING,5
,by:Player STRING,5
Centre,sites Centre ),77
,Centre ),77
chooses,player chooses .,1
,chooses .,1
followed,is followed by,1
,followed by,1
Array,size Array (,32
,Array (,32
<Rows:num>,rectangle <Rows:num> <Columns:num>,4
,<Rows:num> <Columns:num>,4
<startP4>,<trackP3> <startP4> <trackP4>,3
,<startP4> <trackP4>,3
SSW,STRING SSW SSE,1
,NNE SSW SSW,1
,SSW SSW NNE,1
,{ SSW SSE,6
,SSW SSE,7
,SSW SSW,1
,SSW NNE,1
,player SSW ),1
,SSW ),7
,STRING SSW ),3
,NNE SSW ),2
,#2 SSW ),1
Incident,sites Incident Edge,40
,Incident Edge,40
,sites Incident Cell,10
,Incident Cell,10
,sites Incident Vertex,15
,Incident Vertex,15
NotBlockedBy,in NotBlockedBy (,1
,NotBlockedBy (,1
Triangle>,<hex Triangle> STRING,1
,Triangle> STRING,1
Edge,items:<Player:init> Edge STRING,1
,Edge STRING,1
,Incident Edge of:Cell,22
,to Edge (,19
,Empty Edge ),22
,Outer Edge ),3
,Edge of:Cell,22
,Edge (,89
,Edge ),56
,STRING Edge INTEGER,2
,Edge INTEGER,2
,STRING Edge (,9
,Incident Edge of:Vertex,17
,Empty Edge (,4
,Edge of:Vertex,17
,who Edge at:,2
,remove Edge (,15
,from Edge ),2
,Pieces Edge #1,1
,#1 Edge ),1
,Edge at:,9
,Edge #1,1
,cost Edge at:,4
,Neutral Edge (,10
,Board Edge ),27
,INTEGER Edge at:0,8
,INTEGER Edge at:1,8
,INTEGER Edge at:2,8
,INTEGER Edge at:3,8
,INTEGER Edge at:4,8
,INTEGER Edge at:5,8
,INTEGER Edge at:6,8
,INTEGER Edge at:7,8
,INTEGER Edge at:8,8
,INTEGER Edge at:9,8
,INTEGER Edge at:10,8
,INTEGER Edge at:11,8
,INTEGER Edge at:12,7
,INTEGER Edge at:13,7
,INTEGER Edge at:14,7
,INTEGER Edge at:15,7
,INTEGER Edge at:16,7
,INTEGER Edge at:17,7
,INTEGER Edge at:18,7
,INTEGER Edge at:19,7
,INTEGER Edge at:20,7
,INTEGER Edge at:21,6
,INTEGER Edge at:22,6
,INTEGER Edge at:23,6
,INTEGER Edge at:24,6
,INTEGER Edge at:25,6
,INTEGER Edge at:26,6
,INTEGER Edge at:27,6
,INTEGER Edge at:28,6
,INTEGER Edge at:29,6
,INTEGER Edge at:30,6
,INTEGER Edge at:31,6
,INTEGER Edge at:32,5
,INTEGER Edge at:33,5
,INTEGER Edge at:34,5
,INTEGER Edge at:35,5
,INTEGER Edge at:36,3
,INTEGER Edge at:37,3
,INTEGER Edge at:38,3
,INTEGER Edge at:39,3
,INTEGER Edge at:40,3
,INTEGER Edge at:41,3
,INTEGER Edge at:42,2
,INTEGER Edge at:43,2
,INTEGER Edge at:44,2
,Edge at:0,8
,Edge at:1,8
,Edge at:2,8
,Edge at:3,8
,Edge at:4,8
,Edge at:5,8
,Edge at:6,8
,Edge at:7,8
,Edge at:8,8
,Edge at:9,8
,Edge at:10,8
,Edge at:11,8
,Edge at:12,7
,Edge at:13,7
,Edge at:14,7
,Edge at:15,7
,Edge at:16,7
,Edge at:17,7
,Edge at:18,7
,Edge at:19,7
,Edge at:20,7
,Edge at:21,6
,Edge at:22,6
,Edge at:23,6
,Edge at:24,6
,Edge at:25,6
,Edge at:26,6
,Edge at:27,6
,Edge at:28,6
,Edge at:29,6
,Edge at:30,6
,Edge at:31,6
,Edge at:32,5
,Edge at:33,5
,Edge at:34,5
,Edge at:35,5
,Edge at:36,3
,Edge at:37,3
,Edge at:38,3
,Edge at:39,3
,Edge at:40,3
,Edge at:41,3
,Edge at:42,2
,Edge at:43,2
,Edge at:44,2
,Shared Edge (,14
,P1 Edge (,8
,P2 Edge (,6
,cost Edge in:,2
,Edge in:,2
,State Edge at:,1
,Path Edge Mover,7
,Edge Mover,7
,Group Edge at:,2
,Incident Edge of:Edge,1
,Edge of:Edge,1
,values Edge (,1
,Count Edge (,3
,Groups Edge ),1
Aircraft,) Aircraft (,1
,= Aircraft Damage,1
,Aircraft (,1
,Aircraft Damage,1
22>,<9 22> <8,1
,22> <8,1
<Play:type>,or <Play:type> (,1
,<Play:type> (,1
<Doctrine1:doctrine>,mapEntry <Doctrine1:doctrine> #2,1
,<Doctrine1:doctrine> #2,1
Jay,--COMMA-- Jay M,8
,Jay M,8
,STRING Jay Coskey,1
,Jay Coskey,1
BRR,BR BRR },1
,BRR },1
-------------------------------------------------------------------------,) ------------------------------------------------------------------------- (,5
,------------------------------------------------------------------------- (,5
Derived,Source: Derived from,5
,Derived from,5
maxValue:10000,maxState:100 maxValue:10000 ),1
,maxValue:10000 ),1
DoCastle,- DoCastle (,3
,DoCastle (,3
clauses,STRING clauses passed,1
,clauses passed,1
prev,( prev ),6
,prev ),6
,( prev MoverLastTurn,1
,prev MoverLastTurn,1
<OuterRing>,STRING <OuterRing> args:,1
,<OuterRing> args:,1
pits,storage pits ),41
,pits ),41
,previous pits only,1
,pits only,1
value:,STRING value: (,16
,value: (,16
Booleans:,for Booleans: (,1
,Booleans: (,1
LeftMost,P1 LeftMost (,1
,P2 LeftMost (,1
,LeftMost (,4
,Three LeftMost (,2
defines,macro defines one,1
,defines one,1
,region defines (,1
,constants defines (,1
,functional defines (,1
,defines (,4
,Functional defines (,1
Direct,= Direct Vehicle,1
,Direct Vehicle,1
<Tower>,Step <Tower> (,1
,STRING <Tower> args:,1
,<Tower> (,1
,<Tower> args:,1
replayDouble:True,Die replayDouble:True if:#1,8
,Die replayDouble:True if:,17
,replayDouble:True if:#1,8
,replayDouble:True if:,17
,combined:True replayDouble:True (,1
,replayDouble:True (,1
<Next>,STRING <Next> STRING,2
,<Next> STRING,2
<maxVal>,<size> <maxVal> <sum>,1
,<maxVal> <sum>,1
<Board:board>,{ <Board:board> (,1
,<Board:board> (,1
,board <Board:board> <Board:tracks>,1
,<Board:board> <Board:tracks>,1
Throw,) Throw a,2
,Throw a,2
Positional,noRepeat Positional ),1
,Positional ),1
merge,( merge (,50
,merge (,50
,( merge {,104
,merge {,104
counter-attack,) counter-attack (,1
,counter-attack (,1
<BoardShape:gridType>,STRING <BoardShape:gridType> ),6
,<BoardShape:gridType> ),6
,( <BoardShape:gridType> <BoardSize:smallSide>,1
,<BoardShape:gridType> <BoardSize:smallSide>,1
orthogonally,is orthogonally surrounded,1
,orthogonally surrounded,1
Then,= Then moves,1
,Then moves,1
,. Then the,1
,Then the,1
,. Then --COMMA--,1
,Then --COMMA--,1
state,( state at:,392
,state at:,392
,( state at:#1,46
,state at:#1,46
,- state (,5
,state (,9
,next state .,1
,state .,1
,initial state (,2
,( state ),1
,state ),1
,terminal state with,1
,state with,1
,have state INTEGER,1
,state INTEGER,1
,Local state =,2
,state =,4
,) state =,2
,STRING state (,2
,Allow state to,1
,state to,1
,without state changes,2
,state changes,2
,( state at:0,2
,( state at:1,2
,( state at:2,1
,state at:0,2
,state at:1,2
,state at:2,1
23>,. 23> <9,1
,<8 23> STRING,1
,23> <9,1
,23> STRING,1
<Option:board>,surakartaBoard <Option:board> ),1
,<Option:board> ),1
displayed,is displayed before,1
,displayed before,1
,is displayed .,1
,displayed .,1
AnyDie,is AnyDie INTEGER,7
,AnyDie INTEGER,7
edited,and edited by,1
,edited by,1
want,if want to,1
,want to,1
Castling,movement: Castling Source:,1
,Castling Source:,1
,movement: Castling (,2
,Castling (,2
,) Castling -------------------------------------------------------,1
,Castling -------------------------------------------------------,1
,. Castling can,1
,Castling can,1
opposite,compass opposite of,1
,opposite of,1
,board opposite its,1
,opposite its,1
Rotational,Slide Rotational (,1
,Rotational (,1
<board>,{ <board> <p1Moves>,1
,<board> <p1Moves>,1
,{ <board> <start>,1
,<board> <start>,1
,{ <board> <tracks>,1
,<board> <tracks>,1
,{ <board> },3
,<board> },3
,{ <board> <rules>,2
,<board> <rules>,2
,<players> <board> <start1>,1
,<board> <start1>,1
,<num> <board> <sumFingers>,1
,<board> <sumFingers>,1
,{ <board> <piles>,1
,<board> <piles>,1
,{ <board> <noPieceSite>,1
,<board> <noPieceSite>,1
each,of each player,5
,each player,5
,of each piece,1
,each piece,2
,and each piece,1
,with each side,1
,and each space,1
,each side,1
,each space,1
,of each entrenchment,1
,of each turn,1
,each entrenchment,1
,each turn,1
,of each marker,1
,each marker,1
,of each individual,1
,each individual,1
<0><,STRING <0>< (,1
,<0>< (,1
<team>,<size> <team> <tracks>,4
,<team> <tracks>,4
,<size> <team> <tracks>>,1
,<team> <tracks>>,1
difference,( difference (,652
,difference (,652
,( difference Orthogonal,6
,difference Orthogonal,6
,( difference All,2
,difference All,2
,( difference Diagonal,4
,difference Diagonal,4
,( difference Forwards,1
,difference Forwards,1
,( difference Adjacent,17
,difference Adjacent,17
,is difference an,1
,set difference i,1
,difference an,1
,difference i,1
,( difference STRING,1
,difference STRING,1
Influence,the Influence of,1
,is Influence at,1
,Influence of,1
,Influence at,1
must,they must move,1
,must move,1
,player must place,1
,must place,1
Group,size Group at:,15
,Group at:,26
,sites Group at:,11
,forEach Group (,1
,Group (,1
,sizes Group P1,3
,sizes Group P2,3
,sizes Group P3,2
,sizes Group P4,1
,Group P1,3
,Group P2,3
,Group P3,2
,Group P4,1
,sites Group from:,2
,Group from:,2
,sizes Group STRING,16
,Group STRING,16
,sizes Group <BoardShape:directionsUsed>,3
,sizes Group Orthogonal,3
,Group <BoardShape:directionsUsed>,3
,Group Orthogonal,5
,forEach Group Orthogonal,2
,sites Group Edge,2
,Group Edge,2
joinMidpoints:False,rings:3 joinMidpoints:False joinCorners:True,1
,joinMidpoints:False joinCorners:True,1
<BoardLayout>,{ <BoardLayout> <Pawn1Start>,1
,<BoardLayout> <Pawn1Start>,1
<track916>,<track58> <track916> },1
,<track916> },1
<End:result>,STRING <End:result> ),2
,<End:result> ),3
,Mover <End:result> ),1
ONE,FOR ONE ROUND,1
,ONE ROUND,1
<removeLastPiece>,<start> <removeLastPiece> <end>,1
,<removeLastPiece> <end>,1
<Row:track>,{ <Row:track> },1
,<Row:track> },1
<rulesCommander>,<numPlayers> <rulesCommander> <removeRule>,1
,<rulesCommander> <removeRule>,1
<CapOption:enemyHops>,STRING <CapOption:enemyHops> <Multi:capture>,1
,<CapOption:enemyHops> <Multi:capture>,1
two,the two nearest,1
,or two in,1
,or two enemy,1
,right two or,2
,two nearest,1
,two in,1
,two enemy,1
,two or,2
,and two round,1
,two round,1
,piece two Cells,1
,in two separate,2
,two Cells,1
,two separate,2
,leap two spaces,1
,two spaces,1
,to two steps,9
,two steps,9
,the two sense,1
,two sense,1
,between two new,1
,two new,1
,last two characters,1
,two characters,1
<arc4>,<arc3> <arc4> <track3>,1
,<arc4> <track3>,1
promote,( promote (,61
,promote (,61
,To promote to,20
,promote to,20
,can promote --COMMA--,1
,promote --COMMA--,1
routine,Main routine (,8
,routine (,8
pot,( pot ),6
,pot ),6
<Board:thirdHoleInnerP2>,{ <Board:thirdHoleInnerP2> <Board:rightMostInnerHoleP2>,1
,<Board:thirdHoleInnerP1> <Board:thirdHoleInnerP2> },1
,<Board:thirdHoleInnerP2> <Board:rightMostInnerHoleP2>,1
,<Board:thirdHoleInnerP2> },1
Backward,| Backward #3,1
,| Backward (,1
,) Backward (,1
,) Backward ),32
,directions Backward ),1
,Backward #3,1
,Backward (,14
,Backward ),71
,Forward Backward ),4
,) Backward Forward,2
,Backward Forward,6
,Slide Backward (,1
,Forward Backward Rightward,16
,Backward Rightward,18
,STRING Backward ),31
,FL Backward Forward,1
,{ Backward BR,1
,{ Backward Rightward,2
,Adjacent Backward ),3
,Forward Backward },45
,Forwards Backward },9
,FL Backward },19
,{ Backward FR,4
,{ Backward Forward,3
,Leftward Backward },12
,Backward BR,3
,Backward },89
,Backward FR,10
,FLL Backward BL,1
,Leftward Backward BR,1
,Leftward Backward BL,2
,STRING Backward (,11
,BL Backward },3
,Leftward Backward FR,3
,Forward Backward FR,3
,FRR Backward BR,1
,Forward Backward Leftward,1
,Forward Backward Rightwards,1
,Forward Backward Leftwards,1
,{ Backward Forwards,1
,Backward BL,3
,Backward Leftward,1
,Backward Rightwards,1
,Backward Leftwards,1
,Backward Forwards,1
,{ Backward },1
does,it does not,1
,does not,3
,away does not,1
,This does not,1
,Shooter does double,1
,Shooter does 150%,1
,Shooter does 250%,1
,Shooter does 200%,1
,does double,1
,does 150%,1
,does 250%,1
,does 200%,1
attack,Can attack all,2
,Cannot attack the,1
,attack all,2
,attack the,1
<90>,STRING <90> <,3
,<90> <,3
,STRING <90> STRING,1
,<90> STRING,1
knight,the knight (,1
,knight (,1
pow,( pow (,1
,pow (,1
<Version:pieces>,) <Version:pieces> },2
,<Version:pieces> },2
by:Shared,Occupied by:Shared on:Edge,3
,by:Shared on:Edge,3
,Occupied by:Shared STRING,1
,by:Shared STRING,1
,Occupied by:Shared ),8
,by:Shared ),8
25>,<10 25> <9,1
,25> <9,1
,. 25> <22,1
,<22 25> STRING,1
,25> <22,1
,25> STRING,1
<BoardShape:ForcedFillLevel>,<= <BoardShape:ForcedFillLevel> (,1
,<BoardShape:ForcedFillLevel> (,1
escape,to escape check,1
,escape check,1
---------------------------------------------,) --------------------------------------------- Options,1
,; --------------------------------------------- (,1
,--------------------------------------------- Options,1
,--------------------------------------------- (,1
steps:10,) steps:10 N,1
,steps:10 N,1
clause,then clause (,2
,remember clause (,2
,between clause (,1
,clause (,5
<Scenario:boardShape>,board <Scenario:boardShape> ),1
,<Scenario:boardShape> ),1
steps:15,) steps:15 N,1
,steps:15 N,1
,) steps:15 ),2
,steps:15 ),2
<Scenario:playerMaps>,) <Scenario:playerMaps> STRING,1
,<Scenario:playerMaps> STRING,1
replaced,typ replaced (,1
,replaced (,1
steps:16,) steps:16 S,2
,) steps:16 N,2
,steps:16 S,2
,steps:16 N,2
steps:17,) steps:17 ),2
,steps:17 ),2
team,( team ),2
,team ),2
P10,handSite P10 ),33
,STRING P10 directed:True,1
,P10 ),37
,P10 directed:True,38
,pair P10 INTEGER,1
,} P10 directed:True,37
,P10 INTEGER,1
,P9 P10 },5
,P9 P10 P11,15
,P10 },7
,P10 P11,15
,P8 P10 },2
,loop:True P10 ),4
,P8 P10 P12,4
,P10 P12,4
,result P10 Win,4
,P10 Win,4
<arc3>,<num> <arc3> <arc4>,1
,<arc3> <arc4>,1
They,- They slide,1
,. They castle,1
,They slide,1
,They castle,1
P12,handSite P12 ),25
,STRING P12 directed:True,1
,P12 ),28
,P12 directed:True,28
,P11 P12 },5
,} P12 directed:True,27
,P11 P12 P13,10
,P12 },7
,P12 P13,10
,P10 P12 },2
,loop:True P12 ),3
,P10 P12 P14,2
,P12 P14,2
,result P12 Win,3
,P12 Win,3
P11,handSite P11 ),26
,STRING P11 directed:True,1
,P11 ),29
,P11 directed:True,28
,P10 P11 P12,15
,} P11 directed:True,27
,P11 P12,15
,P9 P11 },2
,loop:True P11 ),3
,P9 P11 P13,2
,P11 },2
,P11 P13,2
,result P11 Win,3
,P11 Win,3
Vasa,De Vasa Chess,1
,Vasa Chess,1
<SafeTeleportation>,STRING <SafeTeleportation> args:,1
,<SafeTeleportation> args:,1
LineOfSight,sites LineOfSight Farthest,4
,LineOfSight Farthest,4
,sites LineOfSight at:,8
,LineOfSight at:,8
,sites LineOfSight Empty,3
,sites LineOfSight Piece,8
,LineOfSight Empty,3
,LineOfSight Piece,8
P14,handSite P14 ),16
,STRING P14 directed:True,1
,P14 ),18
,P14 directed:True,19
,P13 P14 },5
,} P14 directed:True,18
,P13 P14 P15,5
,P14 },6
,P14 P15,5
,P12 P14 },1
,loop:True P14 ),2
,P12 P14 P16,1
,P14 P16,1
,result P14 Win,2
,P14 Win,2
P13,handSite P13 ),17
,STRING P13 directed:True,1
,P13 ),19
,P13 directed:True,19
,P12 P13 P14,10
,} P13 directed:True,18
,P13 P14,10
,P11 P13 },1
,loop:True P13 ),2
,P11 P13 P15,1
,P13 },1
,P13 P15,1
,result P13 Win,2
,P13 Win,2
P16,handSite P16 ),8
,STRING P16 directed:True,1
,P16 ),9
,P16 directed:True,10
,P15 P16 },5
,} P16 directed:True,9
,P16 },6
,P14 P16 },1
,loop:True P16 ),1
,result P16 Win,1
,P16 Win,1
P15,handSite P15 ),9
,STRING P15 directed:True,1
,P15 ),10
,P15 directed:True,10
,P14 P15 P16,5
,} P15 directed:True,9
,P15 P16,5
,P13 P15 },1
,loop:True P15 ),1
,P15 },1
,result P15 Win,1
,P15 Win,1
<All>,> <All> <ThinDotted>,5
,<ThinDotted> <All> STRING,4
,<Hidden> <All> STRING,2
,<All> <ThinDotted>,5
,<All> STRING,10
,STRING <All> STRING,2
,> <All> <ThinDashed>,6
,<ThinDashed> <All> STRING,2
,> <All> <Hidden>,3
,<All> <ThinDashed>,6
,<All> <Hidden>,3
topLevel,( topLevel at:,59
,topLevel at:,59
<Board:thirdHoleInnerP1>,{ <Board:thirdHoleInnerP1> <Board:rightMostInnerHoleP1>,1
,{ <Board:thirdHoleInnerP1> <Board:thirdHoleInnerP2>,1
,<Board:thirdHoleInnerP1> <Board:rightMostInnerHoleP1>,1
,<Board:thirdHoleInnerP1> <Board:thirdHoleInnerP2>,1
Select,move Select (,384
,Select (,384
,) Select Player,2
,Select Player,2
,move Select #1,2
,Select #1,2
<Triangle>,STRING <Triangle> STRING,1
,<Triangle> STRING,1
26>,. 26> <10,1
,<9 26> STRING,1
,26> <10,1
,26> STRING,1
<Star>,STRING <Star> STRING,1
,<Star> STRING,1
<Player:number>,players <Player:number> ),3
,<Player:number> ),3
thing,curious thing .,1
,thing .,1
Passed,all Passed ),59
,Passed ),59
at:4,who at:4 ),1
,at:4 ),16
,count at:4 ),1
,what at:4 ),2
,Edge at:4 ),8
,Vertex at:4 ),3
,INTEGER at:4 ),1
at:3,who at:3 ),1
,at:3 ),16
,count at:3 ),2
,what at:3 ),1
,Edge at:3 ),8
,Vertex at:3 ),3
,INTEGER at:3 ),1
Shooter,) Shooter does,1
,( Shooter does,3
,Shooter does,4
at:6,count at:6 ),1
,at:6 ),14
,what at:6 ),1
,Edge at:6 ),8
,Vertex at:6 ),3
,INTEGER at:6 ),1
at:5,who at:5 ),1
,at:5 ),15
,count at:5 ),1
,what at:5 ),1
,Edge at:5 ),8
,Vertex at:5 ),3
,INTEGER at:5 ),1
at:0,Stack at:0 ),2
,at:0 ),26
,Edge at:0 ),8
,Vertex at:0 ),3
,count at:0 ),1
,state at:0 ),2
,what at:0 ),9
,<Size:pile> at:0 ),1
Hint,forAll Hint (,4
,Hint (,4
at:2,Stack at:2 ),1
,at:2 ),17
,count at:2 ),2
,what at:2 ),1
,Edge at:2 ),8
,Vertex at:2 ),3
,state at:2 ),1
,INTEGER at:2 ),1
<numSeed>,{ <numSeed> },2
,<numSeed> },2
at:1,Stack at:1 ),1
,at:1 ),26
,count at:1 ),1
,what at:1 ),10
,Edge at:1 ),8
,Vertex at:1 ),3
,state at:1 ),2
,INTEGER at:1 ),1
<BoardConfig:RegionMediumPhase>,Phase <BoardConfig:RegionMediumPhase> ),1
,<BoardConfig:RegionMediumPhase> ),1
had,everyone's had a,4
,had a,5
,has had a,1
typ,piece typ replaced,1
,typ replaced,1
source,the source .,2
,source .,2
,the source ;,1
,source ;,1
trail:,) trail: (,2
,trail: (,2
There,* There are,1
,. There is,1
,There are,1
,There is,1
piece:#1,Rename piece:#1 STRING,2
,piece:#1 STRING,2
tile,( tile STRING,22
,tile STRING,22
,( tile <Tiling:tile>,2
,tile <Tiling:tile>,2
,( tile #1,1
,tile #1,1
This,) This removes,2
,This removes,2
,) This macro,1
,STRING This will,1
,This macro,1
,This will,1
,--COMMA-- This does,1
,This does,1
has,it has to,1
,has to,1
,If has captured,1
,has captured,1
,board has INTEGER,1
,that has already,1
,INTEGER has had,1
,has INTEGER,1
,has already,1
,has had,1
at:8,who at:8 ),1
,Stack at:8 ),1
,at:8 ),17
,count at:8 ),2
,what at:8 ),1
,Edge at:8 ),8
,Vertex at:8 ),3
,INTEGER at:8 ),1
at:7,count at:7 ),1
,at:7 ),14
,what at:7 ),1
,Edge at:7 ),8
,Vertex at:7 ),3
,INTEGER at:7 ),1
INTEGER,players INTEGER ),770
,shift INTEGER INTEGER,300
,INTEGER INTEGER (,352
,square INTEGER diagonals:Alternating,35
,wedge INTEGER ),100
,INTEGER ),9885
,INTEGER INTEGER,16703
,INTEGER (,2695
,INTEGER diagonals:Alternating,58
,rectangle INTEGER INTEGER,474
,INTEGER INTEGER diagonals:Alternating,23
,= INTEGER (,1095
,rotate INTEGER (,127
,shift INTEGER -2,14
,{ INTEGER INTEGER,6071
,INTEGER INTEGER INTEGER,6831
,INTEGER INTEGER },5726
,STRING INTEGER count:8,9
,INTEGER -2,21
,INTEGER },7693
,INTEGER count:8,9
,STRING INTEGER INTEGER,42
,INTEGER INTEGER ),2654
,square INTEGER ),404
,STRING INTEGER count:21,1
,INTEGER count:21,1
,shift INTEGER .,66
,. INTEGER -1,7
,scale INTEGER .,32
,. INTEGER (,151
,. INTEGER INTEGER,692
,shift INTEGER -0,3
,scale INTEGER INTEGER,41
,INTEGER INTEGER .,1041
,INTEGER .,2057
,INTEGER -1,24
,INTEGER -0,21
,square INTEGER diagonals:Solid,11
,INTEGER diagonals:Solid,18
,) INTEGER ),2003
,INTEGER INTEGER diagonals:Radiating,1
,INTEGER diagonals:Radiating,1
,wedge INTEGER INTEGER,8
,-1 INTEGER (,15
,Row INTEGER ),304
,INTEGER INTEGER diagonals:Solid,7
,{ INTEGER .,882
,. INTEGER },1231
,-3 INTEGER },2
,{ INTEGER -3,1
,max INTEGER ),284
,INTEGER -3,6
,{ INTEGER },722
,scale INTEGER (,13
,. INTEGER -0,10
,Phase INTEGER ),123
,{ INTEGER -2,4
,Star INTEGER ),15
,shift INTEGER -4,2
,INTEGER -4,8
,>= INTEGER (,47
,STRING INTEGER (,10
,range INTEGER INTEGER,59
,STRING INTEGER ),833
,< INTEGER (,294
,Mover INTEGER ),136
,+ INTEGER (,66
,Empty INTEGER ),27
,from INTEGER ),6
,to INTEGER ),16
,Line INTEGER Orthogonal,61
,INTEGER Orthogonal,61
,Column INTEGER ),36
,pair INTEGER INTEGER,1910
,face INTEGER ),107
,. INTEGER -3,2
,shift INTEGER -1,14
,P1 INTEGER ),238
,P2 INTEGER ),238
,P3 INTEGER ),41
,P4 INTEGER ),39
,Team INTEGER {,179
,INTEGER {,196
,) INTEGER INTEGER,63
,. INTEGER End,40
,STRING INTEGER count:5,37
,STRING INTEGER count:2,37
,STRING INTEGER count:3,22
,INTEGER End,40
,INTEGER count:5,37
,INTEGER count:2,39
,INTEGER count:3,22
,STRING INTEGER count:15,39
,STRING INTEGER count:14,4
,INTEGER count:15,39
,INTEGER count:14,4
,<= INTEGER (,98
,STRING INTEGER count:1,4
,INTEGER count:1,4
,AnyDie INTEGER ),7
,* INTEGER (,44
,- INTEGER (,9
,STRING INTEGER count:13,2
,INTEGER count:13,2
,--COMMA-- INTEGER moves,1
,INTEGER moves,4
,) INTEGER (,137
,> INTEGER (,64
,STRING INTEGER count:4,35
,INTEGER count:4,35
,<Board:size> INTEGER ),4
,{ INTEGER -4,1
,-4 INTEGER },1
,-5 INTEGER (,1
,{ INTEGER -1,3
,-2 INTEGER },1
,P5 INTEGER ),6
,P6 INTEGER ),6
,#1 INTEGER ),66
,STRING INTEGER count:7,9
,INTEGER count:7,9
,Line INTEGER W,6
,Line INTEGER N,3
,Line INTEGER S,3
,Line INTEGER E,6
,Square INTEGER (,3
,Squares INTEGER to,2
,to INTEGER (,2
,player INTEGER ),23
,Var INTEGER ),39
,INTEGER W,6
,INTEGER N,3
,INTEGER S,3
,INTEGER E,6
,INTEGER to,2
,In INTEGER (,10
,in INTEGER normal,2
,INTEGER normal,2
,STRING INTEGER count:<Pieces:num>,2
,INTEGER count:<Pieces:num>,2
,rectangle INTEGER <Board:size>,7
,INTEGER <Board:size>,10
,Next INTEGER ),2
,at:#1 INTEGER ),31
,remove INTEGER ),6
,-7 INTEGER (,2
,-6 INTEGER (,1
,pair INTEGER STRING,215
,INTEGER STRING,406
,STRING INTEGER directed:True,4
,INTEGER directed:True,4
,<rectangle INTEGER 8>,1
,INTEGER 8>,1
,= INTEGER INTEGER,3
,. INTEGER -4,5
,rotate INTEGER .,9
,. INTEGER -8,2
,. INTEGER -10,2
,. INTEGER -11,1
,INTEGER -8,2
,INTEGER -10,3
,INTEGER -11,1
,P7 INTEGER ),4
,P8 INTEGER ),4
,P9 INTEGER ),1
,P10 INTEGER ),1
,square INTEGER pyramidal:True,2
,INTEGER pyramidal:True,2
,Edge INTEGER count:2,2
,Value INTEGER in:,6
,shift INTEGER -3,3
,-2 INTEGER .,6
,. INTEGER -2,3
,. INTEGER -5,3
,shift INTEGER -5,1
,= INTEGER STRING,30
,INTEGER in:,6
,INTEGER -5,4
,level:#2 INTEGER ),2
,-4 INTEGER (,2
,} INTEGER ),834
,items:<Player:init> INTEGER ),2
,= INTEGER #1,23
,. INTEGER -6,1
,INTEGER #1,49
,INTEGER -6,1
,range INTEGER (,23
,STRING INTEGER state:1,5
,STRING INTEGER state:2,4
,INTEGER state:1,5
,INTEGER state:2,4
,) INTEGER is,1
,INTEGER is,2
,-6 INTEGER },4
,-5 INTEGER },2
,Section INTEGER (,12
,pair INTEGER -36,1
,pair INTEGER -72,1
,INTEGER -36,1
,INTEGER -72,1
,pair INTEGER -10,1
,mancalaBoard INTEGER STRING,96
,Count INTEGER to:,237
,INTEGER to:,237
,Pending INTEGER ),2
,mancalaBoard INTEGER (,2
,* INTEGER STRING,4
,Count INTEGER at:,7
,INTEGER at:,7
,{ INTEGER (,8
,+ INTEGER <Row:size>,1
,<Row:size> INTEGER ),4
,INTEGER <Row:size>,5
,* INTEGER <Row:size>,3
,-1 INTEGER .,4
,min INTEGER (,4
,mancalaBoard INTEGER INTEGER,59
,INTEGER INTEGER store:None,36
,INTEGER store:None,36
,INTEGER INTEGER {,6
,mapEntry INTEGER ),4
,mancalaBoard INTEGER <Board>,1
,INTEGER <Board>,1
,mancalaBoard INTEGER <Board:size>,3
,mancalaBoard INTEGER <Row:size>,1
,INTEGER INTEGER <Players:track>,1
,INTEGER <Players:track>,1
,mancalaBoard INTEGER <Column:size>,1
,INTEGER <Column:size>,1
,hex INTEGER ),35
,. INTEGER .,4
,Shared INTEGER ),43
,{ INTEGER #1,12
,* INTEGER #1,8
,Diamond INTEGER ),4
,Connected INTEGER SidesNoCorners,1
,Connected INTEGER Corners,1
,INTEGER SidesNoCorners,1
,INTEGER Corners,1
,Connected INTEGER Sides,3
,INTEGER Sides,3
,colour INTEGER INTEGER,25
,index INTEGER lower,1
,INTEGER lower,1
,Hexagon INTEGER ),4
,Limping INTEGER ),10
,T33434 INTEGER ),5
,T3464 INTEGER ),5
,#2 INTEGER ),24
,Line INTEGER ),58
,Line INTEGER byLevel:True,3
,INTEGER byLevel:True,3
,Line INTEGER through:,3
,INTEGER through:,3
,Line INTEGER All,22
,INTEGER All,22
,Line INTEGER if:,2
,INTEGER if:,2
,tri INTEGER ),22
,} INTEGER {,11
,} INTEGER },1
,Each INTEGER ),13
,Line INTEGER <Players:player1>,1
,INTEGER <Players:player1>,1
,Rectangle INTEGER INTEGER,6
,Line INTEGER throughAny:,5
,INTEGER throughAny:,5
,Line INTEGER what:,4
,INTEGER what:,4
,P2 INTEGER (,1
,P1 INTEGER (,1
,Line INTEGER Mover,1
,INTEGER Mover,1
,Line INTEGER whats:,5
,INTEGER whats:,5
,flips INTEGER INTEGER,6
,State INTEGER ),9
,-2 INTEGER (,1
,<Tag:pieceNumber> INTEGER ),2
,Prev INTEGER ),3
,repeat INTEGER INTEGER,10
,INTEGER INTEGER step:,10
,{ INTEGER -0,8
,- INTEGER INTEGER,2
,INTEGER step:,11
,exact INTEGER ),109
,<Board> INTEGER ),12
,shift INTEGER STRING,1
,range INTEGER STRING,1
,min INTEGER ),4
,capture INTEGER pieces,1
,INTEGER pieces,1
,E INTEGER STRING,19
,W INTEGER True,19
,W INTEGER STRING,19
,E INTEGER True,19
,E INTEGER (,22
,W INTEGER (,22
,INTEGER True,42
,Copyright INTEGER --COMMA--,8
,STRING INTEGER STRING,3
,W INTEGER ),1
,E INTEGER ),1
,Note: INTEGER players,2
,( INTEGER movement,2
,+ INTEGER en,2
,= INTEGER args,2
,INTEGER --COMMA--,13
,INTEGER players,2
,INTEGER movement,2
,INTEGER en,2
,INTEGER args,2
,handSite INTEGER ),10
,ESE INTEGER STRING,4
,WNW INTEGER ),4
,WNW INTEGER STRING,4
,ESE INTEGER ),4
,pair INTEGER <BoardConfig:King2Start>,1
,pair INTEGER <BoardConfig:RookLeft2Start>,1
,pair INTEGER <BoardConfig:RookRight2Start>,1
,INTEGER <BoardConfig:King2Start>,1
,INTEGER <BoardConfig:RookLeft2Start>,1
,INTEGER <BoardConfig:RookRight2Start>,1
,S INTEGER STRING,2
,N INTEGER True,2
,N INTEGER STRING,2
,S INTEGER True,2
,S INTEGER (,2
,N INTEGER (,2
,ENE INTEGER STRING,2
,WSW INTEGER ),2
,WSW INTEGER STRING,2
,ENE INTEGER ),2
,distance INTEGER or,1
,or INTEGER of,1
,range INTEGER #1,4
,INTEGER or,1
,INTEGER of,2
,follows: INTEGER .,1
,state INTEGER (,1
,length INTEGER and,1
,has INTEGER spaces,1
,the INTEGER adjacent,1
,or INTEGER degrees,1
,Player INTEGER against,1
,Player INTEGER may,1
,Player INTEGER has,1
,--COMMA-- INTEGER ),1
,STRING INTEGER .,2
,INTEGER and,1
,INTEGER spaces,1
,INTEGER adjacent,1
,INTEGER degrees,1
,INTEGER against,1
,INTEGER may,1
,INTEGER has,1
,step INTEGER .,6
,Row INTEGER &,14
,& INTEGER (,14
,INTEGER &,14
,Row INTEGER (,24
,rectangle INTEGER <Player:size>,5
,INTEGER <Player:size>,5
,) INTEGER #1,2
,pair INTEGER <High:value>,2
,INTEGER <High:value>,2
,) INTEGER Off,2
,INTEGER Off,2
,-4 INTEGER .,1
,-1 INTEGER },1
,= INTEGER },1
,<Row:num> INTEGER ),1
,Cell INTEGER ),5
,pair INTEGER <ThrowSix:value>,1
,INTEGER <ThrowSix:value>,1
,STRING INTEGER count:76,2
,STRING INTEGER count:20,4
,STRING INTEGER count:10,4
,INTEGER count:76,2
,INTEGER count:20,4
,INTEGER count:10,4
,STRING INTEGER value:10,2
,STRING INTEGER value:9,2
,STRING INTEGER value:1,2
,INTEGER value:10,2
,INTEGER value:9,2
,INTEGER value:1,2
,range INTEGER #2,1
,--COMMA-- INTEGER depth,2
,max INTEGER (,4
,= INTEGER --COMMA--,3
,doctrines INTEGER =,1
,Damage INTEGER =,5
,) INTEGER =,1
,Multiplier INTEGER =,4
,Minimum INTEGER =,1
,< INTEGER >,32
,. INTEGER ),36
,INTEGER #2,4
,INTEGER depth,2
,INTEGER =,13
,INTEGER >,34
,Dominoes INTEGER ),1
,least INTEGER times,1
,INTEGER times,1
,<BoardSize:smallSide> INTEGER ),19
,T33336 INTEGER ),1
,Triangle INTEGER ),6
,Cost INTEGER Edge,269
,INTEGER Edge,269
,. INTEGER -,1
,INTEGER -,2
,Cost INTEGER Vertex,69
,INTEGER Vertex,69
,<NumberPlayers:inGame> INTEGER ),1
,default INTEGER for,1
,about INTEGER moves,3
,for INTEGER player,1
,Equiversi INTEGER --COMMA--,1
,Equiversi INTEGER },1
,INTEGER for,1
,INTEGER player,1
,<Default INTEGER .,1
,<DefaultAndCount INTEGER .,1
,( INTEGER -,1
,> INTEGER OK,1
,State INTEGER =,1
,= INTEGER Dead,1
,State INTEGER is,1
,= INTEGER #2,2
,- INTEGER #2,1
,adds INTEGER of,1
,#1 INTEGER (,2
,INTEGER OK,1
,INTEGER Dead,1
,T3636 INTEGER ),1
,hex INTEGER INTEGER,3
,about INTEGER --COMMA--,1
,--COMMA-- INTEGER script,1
,of INTEGER consumed,1
,le INTEGER (,2
,lt INTEGER (,3
,gt INTEGER (,2
,= INTEGER ),2
,Limping INTEGER INTEGER,1
,INTEGER script,1
,INTEGER consumed,1
,Players INTEGER INTEGER,1
,STRING INTEGER count:55,1
,INTEGER count:55,1
,+ INTEGER STRING,1
,STRING INTEGER step:,1
,<Size:pile> INTEGER ),1
,rectangle INTEGER <Size:board>,1
,Count INTEGER at:1,1
,Count INTEGER at:2,1
,Count INTEGER at:3,1
,Count INTEGER at:4,1
,Count INTEGER at:5,1
,Count INTEGER at:6,1
,Count INTEGER at:7,1
,Count INTEGER at:8,1
,Count INTEGER at:9,1
,INTEGER <Size:board>,1
,INTEGER at:1,1
,INTEGER at:2,1
,INTEGER at:3,1
,INTEGER at:4,1
,INTEGER at:5,1
,INTEGER at:6,1
,INTEGER at:7,1
,INTEGER at:8,1
,INTEGER at:9,1
,hint INTEGER INTEGER,82
,range INTEGER <Challenge:size>,1
,INTEGER <Challenge:size>,1
,-3 INTEGER .,1
,range INTEGER <Size>,1
,INTEGER <Size>,1
,Sum INTEGER ),2
,range INTEGER <Challenge:maxVal>,1
,INTEGER <Challenge:maxVal>,1
,Count INTEGER STRING,1
,INTEGER INTEGER >,2
,<692 INTEGER INTEGER,1
,<3 INTEGER INTEGER,1
,INTEGER INTEGER 2>,1
,<7 INTEGER INTEGER,2
,INTEGER INTEGER 3>,1
,<13 INTEGER INTEGER,1
,INTEGER INTEGER 4>,1
,<21 INTEGER INTEGER,1
,INTEGER INTEGER 5>,1
,INTEGER 2>,1
,INTEGER 3>,1
,INTEGER 4>,1
,INTEGER 5>,1
,<65 INTEGER INTEGER,1
,INTEGER INTEGER 20>,1
,<31 INTEGER INTEGER,1
,INTEGER INTEGER 28>,1
,<17 INTEGER INTEGER,1
,INTEGER INTEGER 88>,1
,INTEGER 20>,1
,INTEGER 28>,1
,INTEGER 88>,1
,<3 INTEGER 1>,1
,<4 INTEGER INTEGER,1
,INTEGER INTEGER 1>,6
,<5 INTEGER INTEGER,1
,<6 INTEGER INTEGER,1
,<8 INTEGER INTEGER,1
,<9 INTEGER INTEGER,1
,INTEGER 1>,7
at:9,who at:9 ),1
,Stack at:9 ),1
,at:9 ),17
,count at:9 ),2
,what at:9 ),1
,Edge at:9 ),8
,Vertex at:9 ),3
,INTEGER at:9 ),1
<center>,<start> <center> <tracks>,1
,<center> <tracks>,1
given,the given direction,1
,given direction,1
,the given colour,2
,given colour,2
<Players:store>,<Players:homes> <Players:store> kalahs,1
,<Players:store> kalahs,1
chess,3-player chess variant,1
,chess variant,1
on:Vertex,Piece on:Vertex (,1
,on:Vertex (,1
last,( last From,453
,( last To,1886
,last From,453
,last To,1886
,( last LevelTo,18
,last LevelTo,18
,the last one,1
,last one,1
,( last Between,3
,last Between,3
,the last rules,1
,last rules,1
,the last two,1
,last two,1
FirstSite,trackSite FirstSite from:,14
,trackSite FirstSite if:,3
,FirstSite from:,14
,FirstSite if:,3
,trackSite FirstSite Mover,1
,FirstSite Mover,1
,trackSite FirstSite STRING,7
,P1 FirstSite ),33
,FirstSite STRING,7
,FirstSite ),40
,P2 FirstSite ),7
<Scoring:calculation>,( <Scoring:calculation> ),1
,<Scoring:calculation> ),1
<3dSites>,<dot0> <3dSites> },1
,<3dSites> },1
Movement:,Pawn Movement: En,1
,Movement: En,1
,Piece Movement: *,1
,Movement: *,1
<Robots:num>,STRING <Robots:num> ),1
,<Robots:num> ),1
from:#1,Move from:#1 steps:,26
,from:#1 steps:,26
,Move from:#1 steps:6,6
,from:#1 steps:6,6
,Move from:#1 steps:#2,20
,from:#1 steps:#2,20
,Move from:#1 #2,43
,from:#1 #2,43
,Move from:#1 STRING,17
,from:#1 STRING,17
,STRING from:#1 if:,1
,from:#1 if:,1
,Move from:#1 steps:1,5
,from:#1 steps:1,5
,results from:#1 to:,1
,from:#1 to:,1
,directions from:#1 to:#2,1
,Cell from:#1 to:#2,4
,) from:#1 fromIncluded:True,2
,from:#1 to:#2,5
,from:#1 fromIncluded:True,2
,Direction from:#1 (,1
,from:#1 (,1
Non,) Non Captures,1
,Non Captures,1
<dice>,{ <dice> },2
,<dice> },2
,{ <dice> <movement>,1
,<dice> <movement>,1
,<size> <dice> <tracks>,1
,<dice> <tracks>,1
edges:,) edges: {,67
,edges: {,148
,} edges: {,81
joinCorners:True,rings:3 joinCorners:True ),14
,joinCorners:True ),15
,joinMidpoints:False joinCorners:True ),1
Not,? Not in,2
,Not in,2
,) Not if,1
,Not if,1
<Board:sizeHome>,STRING <Board:sizeHome> ),1
,<Board:sizeHome> ),1
These,) These are,1
,These are,1
Enter,) Enter a,2
,Enter a,2
28>,<11 28> <10,1
,28> <10,1
,INTEGER 28> STRING,1
,28> STRING,1
-108,rotate -108 (,3
,-108 (,3
playing,the playing phase,1
,playing phase,1
fixed,are fixed .,1
,fixed .,1
full,- full moves,1
,full moves,1
<site1>,{ <site1> <site2>,1
,<site1> <site2>,1
<BoardSize:smallSide>,square <BoardSize:smallSide> ),7
,<BoardSize:smallSide> ),16
,- <BoardSize:smallSide> INTEGER,15
,+ <BoardSize:smallSide> INTEGER,4
,Hexagon <BoardSize:smallSide> ),8
,<BoardSize:smallSide> INTEGER,19
,<BoardShape:gridType> <BoardSize:smallSide> ),1
to:3,from:1 to:3 colour:2,1
,from:2 to:3 colour:2,1
,to:3 colour:2,2
away,going away (,3
,away (,3
,Cells away does,1
,away does,1
,facing away from,1
,away from,1
to:1,) to:1 (,1
,to:1 (,1
,from:0 to:1 colour:1,1
,to:1 colour:1,1
to:2,) to:2 (,2
,to:2 (,2
,from:0 to:2 colour:1,1
,to:2 colour:1,1
to:0,) to:0 (,2
,to:0 (,2
impossible,be impossible to,1
,its impossible to,1
,impossible to,2
War,Of War (,1
,War (,1
<Row:tracks>,store:None <Row:tracks> ),1
,<Row:tracks> ),1
<NumberPlayers:inGame>,- <NumberPlayers:inGame> INTEGER,1
,) <NumberPlayers:inGame> ),3
,{ <NumberPlayers:inGame> (,1
,players <NumberPlayers:inGame> ),1
,<NumberPlayers:inGame> INTEGER,1
,<NumberPlayers:inGame> ),4
,<NumberPlayers:inGame> (,1
<endRule>,<promotedMove> <endRule> },1
,<endRule> },1
<PlaceDisc>,STRING <PlaceDisc> args:,1
,<PlaceDisc> args:,1
<numPlayers>,{ <numPlayers> <home>,2
,<numPlayers> <home>,2
,{ <numPlayers> <start>,1
,<numPlayers> <start>,1
,{ <numPlayers> <endScore>,1
,<numPlayers> <endScore>,1
,{ <numPlayers> <playRules>,2
,<numPlayers> <playRules>,2
,{ <numPlayers> <setupRules>,1
,<numPlayers> <setupRules>,1
,<playerMaps> <numPlayers> <boardShape>,1
,<numPlayers> <boardShape>,1
,{ <numPlayers> <rulesCommander>,1
,<numPlayers> <rulesCommander>,1
,{ <numPlayers> },5
,<numPlayers> },5
<track58>,<diceHand> <track58> <track916>,1
,<track58> <track916>,1
<entries>,<tracks> <entries> <endTracks>,1
,<entries> <endTracks>,1
,<tracks> <entries> },2
,<entries> },2
from:#3,) from:#3 (,2
,from:#3 (,2
next:False,previous:False next:False ),4
,next:False ),4
Mountain,) Mountain move,1
,Mountain move,1
before:,STRING before: (,26
,before: (,59
,between before: (,30
,Diagonal before: (,1
,) before: (,2
faces:,d:4 faces: {,5
,faces: {,6
,d:8 faces: {,1
29>,. 29> <11,1
,<10 29> STRING,1
,29> <11,1
,29> STRING,2
,. 29> <26,1
,<26 29> STRING,1
,29> <26,1
ends,game ends when,1
,game ends in,2
,ends when,1
,ends in,2
vote,( vote STRING,2
,vote STRING,2
Pawns:,) Pawns: Single,1
,Pawns: Single,1
enclose,( enclose (,11
,enclose (,11
<player2_arg>,<player1_arg> <player2_arg> ),6
,<player2_arg> ),6
<slide_dir>,<piece_key> <slide_dir> <slide_spaces>,3
,<slide_dir> <slide_spaces>,3
<enterBoard>,{ <enterBoard> <movePiece>,1
,<enterBoard> <movePiece>,1
overview,an overview --COMMA--,1
,overview --COMMA--,1
Knight2Start,> Knight2Start <,2
,Knight2Start <,2
<throwValues>,<num> <throwValues> },1
,<throwValues> },1
<Players:track>,INTEGER <Players:track> ),1
,<Players:track> ),1
<rule>,{ <rule> },14
,<rule> },14
<Columns>,STRING <Columns> args:,5
,<Columns> args:,5
,<Rows> <Columns> ),1
,<Columns> ),1
rotation,( rotation at:,4
,the rotation specified,1
,rotation at:,4
,rotation specified,1
start,( start {,673
,start {,673
,( start (,272
,start (,272
,( start <Rules:start>,1
,start <Rules:start>,1
,( start <Board:start>,6
,start <Board:start>,6
,( start <Version:start>,2
,start <Version:start>,2
,( start <Play:start>,1
,start <Play:start>,1
,I start by,1
,to start the,1
,start by,1
,start the,1
,( start <Size:piles>,1
,start <Size:piles>,1
,( start <Challenge>,7
,start <Challenge>,7
,( start <Challenge:start>,1
,start <Challenge:start>,1
<numKings>,<kingHop> <numKings> },1
,<numKings> },1
yet,list yet -,1
,yet -,1
origin:11,expand origin:11 steps:6,1
,origin:11 steps:6,1
***,) *** (,4
,*** (,4
,) *** },2
,*** },2
origin:10,expand origin:10 steps:6,1
,origin:10 steps:6,1
Rotation,Set Rotation {,2
,set Rotation (,2
,Rotation {,2
,Rotation (,3
,Set Rotation ),2
,Set Rotation (,1
,Rotation ),2
T3636,tiling T3636 INTEGER,1
,T3636 INTEGER,1
pair,( pair INTEGER,2134
,pair INTEGER,2134
,( pair P1,162
,( pair P2,163
,( pair P3,26
,( pair P4,24
,pair P1,162
,pair P2,163
,pair P3,26
,pair P4,24
,( pair P5,4
,( pair P6,4
,pair P5,4
,pair P6,4
,in pair .,1
,pair .,1
,( pair STRING,19
,pair STRING,19
,( pair P7,2
,( pair P8,2
,( pair P9,1
,( pair P10,1
,pair P7,2
,pair P8,2
,pair P9,1
,pair P10,1
,( pair (,666
,pair (,666
Rename,piece Rename piece:#1,2
,Rename piece:#1,2
equal,distance equal to,1
,equal to,1
colour,( colour LightTan,1
,( colour INTEGER,25
,colour LightTan,1
,colour INTEGER,25
,that colour available,1
,given colour when,1
,given colour is,1
,same colour ),1
,same colour as,1
,same colour that,1
,colour available,1
,colour when,1
,colour is,1
,colour ),1
,colour as,1
,colour that,1
,( colour Cream,1
,colour Cream,1
OppositeDirection,Orthogonal OppositeDirection ),6
,OppositeDirection ),10
,) OppositeDirection ),2
,) OppositeDirection (,5
,OppositeDirection (,5
,Diagonal OppositeDirection ),2
by:Friend,Occupied by:Friend STRING,4
,by:Friend STRING,4
<Players:playingTeamPieces>,) <Players:playingTeamPieces> ),1
,<Players:playingTeamPieces> ),1
<95>,STRING <95> <,2
,<95> <,2
,STRING <95> STRING,1
,<95> STRING,1
exact:True,Orthogonal exact:True ),14
,exact:True ),20
,) exact:True ),2
,N exact:True ),1
,S exact:True ),1
,E exact:True ),1
,W exact:True ),1
time,the time are,1
,time are,1
Cannot,) Cannot use,1
,Cannot use,2
,) Cannot attack,1
,Cannot attack,1
,STRING Cannot use,1
<Player:startP3P4>,) <Player:startP3P4> },1
,<Player:startP3P4> },1
Variations:,) Variations: In,1
,Variations: In,1
<Tag:pieceNumber>,- <Tag:pieceNumber> INTEGER,2
,<Tag:pieceNumber> INTEGER,2
Padshah,) Padshah (,1
,Padshah (,1
<boardRegins>,<boardShape> <boardRegins> <buildingSetup>,1
,<boardRegins> <buildingSetup>,1
Triangle,hex Triangle <Board>,4
,Triangle <Board>,4
,concentric Triangle rings:3,2
,Triangle rings:3,2
,hex Triangle INTEGER,6
,Triangle INTEGER,6
<Option>,STRING <Option> args:,1
,<Option> args:,1
Count,set Count at:,8
,Count at:,8
,set Count INTEGER,254
,Count INTEGER,254
,set Count (,1
,Count (,4
,set Count <Start:numSeeds>,2
,Count <Start:numSeeds>,2
,set Count <Counters>,1
,Count <Counters>,1
,set Count <Board:init>,1
,Count <Board:init>,1
,set Count <Players:init>,1
,Count <Players:init>,1
,set Count STRING,2
,Count STRING,2
,set Count <Size:pile>,1
,Count <Size:pile>,1
,is Count (,3
,is Count Edge,3
,Count Edge,3
,is Count Vertex,1
,Count Vertex,1
<GType:selGame>,play <GType:selGame> ),2
,<GType:selGame> ),2
distance:7,included:True distance:7 ),8
,distance:7 ),8
three,or three cells,2
,three cells,2
,move three steps,2
,to three steps,2
,three steps,4
150%,does 150% damage,1
,150% damage,1
multi,and multi player,1
,multi player,1
distance:1,included:True distance:1 ),1
,distance:1 ),7
,) distance:1 ),3
,Forward distance:1 ),3
remembered,STRING remembered suicide,1
,remembered suicide,1
,the remembered values,1
,remembered values,1
-135,rotate -135 (,1
,-135 (,1
distance:2,Forward distance:2 ),1
,distance:2 ),1
Planes,) Planes are,1
,Planes are,1
<End:rules>,) <End:rules> ),1
,<End:rules> ),1
player:Next,note player:Next STRING,4
,player:Next STRING,4
Special,) Special captures,1
,Special captures,1
options,Start options (,1
,options (,2
,Scoring options (,1
<Play:enterBoard>,{ <Play:enterBoard> (,1
,<Play:enterBoard> (,1
specifically,) specifically for,1
,specifically for,1
hex,( hex Star,2
,hex Star,2
,( hex <Board>,13
,hex <Board>,13
,( hex INTEGER,38
,hex INTEGER,38
,( hex Diamond,7
,hex Diamond,7
,( hex <Boundary:shape>,2
,hex <Boundary:shape>,2
,( hex Triangle,10
,hex Triangle,10
,( hex <Board:size>,4
,hex <Board:size>,4
,( hex Prism,1
,hex Prism,1
,( hex <Shape>,1
,hex <Shape>,1
,( hex Rectangle,6
,hex Rectangle,6
,( hex Limping,12
,hex Limping,12
,( hex (,4
,( hex Hexagon,6
,hex (,4
,hex Hexagon,6
enter,to enter again,3
,enter again,3
<Board:BoardDef>,board <Board:BoardDef> ),1
,<Board:BoardDef> ),1
<endTracks>,<entries> <endTracks> <startRules>,1
,<endTracks> <startRules>,1
Cavalry,) Cavalry (,1
,Cavalry (,1
<site3>,<site2> <site3> <site4>,1
,<site3> <site4>,1
<startingMoney>,<pieceSetup> <startingMoney> <teams>,1
,<startingMoney> <teams>,1
having,side having length,1
,having length,1
<Jump:coyote>,or <Jump:coyote> (,1
,<Jump:coyote> (,1
<Version:boardSize>,square <Version:boardSize> ),1
,<Version:boardSize> ),1
players,( players INTEGER,770
,players INTEGER,770
,( players <Players:num>,12
,players <Players:num>,12
,( players <Player:num>,27
,players <Player:num>,27
,( players <Players:numPlayers>,2
,players <Players:numPlayers>,2
,( players <Version:numPlayers>,11
,players <Version:numPlayers>,11
,( players {,115
,players {,115
,( players <Player:number>,3
,players <Player:number>,3
,( players STRING,2
,players STRING,2
,( players Team1,4
,( players Team2,1
,players Team1,4
,players Team2,1
,( players <Players>,1
,players <Players>,1
,( players <Num:players>,1
,players <Num:players>,1
,INTEGER players *,2
,players *,2
,( players <NumOfPlayers:NumPlayers>,2
,players <NumOfPlayers:NumPlayers>,2
,all players draw,1
,players draw,1
,( players <Option:players>,1
,players <Option:players>,1
,( players Friend,5
,( players <Scenario:numPlayers>,1
,players Friend,5
,players <Scenario:numPlayers>,1
,( players <NumberPlayers:inGame>,1
,players <NumberPlayers:inGame>,1
,both players use,1
,players use,1
,the players to,1
,players to,1
,swap players (,1
,players (,1
byScore,( byScore ),32
,byScore ),32
,( byScore {,110
,byScore {,110
,( byScore <Version:endScore>,1
,byScore <Version:endScore>,1
quadrant,first quadrant ),6
,quadrant ),6
<rowSize>,{ <rowSize> <CCW2>,4
,<rowSize> <CCW2>,4
<consequence>,<start> <consequence> <endRules>,1
,<consequence> <endRules>,1
cases:,Two cases: fully,1
,cases: fully,1
priority,( priority {,57
,priority {,57
,( priority (,14
,priority (,14
<Play:start>,start <Play:start> ),1
,<Play:start> ),1
<Player>,STRING <Player> args:,31
,<Player> args:,31
<Player:trackP3>,) <Player:trackP3> <Player:trackP4>,3
,<Player:trackP3> <Player:trackP4>,3
<Step>,STRING <Step> args:,1
,<Step> args:,1
<site2>,<site1> <site2> <site3>,1
,<site2> <site3>,1
Site,forEach Site (,266
,Site (,266
,forEach Site STRING,4
,Site STRING,4
,forEach Site #1,1
,Site #1,1
,arg: Site of,1
,Site of,1
,forEach Site capture,1
,Site capture,1
'diagonally',space 'diagonally' (,1
,'diagonally' (,1
if:<PlaceDisc:location>,<PlaceDisc:suicideOption> if:<PlaceDisc:location> ),1
,if:<PlaceDisc:location> ),1
Scoring,Scoring options,1
explicity,counted explicity Update,1
,explicity Update,1
layer,( layer of:,6
,layer of:,6
at:StartOfMove,) at:StartOfMove ),3
,at:StartOfMove ),3
lot,a lot ),1
,lot ),1
Soldier,) Soldier (,6
,Soldier (,6
<Player:trackP4>,<Player:trackP3> <Player:trackP4> },3
,<Player:trackP4> },3
<Board:initTiger>,STRING <Board:initTiger> ),1
,<Board:initTiger> ),1
<MiddleTrack>,<HomeTrack2> <MiddleTrack> <EnemyTrack1>,1
,<MiddleTrack> <EnemyTrack1>,1
<50>,STRING <50> <,3
,<50> <,3
,STRING <50> STRING,3
,<50> STRING,4
,3> <50> STRING,1
<site5>,<site4> <site5> <site6>,1
,<site5> <site6>,1
<removeP3>,<showHandP3> <removeP3> <endP3>,1
,<removeP3> <endP3>,1
sites:86,turns:5 sites:86 ),3
,sites:86 ),3
means,--COMMA-- means its,2
,means its,2
sites:88,turns:5 sites:88 ),1
,sites:88 ),1
initial,the initial state,2
,initial state,2
,the initial move,1
,initial move,1
<Forwards>,STRING <Forwards> STRING,1
,<Forwards> STRING,1
unify,can unify and,1
,unify and,1
centre,the centre (,1
,centre (,1
<Board:start>,{ <Board:start> },2
,<Board:start> },3
,rules <Board:start> (,2
,<Board:start> (,2
,rules <Board:start> phases:,2
,<Board:start> phases:,2
,) <Board:start> },1
,start <Board:start> ),6
,<Board:start> ),6
PipsMatch,is PipsMatch ),1
,PipsMatch ),1
from:19,Direction from:19 E,1
,from:19 E,1
from:1>,loops:3 from:1> <,1
,from:1> <,1
coord:<BoardConfig:King2Start>,STRING coord:<BoardConfig:King2Start> state:1,1
,coord:<BoardConfig:King2Start> state:1,1
<Board:InitTwoSeeds>,STRING <Board:InitTwoSeeds> ),1
,<Board:InitTwoSeeds> ),1
<Column:size>,INTEGER <Column:size> store:None,1
,<Column:size> store:None,1
<site4>,<site3> <site4> <site5>,1
,<site4> <site5>,1
choice,first choice (,1
,second choice -,1
,third choice (,1
,choice (,2
,choice -,1
<Player:teams>,) <Player:teams> },1
,<Player:teams> },2
,{ <Player:teams> },1
steps:5,Move steps:5 ),1
,steps:5 ),5
,) steps:5 S,1
,) steps:5 N,2
,steps:5 S,1
,steps:5 N,2
,#1 steps:5 ),2
,) steps:5 ),2
,) steps:5 W,2
,) steps:5 E,2
,steps:5 W,2
,steps:5 E,2
small,some small functions,1
,small functions,1
steps:6,from:#1 steps:6 ),6
,steps:6 ),29
,Move steps:6 ),1
,) steps:6 N,1
,) steps:6 S,1
,steps:6 N,1
,steps:6 S,1
,origin:1 steps:6 Out,1
,origin:0 steps:6 Out,1
,origin:2 steps:6 Out,1
,origin:3 steps:6 Out,1
,origin:4 steps:6 Out,1
,origin:5 steps:6 Out,1
,origin:6 steps:6 Out,1
,origin:7 steps:6 Out,1
,origin:8 steps:6 Out,1
,origin:9 steps:6 Out,1
,origin:10 steps:6 Out,1
,origin:11 steps:6 Out,1
,steps:6 Out,12
,#1 steps:6 ),6
,) steps:6 ),16
,) steps:6 W,2
,) steps:6 E,2
,steps:6 W,2
,steps:6 E,2
steps:3,) steps:3 ),78
,steps:3 ),85
,Move steps:3 ),1
,) steps:3 Orthogonal,2
,steps:3 Orthogonal,2
,) steps:3 S,2
,) steps:3 N,2
,steps:3 S,2
,steps:3 N,2
,) steps:3 W,3
,) steps:3 E,3
,steps:3 W,3
,steps:3 E,3
,#1 steps:3 ),2
,) steps:3 #1,2
,steps:3 #1,2
,) steps:3 STRING,2
,steps:3 STRING,2
,origin:181 steps:3 ),1
,origin:191 steps:3 ),1
,origin:174 steps:3 ),1
,origin:0 steps:3 ),1
steps:4,) steps:4 ),43
,steps:4 ),50
,Move steps:4 ),1
,) steps:4 Orthogonal,2
,steps:4 Orthogonal,2
,#1 steps:4 ),6
,) steps:4 N,1
,steps:4 N,1
,) steps:4 W,1
,) steps:4 E,1
,steps:4 W,1
,steps:4 E,1
<numSides:6>,> <numSides:6> STRING,2
,<numSides:6> STRING,2
steps:9,) steps:9 ),2
,steps:9 ),2
before,moved before .,1
,displayed before the,1
,before .,1
,before the,1
,needed before checking,1
,before checking,1
steps:7,#1 steps:7 ),2
,steps:7 ),2
,) steps:7 W,2
,) steps:7 E,2
,steps:7 W,2
,steps:7 E,2
<directionP2>,<directionP1> <directionP2> <stores>,1
,<directionP2> <stores>,1
friendly,No friendly hops,1
,friendly hops,1
,a friendly piece,1
,on friendly neighbors,1
,friendly piece,1
,friendly neighbors,1
steps:8,) steps:8 E,1
,steps:8 E,1
,#1 steps:8 ),6
,steps:8 ),18
,) steps:8 N,1
,steps:8 N,1
,) steps:8 Orthogonal,2
,steps:8 Orthogonal,2
,) steps:8 ),12
possession,takes possession of,1
,possession of,1
Cream,colour Cream ),1
,Cream ),1
Update,explicity Update own,1
,Update own,1
his,than his own,1
,his own,1
shows,- shows in,1
,STRING shows as,1
,shows in,1
,shows as,1
zone,target zone (,1
,Transit zone from,1
,zone (,1
,zone from,1
<Tiling:tile>,tile <Tiling:tile> Each,2
,<Tiling:tile> Each,2
checked,--COMMA-- checked at,1
,checked at,1
consider,to consider (,1
,consider (,1
speeds,them speeds up,1
,speeds up,1
Core,) Core -------------------------------------------------------,1
,Core -------------------------------------------------------,1
Who,Hidden Who at:,2
,What Who },2
,Who at:,2
,Who },2
<BoardShape:directionUsed>,STRING <BoardShape:directionUsed> ),2
,<BoardShape:directionUsed> ),2
Opposite,) Opposite Quadrant,4
,Opposite Quadrant,4
mover/own,a mover/own singleton,1
,mover/own singleton,1
<directionP1>,{ <directionP1> <directionP2>,1
,<directionP1> <directionP2>,1
Queen,to Queen .,2
,Queen .,2
,( Queen --COMMA--,1
,Queen --COMMA--,1
logically,something logically equivalent,1
,logically equivalent,1
it's,implements it's own,1
,it's own,1
Handles,#1 Handles the,1
,Handles the,1
<inGame>,{ <inGame> },1
,<inGame> },1
Leap,move Leap STRING,104
,Leap STRING,104
,move Leap (,3
,Leap (,3
,move Leap {,4
,Leap {,4
,move Leap #1,1
,Leap #1,1
water,on water (,1
,water (,2
,the water first,1
,water first,1
,Forest/Shallow water move,1
,in water ),1
,in water (,1
,water move,1
,water ),1
done,captures done so,1
,capture done so,3
,done so,4
,is done twice,1
,done twice,1
illegal,is illegal to,1
,illegal to,1
<endP3>,<removeP3> <endP3> },1
,<endP3> },1
square,( square INTEGER,452
,square INTEGER,452
,( square <Board>,9
,square <Board>,9
,( square <Board:size>,13
,square <Board:size>,13
,( square (,1
,square (,1
,( square <BoardSize:smallSide>,7
,square <BoardSize:smallSide>,7
,( square Diamond,1
,square Diamond,1
,( square <Tag:boardSize>,1
,square <Tag:boardSize>,1
,( square STRING,1
,square STRING,1
,odd square diagonal,1
,square diagonal,1
,( square <Challenge:size>,5
,square <Challenge:size>,5
,( square <Size>,2
,square <Size>,2
,9x9 square .,4
,Middle square .,1
,square .,5
,( square <Version:boardSize>,1
,square <Version:boardSize>,1
twice,done twice .,1
,twice .,1
<location>,{ <location> <suicideOption>,1
,<location> <suicideOption>,1
Flat,is Flat ),12
,is Flat (,1
,Flat ),12
,Flat (,1
<Variants:pieOrNot>,<Variants:starting> <Variants:pieOrNot> (,1
,<Variants:pieOrNot> (,1
<site6>,<site5> <site6> <sites>,1
,<site6> <sites>,1
steps:1,) steps:1 ),42
,steps:1 ),114
,Move steps:1 ),3
,#1 steps:1 ),8
,STRING steps:1 ),39
,#2 steps:1 ),17
,) steps:1 E,3
,) steps:1 W,3
,steps:1 E,3
,steps:1 W,3
,from:#1 steps:1 ),5
,) steps:1 #1,1
,) steps:1 #2,1
,steps:1 #1,1
,steps:1 #2,1
steps:2,) steps:2 ),168
,steps:2 ),181
,Move steps:2 ),1
,STRING steps:2 ),6
,) steps:2 E,15
,) steps:2 W,15
,steps:2 E,15
,steps:2 W,15
,#1 steps:2 ),6
,) steps:2 #1,3
,) steps:2 #2,2
,steps:2 #1,3
,steps:2 #2,2
,) steps:2 STRING,2
,steps:2 STRING,2
,) steps:2 Forward,1
,steps:2 Forward,1
,) steps:2 N,1
,) steps:2 S,1
,steps:2 N,1
,steps:2 S,1
Win,P1 Win ),218
,Win ),1097
,P2 Win ),182
,Mover Win ),573
,TeamMover Win ),20
,P3 Win ),10
,P4 Win ),9
,Player Win ),6
,Next Win ),23
,Team1 Win ),4
,Team2 Win ),4
,<Players:player2> Win ),1
,<Players:player1> Win ),1
,#1 Win ),1
,P5 Win ),6
,P6 Win ),6
,P7 Win ),5
,P8 Win ),5
,P9 Win ),4
,P10 Win ),4
,P11 Win ),3
,P12 Win ),3
,P13 Win ),2
,P14 Win ),2
,P15 Win ),1
,P16 Win ),1
,<Result> Win ),2
,All Win ),1
<Edge:controlType>,( <Edge:controlType> ),1
,<Edge:controlType> ),1
LastSite,P2 LastSite ),33
,LastSite ),40
,P1 LastSite ),7
vertically,oriented vertically .,1
,vertically .,1
Friendly,STRING Friendly Hops,1
,Friendly Hops,1
<numSides:4>,> <numSides:4> STRING,2
,<numSides:4> STRING,2
wagon,bridge wagon (,1
,wagon (,1
values,( values Remembered,169
,values Remembered,169
,remembered values and,1
,values and,1
,( values Cell,16
,values Cell,16
,( values Vertex,2
,values Vertex,2
,( values Edge,1
,values Edge,1
their,on their next,1
,their next,1
,from their current,1
,from their starting,1
,keep their direction,1
,their current,1
,their starting,1
,their direction,1
Forget,( Forget ),1
,Forget ),1
boards,even boards ),1
,boards ),1
<south>,<north> <south> <east>,1
,<south> <east>,1
Cost,= Cost Multiplier,1
,Cost Multiplier,1
,set Cost INTEGER,338
,Cost INTEGER,338
<BoardShape:directionsWin>,) <BoardShape:directionsWin> (,2
,<BoardShape:directionsWin> (,2
point,starting point if,3
,point if,3
notches,no notches (,2
,with notches up,1
,notches (,2
,notches up,1
<BoardConfig:Bishop2Start>,STRING <BoardConfig:Bishop2Start> ),1
,<BoardConfig:Bishop2Start> ),1
Kings,many Kings the,1
,the Kings they,1
,Kings -------------------------------------------------------,1
,Kings the,1
,Kings they,1
,than Kings and,1
,* Kings can,1
,Kings and,1
,Kings can,1
<number>,{ <number> <init>,3
,<number> <init>,3
,{ <number> },1
,<number> },1
splitCrossings,( splitCrossings (,7
,splitCrossings (,7
<Goat>,STRING <Goat> args:,2
,<Goat> args:,2
count:<Board:initTiger>,) count:<Board:initTiger> ),1
,count:<Board:initTiger> ),1
process,hopping process .,1
,process .,1
restore,to restore the,1
,restore the,1
built,is built in,1
,built in,1
afterConsequence:True,To afterConsequence:True ),92
,afterConsequence:True ),93
,From afterConsequence:True ),1
<numSides:3>,> <numSides:3> STRING,2
,<numSides:3> STRING,2
<nonMover>,{ <nonMover> <mover>,1
,<nonMover> <mover>,1
Fil,) Fil (,1
,Fil (,1
Only,) Only if,1
,Only if,1
,<Capture:ruleSecondCapture> Only one,1
,Only one,1
,) Only the,1
,Only the,1
,STRING Only available,1
,Only available,1
<Place>,STRING <Place> args:,1
,<Place> args:,1
<homeTracks>,<start> <homeTracks> <openingRegions>,1
,<homeTracks> <openingRegions>,1
Bar,) Bar (,12
,Bar (,12
marking,Orthogonal marking affects,1
,marking affects,1
third,) third choice,1
,third choice,1
build,to build the,1
,build the,1
,can't build entrenchment,1
,build entrenchment,1
Single,Pawns: Single step,1
,Single step,1
CCW,CW CCW ),2
,) CCW ),2
,CCW ),4
neither,when neither the,1
,neither the,1
lud,. lud --COMMA--,9
,. lud -,38
,lud --COMMA--,9
,lud -,38
<55>,STRING <55> <,2
,<55> <,2
,STRING <55> STRING,1
,<55> STRING,1
notched,the notched die,1
,notched die,1
,the notched stick,1
,notched stick,1
Visited,is Visited (,14
,Visited (,14
<smallSide>,{ <smallSide> },8
,<smallSide> },8
been,already been captured,1
,been captured,1
Left,sites Left ),138
,Left ),140
,P1 Left Holes,1
,P2 Left Holes,1
,Left Holes,2
,P1 Left home,1
,P2 Left home,1
,Left home,2
,STRING Left STRING,2
,Left STRING,2
,STRING Left ),2
<OuterRing:extraBoardSize>,<Size:boardHeight> <OuterRing:extraBoardSize> ),1
,<Size:boardWidth> <OuterRing:extraBoardSize> ),1
,<OuterRing:extraBoardSize> ),2
fillColour:,STRING fillColour: (,8
,fillColour: (,8
at:<End:site1>,Stack at:<End:site1> ),1
,at:<End:site1> ),1
That's,. That's why,1
,That's why,1
advance,can advance with,1
,never advance more,1
,advance with,1
,advance more,1
path,( path from:0,2
,( path from:1,1
,( path from:2,1
,path from:0,2
,path from:1,1
,path from:2,1
<Board:CW1>,STRING <Board:CW1> loop:True,2
,<Board:CW1> loop:True,2
<10><1>,STRING <10><1> STRING,1
,<10><1> STRING,1
trim,( trim <Board:type>,2
,trim <Board:type>,2
<Balance>,) <Balance> ),1
,STRING <Balance> args:,1
,<Balance> ),1
,<Balance> args:,1
record,to record which,1
,record which,1
Lion,Each Lion capturing,1
,Lion capturing,1
<promotedCaptureMove>,{ <promotedCaptureMove> <promotedMove>,1
,<promotedCaptureMove> <promotedMove>,1
<trackCW1>,<trackCCW2> <trackCW1> <trackCW2>,1
,<trackCW1> <trackCW2>,1
jump,can jump an,1
,jump an,1
,move jump to,11
,jump to,11
<Start:numSeeds>,Count <Start:numSeeds> to:,2
,<Start:numSeeds> to:,2
diagonals:Radiating,INTEGER diagonals:Radiating ),1
,diagonals:Radiating ),1
happen,Spartans happen to,1
,they happen to,1
,happen to,2
T31212>,<tiling T31212> STRING,1
,T31212> STRING,1
Kúnax,) Kúnax (,1
,Kúnax (,1
7-8,Hex 7-8 variants:,1
,7-8 variants:,1
centrePoint,( centrePoint ),170
,centrePoint ),170
apply:<Capture:type>,) apply:<Capture:type> ),3
,apply:<Capture:type> ),3
<challenge:limit>,) <challenge:limit> ),2
,= <challenge:limit> (,2
,<challenge:limit> ),2
,<challenge:limit> (,2
pass,( pass ),3
,pass ),3
,and pass conditions,1
,double pass test,1
,pass conditions,1
,pass test,1
going,in going away,3
,going away,3
Palace,the Palace (,1
,Palace (,1
at:<End:site2>,Stack at:<End:site2> ),1
,at:<End:site2> ),1
to:All,STRING to:All ),8
,to:All ),10
,Hidden to:All ),1
,False to:All ),1
of:P4,Control of:P4 by:Mover,1
,of:P4 by:Mover,1
whose,subgame whose supergame,1
,cell whose supergame,1
,whose supergame,2
of:P3,Control of:P3 by:Mover,1
,of:P3 by:Mover,1
of:P2,Control of:P2 by:Mover,1
,of:P2 by:Mover,1
<Doctrine2:doctrine>,mapEntry <Doctrine2:doctrine> #2,1
,<Doctrine2:doctrine> #2,1
of:P1,Control of:P1 by:Mover,1
,of:P1 by:Mover,1
Line,is Line INTEGER,183
,Line INTEGER,183
,is Line <Board:size>,1
,Line <Board:size>,1
,is Line (,3
,Line (,3
,is Line <Line:size>,1
,Line <Line:size>,1
<Num:row>,STRING <Num:row> ),1
,<Num:row> ),1
<Board:CW2>,STRING <Board:CW2> loop:True,2
,<Board:CW2> loop:True,2
<num>,{ <num> },27
,<num> },27
,{ <num> <move>,1
,<num> <move>,1
,{ <num> <arc3>,1
,<num> <arc3>,1
,{ <num> <startP3P4>,1
,<num> <startP3P4>,1
,{ <num> <tracks>,2
,<num> <tracks>,2
,{ <num> <home>,1
,<num> <home>,1
,{ <num> <startP3>,3
,<num> <startP3>,3
,{ <num> <start>,12
,<num> <start>,12
,{ <num> <init>,1
,<num> <init>,1
,{ <num> <regions>,1
,<num> <regions>,1
,{ <num> <teams>,2
,<num> <teams>,2
,{ <num> <startPos>,1
,<num> <startPos>,1
,{ <num> <startRules>,1
,<num> <startRules>,1
,{ <num> <initHorse>,1
,<num> <initHorse>,1
,{ <num> <track>,2
,<num> <track>,2
,{ <num> <store>,1
,<num> <store>,1
,{ <num> <size>,5
,<num> <size>,5
,{ <num> <end>,1
,<num> <end>,1
,{ <num> <throwValues>,1
,<num> <throwValues>,1
,{ <num> <board>,1
,<num> <board>,1
Note,. Note that,1
,Note that,1
<Stack>,STRING <Stack> args:,2
,<Stack> args:,2
<ChosenHop>,STRING <ChosenHop> args:,1
,<ChosenHop> args:,1
<king_spaces>,<king_dir> <king_spaces> <rook_side>,6
,<king_spaces> <rook_side>,6
Ruleset,{ Ruleset To,9
,Ruleset To,9
Equi,default Equi },1
,) Equi (,1
,**** Equi Equiversi,1
,Equi },1
,Equi (,1
,Equi Equiversi,1
handSite,( handSite P1,415
,handSite P1,415
,( handSite Mover,644
,handSite Mover,644
,( handSite P2,373
,handSite P2,373
,( handSite Next,49
,handSite Next,49
,( handSite (,54
,handSite (,54
,( handSite P3,90
,( handSite P4,84
,handSite P3,90
,handSite P4,84
,( handSite P5,52
,( handSite P6,51
,handSite P5,52
,handSite P6,51
,( handSite #2,7
,handSite #2,7
,( handSite P7,43
,( handSite P8,42
,( handSite P9,34
,( handSite P10,33
,( handSite P11,26
,( handSite P12,25
,( handSite P13,17
,( handSite P14,16
,( handSite P15,9
,( handSite P16,8
,handSite P7,43
,handSite P8,42
,handSite P9,34
,handSite P10,33
,handSite P11,26
,handSite P12,25
,handSite P13,17
,handSite P14,16
,handSite P15,9
,handSite P16,8
,( handSite #1,56
,handSite #1,56
,( handSite Shared,60
,handSite Shared,60
,( handSite Player,3
,handSite Player,3
,( handSite INTEGER,10
,handSite INTEGER,10
on:Edge,by:Shared on:Edge ),3
,on:Edge ),12
,Piece on:Edge (,1
,on:Edge (,1
,by:Neutral on:Edge ),4
,by:Mover on:Edge ),2
,STRING on:Edge ),1
,by:All on:Edge ),1
,by:Next on:Edge ),1
Set,move Set NextPlayer,3
,Set NextPlayer,3
,move Set Rotation,5
,Set Rotation,5
stepwise,in stepwise connections,1
,stepwise connections,1
Promoted,) Promoted Pawn,8
,) Promoted Silver,7
,) Promoted Rook,7
,) Promoted Bishop,7
,Promoted Pawn,8
,Promoted Silver,7
,Promoted Rook,7
,Promoted Bishop,7
,) Promoted Knight,5
,) Promoted Lance,5
,Promoted Knight,5
,Promoted Lance,5
Todo:,) Todo: to,1
,Todo: to,1
hop,( hop (,34
,hop (,34
,Hop hop not,1
,hop not,1
,a hop move,2
,hop move,2
,individual hop and,1
,previous hop .,1
,hop and,1
,hop .,1
renumber,( renumber (,1
,renumber (,1
,( renumber Cell,1
,renumber Cell,1
manouvre,castling manouvre #1,1
,manouvre #1,1
maxState:100,) maxState:100 ),2
,maxState:100 ),2
,) maxState:100 maxValue:10000,1
,maxState:100 maxValue:10000,1
<next>,<mover> <next> },1
,<next> },1
how,on how many,1
,how many,1
<qtyMax>,{ <qtyMax> },1
,<qtyMax> },1
Propose,move Propose STRING,14
,Propose STRING,14
<Track:directionP2>,STRING <Track:directionP2> loop:True,1
,<Track:directionP2> loop:True,1
blocking,Brusky blocking rule:,1
,blocking rule:,1
Sets,Entrenchments Sets the,1
,Sets the,1
<regionsP1>,<type> <regionsP1> <regionsP2>,1
,<regionsP1> <regionsP2>,1
Paths,- Paths #3,1
,Paths #3,1
<Columns:num>,<Rows:num> <Columns:num> ),4
,<Columns:num> ),4
Siegmund,by Siegmund Wellisch,1
,STRING Siegmund STRING,1
,Siegmund Wellisch,1
,Siegmund STRING,1
<10>,STRING <10> STRING,80
,<10> STRING,81
,<9> <10> <11>,1
,<10> <11>,1
,STRING <10> <3>,1
,<10> <3>,1
,<6> <10> <2>,1
,<10> <2>,1
,STRING <10> <,14
,<10> <,14
,<5> <10> STRING,1
,STRING <10> <20>,1
,<10> <20>,1
,STRING <10> <25>,5
,<10> <25>,5
mine,of mine .,2
,mine .,2
<Board:placement>,{ <Board:placement> },1
,<Board:placement> },1
<trackCW2>,<trackCW1> <trackCW2> },1
,<trackCW2> },1
<Boundary>,STRING <Boundary> args:,2
,<Boundary> args:,2
<tile>,<type> <tile> <numSides>,2
,<tile> <numSides>,2
step:,INTEGER step: {,11
,step: {,11
dots,neutral dots to,1
,dots to,1
Diagonals,Rows Diagonals },1
,Diagonals },1
items:<Player:init>,Stack items:<Player:init> (,1
,items:<Player:init> (,1
,Stack items:<Player:init> Edge,1
,items:<Player:init> Edge,1
,Stack items:<Player:init> INTEGER,2
,items:<Player:init> INTEGER,2
Columns,count Columns ),5
,Columns ),5
,{ Columns Rows,10
,Columns Rows,10
<Row:singleHoles>,{ <Row:singleHoles> },1
,<Row:singleHoles> },1
right,diagonally right --COMMA--,2
,or right two,2
,right --COMMA--,2
,right two,2
,half right inner,2
,right inner,2
,P1 right half,1
,P2 right half,1
,right half,2
,or right of,1
,right of,1
,Bottom right 9x9,1
,right 9x9,1
possible,not possible to,1
,possible to,1
,the possible post-promotion,1
,possible post-promotion,1
#1,Hop #1 #2,7
,#1 #2,136
,exact #1 ),2
,#1 ),704
,STRING #1 ),215
,) #1 (,10
,Hop #1 (,22
,Step #1 (,48
,#1 (,454
,from #1 ),54
,Score #1 (,3
,Mover #1 ),13
,= #1 Off,16
,#1 Off,16
,to #1 STRING,5
,) #1 ),86
,#1 STRING,126
,Move #1 #2,12
,Remove #1 ),2
,sites #1 STRING,78
,score #1 (,7
,mapEntry #1 ),41
,= #1 End,1
,In #1 (,59
,#1 End,1
,Move #1 steps:,10
,#1 steps:,10
,Move #1 steps:#2,27
,#1 steps:#2,32
,#2 #1 ),1
,- #1 INTEGER,3
,#1 INTEGER,68
,STRING #1 #2,71
,) #1 Bear,3
,rules #1 Starting,1
,Move #1 STRING,1
,#1 Bear,3
,#1 Starting,1
,= #1 P1,6
,= #1 P2,1
,= #1 P3,1
,#1 P1,7
,#1 P2,2
,#1 P3,2
,Var #1 ),2
,STRING #1 (,15
,sites #1 ),67
,) #1 -,25
,piece #1 #2,1
,STRING #1 STRING,6
,#1 -,29
,Move #1 steps:1,6
,#1 steps:1,8
,Around #1 Orthogonal,2
,result #1 #2,1
,#1 Orthogonal,18
,if #1 (,1
,. #1 =,1
,) #1 =,2
,#1 =,3
,) #1 steps:#2,5
,to #1 if:<Variant:moveCondition>,1
,Empty #1 ),3
,#1 if:<Variant:moveCondition>,1
,P3 #1 ),1
,P1 #1 ),1
,P4 #1 ),1
,P2 #1 ),1
,= #1 INTEGER,9
,to #1 <Play:capture>,1
,#1 <Play:capture>,1
,Mover #1 from:,2
,#1 from:,2
,INTEGER #1 ),37
,if #1 STRING,1
,handSite #1 ),56
,- #1 (,9
,+ #1 (,9
,- #1 STRING,14
,+ #1 STRING,14
,= #1 (,169
,STRING #1 unique:True,2
,#1 unique:True,2
,sow #1 if:,1
,#1 if:,9
,id #1 ),12
,) #1 steps:1,2
,) #1 steps:2,5
,) #1 steps:3,2
,) #1 steps:4,6
,) #1 steps:5,2
,) #1 steps:6,6
,) #1 steps:7,2
,) #1 steps:8,6
,#1 steps:2,6
,#1 steps:3,2
,#1 steps:4,6
,#1 steps:5,2
,#1 steps:6,6
,#1 steps:7,2
,#1 steps:8,6
,) #1 INTEGER,53
,Move #1 steps:2,1
,Player #1 ),1
,from #1 if:,4
,is #1 (,2
,Around #1 ),11
,INTEGER #1 #1,12
,#1 #1 },12
,* #1 #1,4
,#1 #1 ),4
,{ #1 (,2
,#1 #1,16
,#1 },16
,to #1 (,2
,Side #1 ),1
,#1 --COMMA--,1
,Orthogonal #1 ),4
,Orthogonal #1 min:3,2
,Orthogonal #1 min:5,1
,#1 min:3,2
,#1 min:5,1
,sites #1 #2,1
,) #1 #2,9
,coord #1 ),3
,Select #1 (,2
,steps:2 #1 ),3
,steps:3 #1 ),2
,} #1 ),1
,Different #1 if:,1
,STRING #1 UNE,2
,STRING #1 USE,1
,STRING #1 USW,1
,#1 UNE,2
,#1 USE,1
,#1 USW,1
,between #1 (,1
,to #1 ),2
,custodial #1 Orthogonal,5
,Hop #1 Orthogonal,8
,STRING #1 if:,1
,Step #1 Orthogonal,2
,ahead #1 #2,4
,Hop #1 Diagonal,5
,#1 Diagonal,5
,between #1 #2,6
,Pieces #1 ),2
,mapEntry #1 (,49
,Pieces #1 STRING,6
,STRING #1 Next,2
,#1 Next,2
,directions #1 ),8
,Slide #1 (,20
,steps:1 #1 ),1
,) #1 Mover,7
,#1 Mover,8
,piece #1 ),3
,Step #1 Forward,1
,#1 Forward,1
,Piece #1 ),5
,Active #1 ),6
,Leap #1 (,1
,Promote #1 (,4
,( #1 ),36
,------------------------------------------------------- #1 -,2
,. #1 -,1
,manouvre #1 -,1
,id #1 P1,1
,id #1 P2,1
,id #1 P3,1
,Slide #1 #2,3
,Pieces #1 in:,3
,result #1 Loss,1
,#1 in:,3
,#1 Loss,1
,State #1 #2,18
,) #1 },3
,tile #1 Each,1
,to:Mover #1 ),1
,result #1 Win,1
,#1 Each,1
,#1 Win,1
,where #1 Mover,1
,> #1 (,1
,Vertex #1 ),1
,Edge #1 ),1
,Cell #1 ),1
,STRING #1 Vertex,1
,STRING #1 Cell,1
,STRING #1 Edge,1
,#1 Vertex,1
,#1 Cell,1
,#1 Edge,1
,{ #1 #2,2
,site #1 (,1
,by #1 (,1
,site #1 from,1
,site #1 is,1
,in #1 (,1
,{ #1 },1
,Site #1 (,1
,) #1 previous:False,1
,#1 from,1
,#1 is,1
,#1 previous:False,1
,range #1 #2,1
,Damage #1 location,1
,* #1 (,1
,damage #1 location,1
,container:1 #1 ),1
,#1 location,2
,Sites #1 if:,2
,array #1 ),1
,Around #1 STRING,1
,) #1 stop:,5
,#1 stop:,5
,( #1 (,2
,Cell #1 Orthogonal,1
,Value #1 (,4
,Remembered #1 ),7
,STRING #1 INTEGER,2
,) #1 Handles,1
,#1 Handles,1
,place #1 (,6
,copy:True #1 (,1
,amount #1 ),1
,addScore #1 INTEGER,1
,<Minotaur:move> #1 ),1
,score #1 ),1
<Players:showHandP3>,) <Players:showHandP3> },1
,<Players:showHandP3> },1
#2,#1 #2 (,15
,#2 (,208
,STRING #2 ),28
,) #2 (,41
,#2 ),272
,#1 #2 steps:#3,11
,{ #2 },1
,#2 steps:#3,19
,#2 },6
,) #2 ),127
,from:#1 #2 steps:#3,8
,Track #2 #1,1
,#2 #1,1
,#1 #2 STRING,20
,#1 #2 ),50
,{ #2 Trap,1
,STRING #2 #4,1
,{ #2 (,1
,#2 STRING,21
,#2 Trap,1
,#2 #4,5
,sites #2 ),1
,region #2 -,4
,= #2 (,2
,) #2 },2
,piece #2 -,1
,player #2 -,1
,#2 -,14
,sites #2 STRING,1
,handSite #2 ),2
,result #2 #3,1
,#2 #3,32
,site #2 =,1
,#2 =,2
,between #2 if:,1
,#2 if:,10
,from:#1 #2 steps:1,17
,#2 steps:1,17
,Move #2 steps:,1
,#2 steps:,1
,to #2 ),2
,to #2 (,1
,In #2 (,138
,sow #2 owner:,1
,#2 owner:,1
,from:#1 #2 #3,9
,from:#1 #2 ),9
,sow #2 if:,2
,apply #2 ),1
,--COMMA-- #2 -,1
,Side #2 ),1
,- #2 INTEGER,1
,#2 INTEGER,24
,STRING #2 -,2
,coord #2 ),3
,steps:2 #2 ),2
,( #2 ),17
,) #2 #3,7
,ahead #2 #3,2
,STRING #2 #3,2
,between #2 #3,7
,#1 #2 if:,6
,directions #2 ),8
,#1 #2 #3,4
,steps:1 #2 ),1
,player #2 ),4
,} #2 ),1
,explicitly #2 -,1
,direction #2 -,2
,Directions #2 -,1
,STRING #2 (,1
,#1 #2 INTEGER,18
,Move #2 steps:#1,1
,#2 steps:#1,1
,Name #2 -,1
,Each #2 (,1
,then #2 ),1
,Mover #2 ),2
,remove #2 (,1
,#1 #2 },3
,site #2 (,2
,--COMMA-- #2 =,1
,id #2 ),1
,Value #2 (,3
,INTEGER #2 ),4
,Occupied #2 components:#3,1
,#1 #2 #5,3
,piece #2 site,1
,piece #2 location,1
,to #2 if:,1
,<Doctrine1:doctrine> #2 ),1
,<Doctrine2:doctrine> #2 ),1
,<Doctrine3:doctrine> #2 ),1
,<Doctrine4:doctrine> #2 ),1
,#2 components:#3,1
,#2 #5,3
,#2 site,1
,#2 location,1
,between #2 ),1
,intersection #2 (,1
,le #2 (,1
,) #2 stop:,4
,#2 stop:,4
,Cell #2 W,1
,Cell #2 E,1
,Cell #2 WSW,1
,Cell #2 ENE,1
,Cell #2 SSW,1
,Cell #2 NNE,1
,Cell #2 S,1
,Cell #2 N,1
,Cell #2 SSE,1
,Cell #2 NNW,1
,Cell #2 Orthogonal,1
,#1 #2 #4,4
,#2 W,1
,#2 E,1
,#2 WSW,1
,#2 ENE,1
,#2 SSW,1
,#2 NNE,1
,#2 S,1
,#2 N,1
,#2 SSE,1
,#2 NNW,1
,#2 Orthogonal,1
,not #2 ),1
,Empty #2 ),1
,between #2 if:True,1
,#2 if:True,1
,handSite #2 INTEGER,5
,#1 #2 column,1
,#1 #2 row,1
,#2 column,1
,#2 row,1
Starchess,Starchess Copyright,1
#3,) #3 ),21
,#3 ),96
,) #3 Bear,1
,STRING #3 #4,11
,#3 Bear,1
,#3 #4,17
,region #3 -,1
,STRING #3 ),7
,) #3 -,2
,sites #3 ),6
,#3 -,4
,#2 #3 ),22
,Backward #3 =,1
,#3 =,1
,) #3 optional,1
,) #3 },1
,#3 optional,1
,#3 },1
,coord #3 ),3
,from #3 ),3
,#2 #3 if:,4
,#3 if:,4
,exact #3 ),27
,#2 #3 #4,6
,directions #3 ),1
,Paths #3 -,1
,piece #3 Each,1
,id #3 Mover,1
,#3 Each,1
,#3 Mover,1
,( #3 ),6
,) #3 location,1
,attacked #3 If,1
,if #3 (,1
,#3 location,1
,#3 If,1
,#3 (,4
,In #3 (,1
,sites #3 (,2
,( #3 of:#1,3
,( #3 of:#2,3
,( #3 of:,4
,#3 of:#1,3
,#3 of:#2,3
,#3 of:,4
<custodial,STRING <custodial (,2
,<custodial (,2
Bet,move Bet Mover,1
,Bet Mover,1
,move Bet P1,1
,move Bet P2,1
,move Bet P3,1
,Bet P1,1
,Bet P2,1
,Bet P3,1
#4,#2 #4 ),1
,#3 #4 #5,11
,#4 ),23
,#4 #5,16
,region #4 -,2
,) #4 ),9
,STRING #4 ),3
,#4 -,3
,coord #4 ),3
,from #4 ),2
,) #4 STRING,2
,#4 STRING,2
,#3 #4 ),2
,move #4 -,1
,#3 #4 if:True,3
,#4 if:True,3
,Occupied #4 components:,3
,Occupied #4 ),3
,attacked #4 If,1
,#4 components:,3
,#4 If,1
,id #4 Mover,1
,#4 Mover,1
,#3 #4 (,1
,STRING #4 #5,1
,#2 #4 #5,4
,#4 (,1
,( #4 of:#1,1
,( #4 of:#2,1
,#4 of:#1,1
,#4 of:#2,1
#5,#4 #5 #7,2
,#5 #7,2
,blank #5 -,1
,from #5 if:,1
,capture #5 -,1
,) #5 (,1
,) #5 ),26
,#5 -,3
,#5 if:,1
,#5 (,7
,#5 ),39
,coord #5 ),3
,) #5 STRING,2
,#5 STRING,5
,#4 #5 True,3
,#4 #5 STRING,3
,#4 #5 ),5
,STRING #5 #6,2
,#5 True,3
,#5 #6,2
,slide #5 -,1
,#2 #5 ),3
,- #5 ),1
,STRING #5 (,3
,STRING #5 ),1
,#4 #5 (,3
#6,roll #6 ),1
,#6 ),7
,coord #6 ),3
,#5 #6 ),2
,Mover #6 ),1
<numPiece>,<armSize> <numPiece> },1
,<numPiece> },1
#7,#5 #7 ),2
,#7 ),5
,coord #7 ),3
,STRING #7 #8,2
,#7 #8,2
<Track:directionP1>,STRING <Track:directionP1> loop:True,1
,<Track:directionP1> loop:True,1
#8,coord #8 ),3
,#8 ),5
,#7 #8 ),2
series,a series of,1
,series of,1
complicated,after complicated optimizations,1
,complicated optimizations,1
backtracking:,origin:True backtracking: (,1
,backtracking: (,7
,) backtracking: (,4
,includeSelf:False backtracking: (,2
noMoveYet:,) noMoveYet: (,7
,noMoveYet: (,7
<regionsP2>,<regionsP1> <regionsP2> },1
,<regionsP2> },1
<Players:num>,players <Players:num> ),12
,<Players:num> ),13
,STRING <Players:num> ),1
<11>,STRING <11> STRING,70
,<11> STRING,71
,<10> <11> <,1
,<11> <,5
,STRING <11> <,4
,> <11> STRING,1
stack:,) stack: True,3
,stack: True,3
<Tiling:type>,( <Tiling:type> <Board:size>,2
,<Tiling:type> <Board:size>,2
,boardless <Tiling:type> ),2
,<Tiling:type> ),2
Neutral,STRING Neutral ),142
,Neutral ),147
,STRING Neutral (,4
,Neutral (,4
,STRING Neutral at:,16
,Neutral at:,16
,STRING Neutral maxState:10,1
,Neutral maxState:10,1
,) Neutral top:True,1
,Neutral top:True,1
,RegularGraph Neutral ),3
,set Neutral Edge,10
,Neutral Edge,10
,Tree Neutral ),2
die,notched die because,1
,die because,1
,the die value,1
,die value,1
added,be added to,1
,added to,1
Forfeit,) Forfeit move,1
,Forfeit move,1
<Rules:play>,) <Rules:play> (,1
,<Rules:play> (,3
,{ <Rules:play> (,2
Around,sites Around (,202
,Around (,202
,sites Around #1,14
,Around #1,14
,sites Around Cell,10
,Around Cell,10
,sites Around STRING,1
,Around STRING,1
<goal>,<moveCondition> <goal> },1
,<goal> },1
down,slowed down too,1
,script down .,1
,down too,1
,down .,1
later,for later Pawn,1
,later Pawn,1
designated,the designated subgame,1
,designated subgame,1
of:Edge,Vertex of:Edge at:,2
,Cell of:Edge at:,2
,of:Edge at:,5
,Edge of:Edge at:,1
at:#1,who at:#1 ),11
,Stack at:#1 ),3
,at:#1 ),79
,state at:#1 ),44
,State at:#1 INTEGER,31
,at:#1 INTEGER,31
,of:Cell at:#1 ),6
,state at:#1 level:#2,2
,State at:#1 level:#2,2
,at:#1 level:#2,4
,Piece at:#1 ),1
,count at:#1 ),6
,of:Vertex at:#1 ),1
,what at:#1 ),7
,Stack at:#1 if:,2
,who at:#1 level:0,1
,at:#1 if:,2
,at:#1 level:0,1
at:#2,of:Cell at:#2 ),6
,at:#2 ),6
at:#3,what at:#3 ),1
,at:#3 ),1
<12>,STRING <12> STRING,66
,<12> STRING,70
,STRING <12> <13>,1
,<12> <13>,1
,STRING <12> <,9
,<12> <,9
,> <12> <19>,1
,<12> <19>,1
,<6> <12> STRING,2
,<5> <12> STRING,1
,STRING <12> <25>,5
,<12> <25>,5
,5> <12> STRING,1
3's,Player 3's King,2
,3's King,2
Fog,) Fog Of,1
,Fog Of,1
Gold,) Gold General,8
,Gold General,8
<14>,STRING <14> STRING,68
,<14> STRING,70
,<13> <14> <15>,1
,<14> <15>,1
,STRING <14> <,7
,<14> <,7
,> <14> <23>,1
,<14> <23>,1
,<4> <14> STRING,1
,<7> <14> STRING,1
,STRING <14> <25>,5
,<14> <25>,5
,> <14> <112>,1
,<14> <112>,1
<Edge:target_zone>,to <Edge:target_zone> ),1
,<Edge:target_zone> ),1
200%,does 200% damage,1
,200% damage,1
rotation:3,STRING rotation:3 ),7
,} rotation:3 ),1
,rotation:3 ),8
test,One test in,1
,test in,1
,pass test .,1
,test .,1
rotation:2,) rotation:2 value:0,1
,rotation:2 value:0,1
,STRING rotation:2 ),1
,rotation:2 ),1
rotation:1,STRING rotation:1 ),8
,} rotation:1 ),1
,rotation:1 ),9
rotation:0,) rotation:0 value:0,1
,rotation:0 value:0,1
,STRING rotation:0 ),16
,} rotation:0 ),7
,rotation:0 ),23
Observations:,. Observations: -,1
,Observations: -,1
count,( count Pieces,258
,count Pieces,258
,( count Sites,341
,( count Steps,53
,count Sites,341
,count Steps,53
,( count Moves,55
,count Moves,55
,( count Cell,204
,count Cell,204
,( count Pips,215
,count Pips,215
,( count MovesThisTurn,49
,count MovesThisTurn,49
,( count at:,1217
,count at:,1217
,( count in:,145
,( count StepsOnTrack,2
,count in:,145
,count StepsOnTrack,2
,( count Players,19
,( count Active,7
,count Players,19
,count Active,7
,because count pips,1
,count pips,1
,( count Value,6
,count Value,6
,( count Columns,5
,( count Rows,141
,count Columns,5
,count Rows,141
,( count STRING,129
,count STRING,129
,( count Turns,26
,count Turns,26
,( count at:7,1
,( count at:8,2
,( count at:9,2
,( count at:10,1
,( count at:11,2
,( count at:12,1
,( count at:1,1
,( count at:2,2
,( count at:3,2
,( count at:4,1
,( count at:5,1
,( count at:6,1
,count at:7,1
,count at:8,2
,count at:9,2
,count at:10,1
,count at:11,2
,count at:12,1
,count at:1,1
,count at:2,2
,count at:3,2
,count at:4,1
,count at:5,1
,count at:6,1
,( count at:#1,6
,count at:#1,6
,( count Groups,43
,count Groups,43
,( count Liberties,10
,count Liberties,10
,( count Trials,66
,count Trials,66
,( count Stack,2
,count Stack,2
,( count at:0,1
,count at:0,1
,( count Cells,1
,count Cells,1
For,) For the,1
,For the,1
,STRING For an,1
,. For details,1
,For an,1
,For details,1
rotation:7,STRING rotation:7 ),7
,} rotation:7 ),1
,rotation:7 ),8
rotation:6,) rotation:6 value:0,1
,rotation:6 value:0,1
,STRING rotation:6 ),1
,rotation:6 ),1
rotation:5,STRING rotation:5 ),5
,} rotation:5 ),1
,rotation:5 ),6
<Start:start>,rules <Start:start> <Start:play>,1
,<Start:start> <Start:play>,1
rotation:4,) rotation:4 value:0,1
,rotation:4 value:0,1
,STRING rotation:4 ),11
,} rotation:4 ),7
,rotation:4 ),18
<west>,<east> <west> },1
,<west> },1
Hand,sites Hand Mover,14
,Hand Mover,14
,sites Hand Prev,4
,Hand Prev,4
,sites Hand P1,6
,sites Hand P2,6
,Hand P1,6
,Hand P2,6
,sites Hand Shared,8
,Hand Shared,8
,) Hand functions,1
,to Hand Usage:,1
,Hand functions,1
,Hand Usage:,1
graph,( graph vertices:,73
,graph vertices:,73
take,only take place,1
,take place,1
,( take Control,7
,take Control,7
,( take Domino,1
,take Domino,1
<Variant:capture>,if:<Variant:moveCondition> <Variant:capture> ),1
,<Variant:capture> ),1
CaptureForwardDiagonal,- CaptureForwardDiagonal (,3
,CaptureForwardDiagonal (,3
undecided,is undecided (,2
,undecided (,2
Elephant,to Elephant .,2
,Elephant .,2
,) Elephant (,5
,Elephant (,5
Pawn1Start,> Pawn1Start STRING,2
,Pawn1Start STRING,2
RememberPieceHasMoved,- RememberPieceHasMoved (,3
,RememberPieceHasMoved (,3
9x9,left 9x9 square,2
,right 9x9 square,1
,Right 9x9 square,1
,9x9 square,4
<13>,STRING <13> STRING,47
,<13> STRING,47
,<12> <13> <14>,1
,<13> <14>,1
,STRING <13> <,4
,<13> <,4
pawn,a pawn to,1
,pawn to,1
,a pawn can,1
,pawn can,1
incase,) incase not,1
,incase not,1
hexagonal,a hexagonal board,1
,hexagonal board,1
<rectangle,STRING <rectangle INTEGER,1
,<rectangle INTEGER,1
<Board:numPiece>,STRING <Board:numPiece> ),1
,<Board:numPiece> ),1
some,--COMMA-- some people,1
,with some small,1
,some people,1
,some small,1
,First some utilities:,1
,some utilities:,1
rulesets,( rulesets {,168
,rulesets {,168
<15>,STRING <15> STRING,53
,<15> STRING,56
,<14> <15> <16>,1
,<15> <16>,1
,STRING <15> <,4
,<15> <,4
,<5> <15> STRING,1
,<9> <15> STRING,1
,1> <15> STRING,1
blank,or blank #5,1
,or blank (,1
,blank #5,1
,blank (,1
back,go back to,3
,back to,3
<Dice>,STRING <Dice> args:,5
,<Dice> args:,5
,) <Dice> <Throw>,1
,<Dice> <Throw>,1
Outer,sites Outer ),43
,Outer ),43
,sites Outer Edge,3
,Outer Edge,3
,P1 Outer Home,1
,P2 Outer Home,1
,Outer Home,2
<Variant:promotedMove>,STRING <Variant:promotedMove> ),1
,<Variant:promotedMove> ),1
With,) With a,2
,With a,2
states,own states after,1
,states after,1
Processing,) Processing individual,1
,Processing individual,1
<bgrd>,<size> <bgrd> <ctr>,1
,<bgrd> <ctr>,1
level:#2,at:#1 level:#2 ),2
,at:#1 level:#2 INTEGER,2
,level:#2 ),2
,level:#2 INTEGER,2
passes,check passes the,1
,passes the,1
exposes,move exposes a,1
,exposes a,1
<CheckmateRule>,STRING <CheckmateRule> args:,1
,<CheckmateRule> args:,1
coord:<Board:startMinotaur>,STRING coord:<Board:startMinotaur> ),1
,coord:<Board:startMinotaur> ),1
passed,clauses passed into,1
,a passed turn,1
,passed into,1
,passed turn,1
just,always just move,4
,we just got,2
,just move,4
,just got,2
,against just infantry,1
,just infantry,1
human,least human play,1
,human play,1
MoverLastTurn,prev MoverLastTurn ),1
,MoverLastTurn ),1
Rook,to Rook .,2
,Rook .,2
,the Rook being,1
,a Rook or,1
,--COMMA-- Rook --COMMA--,1
,Rook being,1
,Rook or,1
,Rook --COMMA--,1
,) Rook (,8
,Promoted Rook (,7
,Rook (,15
<option>,<end> <option> },1
,<option> },1
owner,the owner of,1
,owner of,1
<Players:endP3>,) <Players:endP3> },1
,<Players:endP3> },1
<16>,STRING <16> STRING,52
,<16> STRING,54
,<15> <16> <17>,1
,<16> <17>,1
,STRING <16> <,8
,<16> <,8
,<6> <16> STRING,1
,<8> <16> STRING,1
,STRING <16> <30>,5
,<16> <30>,5
,<4> <16> <34>,1
,<16> <34>,1
,> <16> <17,1
,<16> <17,1
<or>,STRING <or> STRING,1
,<or> STRING,1
<Skip>,includeSelf:False <Skip> backtracking:True,1
,STRING <Skip> args:,1
,<Skip> backtracking:True,1
,<Skip> args:,1
remembering,so remembering them,1
,remembering them,1
length,having length INTEGER,1
,length INTEGER,1
affects,marking affects connectivity,1
,affects connectivity,1
row:0,coord row:0 column:,11
,row:0 column:,11
,coord row:0 column:0,2
,row:0 column:0,2
home,P2 home (,132
,home (,230
,P1 home (,92
,inner home (,2
,Inner home (,2
,Left home (,2
,P2 home },14
,home },14
,P2 home <Board:regions>,1
,home <Board:regions>,1
,P2 home <Track:stores>,1
,home <Track:stores>,1
player:Mover,note player:Mover STRING,5
,player:Mover STRING,5
Chosen:nonMoverCaptures,see Chosen:nonMoverCaptures (,1
,Chosen:nonMoverCaptures (,1
hole,( hole (,17
,hole (,17
,next hole to,2
,hole to,3
,fourth hole },1
,hole },1
,rightMost hole to,1
Triggered,is Triggered STRING,31
,Triggered STRING,31
<value>,{ <value> },3
,<value> },3
space---West,current space---West --COMMA--,1
,space---West --COMMA--,1
<10><4>,STRING <10><4> STRING,1
,<10><4> STRING,1
append,( append STRING,3
,append STRING,3
<17>,STRING <17> STRING,36
,<17> STRING,36
,<16> <17> <,1
,<17> <,3
,STRING <17> <,2
Chess,Brusky Chess Copyright,1
,from Chess .,14
,Source: Chess .,33
,Chess Copyright,6
,Chess .,49
,Vasa Chess Copyright,1
,Glinski Chess Copyright,1
,McCooey Chess Copyright,1
,Shafran Chess Copyright,1
,Wellisch Chess Copyright,1
,Wellisch Chess is,1
,Glinski Chess .,1
,Wellisch Chess .,1
,of Chess Variants,1
,Chess is,1
,Chess Variants,1
<Players:setupRules>,) <Players:setupRules> },1
,<Players:setupRules> },1
<CellBackground>,STRING <CellBackground> args:,1
,<CellBackground> args:,1
reaches,Pawn reaches the,3
,reaches the,3
<Size:piles>,start <Size:piles> ),1
,<Size:piles> ),1
movement:,King movement: Castling,3
,Pawn movement: En,5
,movement: Castling,3
,movement: En,5
75%,) 75% damage,1
,75% damage,1
loop:True,} loop:True ),26
,loop:True ),166
,STRING loop:True P1,115
,STRING loop:True P2,100
,loop:True P1,140
,loop:True P2,149
,} loop:True P1,20
,} loop:True P2,20
,} loop:True P3,9
,} loop:True P4,8
,loop:True P3,29
,loop:True P4,8
,<Board:track2> loop:True P2,5
,<Board:track> loop:True ),2
,<Board:CCW2> loop:True P2,7
,<Board:CW1> loop:True P1,2
,<Board:CW2> loop:True P2,2
,<Row:track2> loop:True P2,12
,<Board:track1> loop:True P1,1
,STRING loop:True ),135
,<Row:trackCCW2> loop:True P2,1
,<Row:trackCW1> loop:True P1,1
,<Row:trackCW2> loop:True P2,1
,<Player:track> loop:True ),1
,<Board:trackDirection> loop:True ),1
,<Track:directionP1> loop:True P1,1
,<Track:directionP2> loop:True P2,1
,} loop:True P5,6
,} loop:True P6,6
,} loop:True P7,5
,} loop:True P8,5
,} loop:True P9,4
,} loop:True P10,4
,} loop:True P11,3
,} loop:True P12,3
,} loop:True P13,2
,} loop:True P14,2
,} loop:True P15,1
,} loop:True P16,1
,loop:True P5,6
,loop:True P6,6
,loop:True P7,5
,loop:True P8,5
,loop:True P9,4
,loop:True P10,4
,loop:True P11,3
,loop:True P12,3
,loop:True P13,2
,loop:True P14,2
,loop:True P15,1
,loop:True P16,1
,STRING loop:True P3,20
,} loop:True directed:True,2
,loop:True directed:True,2
,<Board:MiddleTrack> loop:True ),1
<PlaceBy:qtyMax>,neighbors <PlaceBy:qtyMax> (,1
,<PlaceBy:qtyMax> (,1
Remove,move Remove (,180
,Remove (,180
,move Remove #1,2
,Remove #1,2
,) Remove the,1
,Remove the,1
,) Remove blocked,3
,Remove blocked,3
,move Remove <Version:play>,1
,Remove <Version:play>,1
<leopardGoal>,<initLeopard> <leopardGoal> },1
,<leopardGoal> },1
entrenchments,Build entrenchments (,1
,entrenchments (,1
Odd,is Odd (,24
,Odd (,24
Different,all Different #1,1
,Different #1,1
,all Different ),11
,Different ),11
,all Different (,3
,Different (,3
,all Different except:0,1
,Different except:0,1
<pieceSetup>,<buildingSetup> <pieceSetup> <startingMoney>,1
,<pieceSetup> <startingMoney>,1
Utility,integer Utility (,1
,Utility (,1
<piles>,<board> <piles> },1
,<piles> },1
Even,is Even (,36
,Even (,36
,is Even STRING,2
,Even STRING,2
<Edge>,STRING <Edge> args:,2
,<Edge> args:,2
Distance,max Distance STRING,6
,Distance STRING,6
,max Distance (,3
,Distance (,10
,sites Distance All,1
,Distance All,1
,sites Distance Orthogonal,4
,Distance Orthogonal,4
,sites Distance from:,4
,Distance from:,4
,sites Distance (,7
Human,spots Human (,1
,= Human Damage,1
,Human (,1
,Human Damage,1
made,was made like,1
,made like,1
,board made of,1
,made of,1
T33344>,<tiling T33344> STRING,1
,T33344> STRING,1
<18>,STRING <18> STRING,47
,<18> STRING,48
,STRING <18> <19>,1
,<18> <19>,1
,STRING <18> <,2
,<18> <,2
,<9> <18> STRING,1
<BoardConfig:King2Start>,INTEGER <BoardConfig:King2Start> ),1
,<BoardConfig:King2Start> ),1
sense,two sense of,1
,sense of,1
being,Rook being moved,1
,not being able,1
,being moved,1
,being able,1
,currently being attacked,1
,being attacked,4
,is being attacked,1
,piece being attacked,2
yielded,always yielded ),1
,yielded ),1
heavy,very heavy on,1
,heavy on,1
Functional,------------------------------------------- Functional defines,1
,Functional defines,1
<OuterRing:tilePlacementRegion>,) <OuterRing:tilePlacementRegion> },1
,<OuterRing:tilePlacementRegion> },1
<Variant:pieceMoves>,) <Variant:pieceMoves> },1
,<Variant:pieceMoves> },1
<Version:home>,) <Version:home> },1
,<Version:home> },1
<Meta>,STRING <Meta> args:,5
,<Meta> args:,5
surakartaBoard,( surakartaBoard <Option:board>,1
,surakartaBoard <Option:board>,1
rotations,( rotations {,1
,( rotations Orthogonal,1
,rotations {,1
,rotations Orthogonal,1
count:<Board:size>,STRING count:<Board:size> ),1
,count:<Board:size> ),1
skew,( skew .,2
,skew .,2
**,) ** (,103
,) ** },27
,** (,103
,** },27
Vertex,Board Vertex ),9
,Vertex ),18
,directions Vertex from:,11
,Vertex from:,11
,Steps Vertex All,3
,Vertex All,3
,Incident Vertex of:Cell,13
,Vertex of:Cell,13
,to Vertex (,5
,Empty Vertex ),4
,Vertex (,14
,from Vertex ),2
,Empty Vertex (,1
,Incident Vertex of:Edge,2
,who Vertex at:,2
,remove Vertex (,2
,Pieces Vertex #1,1
,#1 Vertex ),1
,Vertex of:Edge,2
,Vertex at:,3
,Vertex #1,1
,cost Vertex at:,1
,INTEGER Vertex at:0,3
,INTEGER Vertex at:1,3
,INTEGER Vertex at:2,3
,INTEGER Vertex at:3,3
,INTEGER Vertex at:4,3
,INTEGER Vertex at:5,3
,INTEGER Vertex at:6,3
,INTEGER Vertex at:7,3
,INTEGER Vertex at:8,3
,INTEGER Vertex at:9,3
,INTEGER Vertex at:10,3
,INTEGER Vertex at:11,3
,INTEGER Vertex at:12,3
,INTEGER Vertex at:13,3
,INTEGER Vertex at:14,3
,INTEGER Vertex at:15,3
,INTEGER Vertex at:16,3
,INTEGER Vertex at:17,3
,INTEGER Vertex at:18,3
,INTEGER Vertex at:19,3
,INTEGER Vertex at:20,2
,INTEGER Vertex at:21,2
,INTEGER Vertex at:22,2
,INTEGER Vertex at:23,2
,INTEGER Vertex at:24,1
,Vertex at:0,3
,Vertex at:1,3
,Vertex at:2,3
,Vertex at:3,3
,Vertex at:4,3
,Vertex at:5,3
,Vertex at:6,3
,Vertex at:7,3
,Vertex at:8,3
,Vertex at:9,3
,Vertex at:10,3
,Vertex at:11,3
,Vertex at:12,3
,Vertex at:13,3
,Vertex at:14,3
,Vertex at:15,3
,Vertex at:16,3
,Vertex at:17,3
,Vertex at:18,3
,Vertex at:19,3
,Vertex at:20,2
,Vertex at:21,2
,Vertex at:22,2
,Vertex at:23,2
,Vertex at:24,1
,Path Vertex Mover,1
,Vertex Mover,1
,P1 Vertex (,1
,P2 Vertex (,1
,values Vertex (,2
,} Vertex ),2
,forAll Vertex (,1
,Count Vertex (,1
Minimum,Damage Minimum INTEGER,1
,Minimum INTEGER,1
Advanced,and Advanced Murus,1
,Advanced Murus,1
<color>,{ <color> },1
,<color> },1
<19>,STRING <19> STRING,46
,<19> STRING,46
,<18> <19> <20>,1
,<19> <20>,1
,<12> <19> <27>,1
,<19> <27>,1
,STRING <19> <,2
,<19> <,2
,> <19> <198>,1
,<19> <198>,1
Right,sites Right ),138
,Right ),140
,STRING Right STRING,2
,Right STRING,2
,STRING Right ),2
,Top Right 9x9,1
,Right 9x9,1
<End:rule>,In <End:rule> (,1
,<End:rule> (,1
,) <End:rule> ),1
,<End:rule> ),1
<Win>,STRING <Win> STRING,14
,<Win> STRING,16
,STRING <Win> <Win>,1
,<Win> <Win> STRING,1
,<Win> <Win>,1
,<Loss> <Win> STRING,1
,STRING <Win> <Loss>,1
,<Win> <Loss>,1
Persian,the Persian victory,1
,Persian victory,1
mapEntry,( mapEntry (,120
,mapEntry (,120
,( mapEntry STRING,415
,mapEntry STRING,415
,( mapEntry #1,90
,mapEntry #1,90
,( mapEntry Mover,85
,mapEntry Mover,85
,( mapEntry P1,26
,( mapEntry P2,26
,( mapEntry Next,6
,mapEntry P1,26
,mapEntry P2,26
,mapEntry Next,6
,( mapEntry INTEGER,4
,mapEntry INTEGER,4
,( mapEntry <Doctrine1:doctrine>,1
,( mapEntry <Doctrine2:doctrine>,1
,( mapEntry <Doctrine3:doctrine>,1
,( mapEntry <Doctrine4:doctrine>,1
,mapEntry <Doctrine1:doctrine>,1
,mapEntry <Doctrine2:doctrine>,1
,mapEntry <Doctrine3:doctrine>,1
,mapEntry <Doctrine4:doctrine>,1
Off,STRING Off ),32
,Off ),123
,) Off ),72
,#1 Off ),16
,= Off (,56
,Off (,56
,Mover Off ),1
,INTEGER Off ),2
<tigers>,{ <tigers> },1
,<tigers> },1
T3464>,<tiling T3464> STRING,1
,T3464> STRING,1
Usage:,) Usage: (,37
,PieceHasNeverMoved Usage: (,3
,movement Usage: (,7
,DoubleStep Usage: (,5
,args Usage: (,2
,. Usage: (,7
,promotion Usage: (,6
,Usage: (,69
,functions Usage: (,1
,Hand Usage: (,1
stand,can stand on,1
,stand on,1
map,( map {,92
,map {,92
,( map STRING,313
,map STRING,313
<Scoring>,STRING <Scoring> args:,4
,<Scoring> args:,4
<Counters:num>,) <Counters:num> ),1
,<Counters:num> ),1
surround,( surround (,19
,surround (,19
can't,( can't build,1
,can't build,1
state:4,) state:4 ),5
,state:4 ),16
,STRING state:4 ),3
,) state:4 value:50,1
,) state:4 value:80,1
,state:4 value:50,1
,state:4 value:80,1
,} state:4 ),8
state:3,) state:3 ),5
,state:3 ),28
,STRING state:3 ),3
,STRING state:3 value:1,4
,state:3 value:1,4
,count:76 state:3 ),2
,count:20 state:3 ),4
,count:10 state:3 ),4
,count:5 state:3 ),2
,) state:3 value:40,1
,) state:3 value:50,1
,state:3 value:40,1
,state:3 value:50,1
,} state:3 ),8
state:2,) state:2 ),6
,state:2 ),24
,STRING state:2 ),4
,STRING state:2 value:1,2
,state:2 value:1,2
,INTEGER state:2 value:38,3
,INTEGER state:2 value:39,1
,state:2 value:38,3
,state:2 value:39,1
,} state:2 ),14
,) state:2 value:3,17
,state:2 value:3,17
state:1,) state:1 ),34
,state:1 ),224
,count:2 state:1 ),4
,STRING state:1 ),98
,STRING state:1 value:1,4
,state:1 value:1,8
,INTEGER state:1 value:36,3
,INTEGER state:1 value:37,2
,state:1 value:36,3
,state:1 value:37,2
,} state:1 ),87
,) state:1 value:1,4
,coord:<BoardConfig:King2Start> state:1 ),1
,count:30 state:1 value:30,1
,count:50 state:1 value:40,1
,count:60 state:1 value:60,1
,count:80 state:1 value:60,1
,count:100 state:1 value:80,1
,count:80 state:1 value:50,2
,count:100 state:1 value:40,1
,count:60 state:1 value:40,1
,count:100 state:1 value:100,2
,count:120 state:1 value:100,1
,count:60 state:1 value:70,1
,count:120 state:1 value:120,1
,state:1 value:30,1
,state:1 value:40,3
,state:1 value:60,2
,state:1 value:80,1
,state:1 value:50,2
,state:1 value:100,3
,state:1 value:70,1
,state:1 value:120,1
Orthogonal,difference Orthogonal OppositeDirection,6
,Orthogonal OppositeDirection,6
,) Orthogonal (,99
,Orthogonal (,368
,Step Orthogonal (,60
,INTEGER Orthogonal contiguous:False,1
,Orthogonal contiguous:False,1
,STRING Orthogonal ),70
,Orthogonal ),283
,steps:3 Orthogonal ),2
,steps:4 Orthogonal ),2
,) Orthogonal ),133
,) Orthogonal if:,15
,#1 Orthogonal if:,1
,Orthogonal if:,23
,steps:<Board:sizeHome> Orthogonal ),2
,step Orthogonal (,7
,Hop Orthogonal (,22
,Liberties Orthogonal ),8
,NotEmpty Orthogonal ),2
,Own Orthogonal ),6
,Connected Orthogonal {,6
,Orthogonal {,6
,#1 Orthogonal ),2
,Connected Orthogonal Mover,1
,Orthogonal Mover,3
,rotations Orthogonal ),1
,Groups Orthogonal if:,3
,Empty Orthogonal ),8
,Groups Orthogonal #1,7
,Orthogonal #1,7
,INTEGER Orthogonal exact:True,14
,Orthogonal exact:True,14
,INTEGER Orthogonal ),26
,INTEGER Orthogonal through:,19
,Orthogonal through:,19
,Slide Orthogonal ),13
,INTEGER Orthogonal if:,1
,Slide Orthogonal (,129
,#1 Orthogonal (,15
,steps:8 Orthogonal ),2
,Enemy Orthogonal ),5
,Direction Orthogonal (,8
,Steps Orthogonal (,10
,STRING Orthogonal STRING,16
,Orthogonal STRING,16
,STRING Orthogonal ~,10
,Orthogonal ~,10
,Distance Orthogonal from:,4
,Orthogonal from:,4
,STRING Orthogonal (,15
,) Orthogonal Diagonal,1
,Orthogonal Diagonal,1
,) Orthogonal All,1
,Orthogonal All,1
,) Orthogonal includeSelf:True,6
,Orthogonal includeSelf:True,6
,Group Orthogonal Mover,2
,Group Orthogonal Next,1
,Orthogonal Next,1
,) Orthogonal stop:,1
,Orthogonal stop:,1
,#2 Orthogonal ),1
,) Orthogonal marking,1
,Orthogonal marking,1
,Related Orthogonal (,3
,Group Orthogonal if:,2
,Own Orthogonal if:,1
state:8,) state:8 ),2
,state:8 ),12
,STRING state:8 ),2
,) state:8 value:100,150
,state:8 value:100,150
,} state:8 ),8
may,ADD may leap,1
,may leap,1
,INTEGER may not,1
,may not,1
,game may be,1
,may be,1
max,( max INTEGER,288
,max INTEGER,288
,( max Distance,9
,max Distance,9
,( max Moves,48
,max Moves,48
,( max (,36
,max (,36
,( max Captures,1
,max Captures,1
state:7,STRING state:7 ),6
,state:7 ),14
,} state:7 ),8
state:6,) state:6 ),4
,state:6 ),14
,STRING state:6 ),2
,} state:6 ),8
forward,one forward direction,1
,either forward diretion,1
,forward direction,1
,forward diretion,1
,space forward to,1
,of forward .,1
,forward to,1
,forward .,1
state:5,) state:5 ),5
,state:5 ),15
,STRING state:5 ),2
,} state:5 ),8
backtracking:True,) backtracking:True ),11
,backtracking:True ),19
,includeSelf:False backtracking:True ),7
,<Skip> backtracking:True ),1
health,( health ),2
,health ),2
trigger,( trigger STRING,28
,trigger STRING,28
,Cells trigger en,1
,trigger en,1
state:0,) state:0 ),5
,state:0 ),7
,STRING state:0 ),1
,} state:0 ),1
defining,by defining the,1
,defining the,1
<288>,<23> <288> STRING,1
,<288> STRING,1
Flow,- Flow control,1
,Flow control,1
<Limping>,STRING <Limping> <,3
,<Limping> <,3
,STRING <Limping> STRING,1
,<Limping> STRING,1
<King2Start>,<Pawn1Start> <King2Start> <Queen2Start>,1
,<King2Start> <Queen2Start>,1
<Size:boardHeight>,+ <Size:boardHeight> <OuterRing:extraBoardSize>,1
,<Size:boardHeight> <OuterRing:extraBoardSize>,1
<Jump:hare>,or <Jump:hare> (,1
,<Jump:hare> (,1
able,being able to,1
,able to,1
<Multi:influence>,STRING <Multi:influence> ),2
,) <Multi:influence> ),1
,<Multi:influence> ),3
hops,friendly hops (,1
,hops (,1
,of hops of,1
,hops of,1
state:9,) state:9 ),2
,state:9 ),2
<Scenario:numPlayers>,players <Scenario:numPlayers> ),1
,<Scenario:numPlayers> ),1
pathExtent,( pathExtent (,2
,pathExtent (,2
rotate,( rotate INTEGER,136
,rotate INTEGER,136
,( rotate -90,5
,rotate -90,5
,( rotate -30,1
,rotate -30,1
,( rotate -108,3
,( rotate -216,3
,rotate -108,3
,rotate -216,3
,( rotate -45,1
,( rotate -135,1
,rotate -45,1
,rotate -135,1
numPerHole:2,sow numPerHole:2 STRING,1
,numPerHole:2 STRING,1
use,Cannot use STRING,1
,use STRING,1
,players use Disc,1
,use Disc,1
,Cannot use NonMover,1
,use NonMover,1
integer,to integer Utility,1
,integer Utility,1
before:3,between before:3 after:1,2
,before:3 after:1,2
level:0,at:12 level:0 ),1
,at:25 level:0 ),1
,level:0 ),6
,) level:0 ),3
,) level:0 if:,2
,level:0 if:,2
,at:#1 level:0 ),1
level:1,at:12 level:1 ),1
,at:25 level:1 ),1
,level:1 ),3
,) level:1 ),1
Swap,move Swap Pieces,7
,Swap Pieces,7
,move Swap Players,2
,Swap Players,2
,) Swap mover,1
,Swap mover,1
<RookLeft2Start>,<Queen2Start> <RookLeft2Start> <RookRight2Start>,1
,<RookLeft2Start> <RookRight2Start>,1
before:9,between before:9 after:9,4
,before:9 after:9,4
Build,) Build entrenchments,1
,Build entrenchments,1
opponent,if opponent pieces,3
,opponent pieces,3
<TurnType:turnOption>,) <TurnType:turnOption> ),1
,<TurnType:turnOption> ),1
next:,) next: (,277
,next: (,277
numPerHole:4,sow numPerHole:4 apply:,1
,numPerHole:4 apply:,1
,sow numPerHole:4 STRING,3
,numPerHole:4 STRING,3
<where>,{ <where> },1
,<where> },1
regardless,cells regardless of,2
,regardless of,2
Here's,) Here's a,1
,Here's a,1
calculated,be calculated as,1
,calculated as,1
selected,with selected index,2
,selected index,2
before:1,between before:1 after:1,1
,before:1 after:1,1
,between before:1 if:,2
,before:1 if:,2
before:2,between before:2 after:2,1
,before:2 after:2,1
T33336,tiling T33336 INTEGER,1
,T33336 INTEGER,1
31>,. 31> <32,1
,31> <32,1
<condition>,<slide_spaces> <condition> <then>,3
,<condition> <then>,3
Doctrine,) Doctrine damage,1
,Doctrine damage,1
-0,INTEGER -0 .,21
,-0 .,37
,{ -0 .,12
,shift -0 .,3
,-2 -0 .,1
Occupied,sites Occupied by:P2,38
,Occupied by:P2,38
,sites Occupied by:All,57
,Occupied by:All,57
,sites Occupied by:Mover,249
,Occupied by:Mover,249
,sites Occupied by:P1,32
,Occupied by:P1,32
,sites Occupied by:Next,117
,Occupied by:Next,117
,sites Occupied by:#1,72
,Occupied by:#1,72
,is Occupied (,294
,Occupied (,294
,sites Occupied by:#2,6
,Occupied by:#2,6
,sites Occupied by:Shared,12
,Occupied by:Shared,12
,sites Occupied by:Team1,3
,sites Occupied by:Team2,3
,Occupied by:Team1,3
,Occupied by:Team2,3
,sites Occupied by:Enemy,46
,Occupied by:Enemy,46
,is Occupied Cell,7
,Occupied Cell,7
,sites Occupied by:Neutral,27
,Occupied by:Neutral,27
,sites Occupied by:P4,1
,sites Occupied by:P3,1
,Occupied by:P4,1
,Occupied by:P3,1
,sites Occupied by:Friend,4
,sites Occupied #2,1
,sites Occupied #4,6
,sites Occupied by:Player,5
,Occupied by:Friend,4
,Occupied #2,1
,Occupied #4,6
,Occupied by:Player,5
,sites Occupied by:,2
,Occupied by:,2
,sites Occupied by:#4,1
,sites Occupied by:#5,1
,Occupied by:#4,1
,Occupied by:#5,1
-1,INTEGER -1 (,15
,-1 (,22
,shift -1 INTEGER,17
,-1 INTEGER,20
,{ -1 .,8
,-1 .,23
,shift -1 .,10
,shift -1 -1,3
,-1 -1 (,3
,-1 -1,3
,Mover -1 ),2
,-1 ),12
,INTEGER -1 },4
,-1 },5
,STRING -1 ),8
,) -1 ),2
,shift -1 -4,1
,-1 -4,1
,{ -1 INTEGER,3
,INTEGER -1 .,5
,) -1 },1
,= -1 (,4
-2,INTEGER -2 (,14
,-2 (,15
,INTEGER -2 },5
,-2 },5
,{ -2 .,4
,-2 .,7
,) -2 ),2
,Mover -2 ),1
,-2 ),3
,shift -2 .,1
,{ -2 -3,1
,{ -2 INTEGER,4
,-2 -3,2
,-2 INTEGER,8
,shift -2 -2,1
,-2 -2 (,1
,shift -2 -3,1
,shift -2 INTEGER,4
,INTEGER -2 .,2
,shift -2 -4,1
,shift -2 -5,1
,-2 -2,1
,-2 -4,1
,-2 -5,1
,shift -2 -0,1
,-2 -0,1
by:Next,Occupied by:Next ),50
,by:Next ),50
,Occupied by:Next STRING,66
,by:Next STRING,66
,Occupied by:Next on:Edge,1
,by:Next on:Edge,1
<Play:capture>,#1 <Play:capture> ),1
,<Play:capture> ),1
-3,{ -3 INTEGER,2
,INTEGER -3 },1
,-3 INTEGER,3
,-3 },2
,INTEGER -3 .,2
,-3 .,8
,-2 -3 },1
,-2 -3 (,1
,INTEGER -3 (,3
,shift -3 .,4
,-3 (,4
,{ -3 .,2
,shift -3 INTEGER,1
-4,INTEGER -4 (,2
,-4 (,2
,INTEGER -4 -4,1
,-4 -4 INTEGER,1
,-4 -4,1
,-4 INTEGER,4
,shift -4 .,1
,{ -4 .,1
,-4 .,9
,INTEGER -4 .,5
,-2 -4 .,1
,-1 -4 .,1
,shift -4 INTEGER,3
Between,last Between ),3
,Between ),3
,sites Between from:,6
,Between from:,6
,sites Between (,2
,Between (,2
-5,shift -5 .,2
,-5 .,13
,shift -5 INTEGER,1
,-5 INTEGER,3
,INTEGER -5 .,4
,-2 -5 .,1
,{ -5 .,6
,{ -5 INTEGER,2
equipment,( equipment {,979
,equipment {,979
-6,shift -6 INTEGER,1
,-6 INTEGER,5
,INTEGER -6 (,1
,-6 (,1
,{ -6 INTEGER,4
<specialHoles>,<track2> <specialHoles> <singleHoles>,1
,<specialHoles> <singleHoles>,1
-7,shift -7 INTEGER,2
,-7 INTEGER,2
-8,INTEGER -8 .,2
,-8 .,2
<tri>,STRING <tri> STRING,2
,<tri> STRING,2
steps,three steps Slide,2
,three steps .,2
,two steps .,3
,two steps and,6
,steps Slide,2
,steps .,5
,steps and,6
,avoid steps without,2
,remaining steps would,1
,steps without,2
,steps would,1
<NumOfPlayers:PieceSetup>,{ <NumOfPlayers:PieceSetup> },2
,<NumOfPlayers:PieceSetup> },2
becomes,piece becomes available,1
,becomes available,1
max:3,min:2 max:3 (,1
,max:3 (,1
forget,( forget Value,136
,forget Value,136
<Rows>,STRING <Rows> args:,5
,<Rows> args:,5
,rectangle <Rows> <Columns>,1
,<Rows> <Columns>,1
max:4,min:2 max:4 (,1
,max:4 (,1
directions,( directions {,746
,directions {,746
,orthogonal directions over,1
,( directions Forward,2
,( directions Backward,1
,directions over,1
,directions Forward,2
,directions Backward,1
,( directions Vertex,11
,directions Vertex,11
,( directions Cell,31
,directions Cell,31
,( directions Diagonal,1
,directions Diagonal,1
,( directions #1,8
,( directions #2,8
,separate directions .,2
,movement directions +,2
,passant directions ),2
,directions #1,8
,directions #2,8
,directions .,2
,directions +,2
,directions ),2
,( directions from:#1,1
,directions from:#1,1
,( directions #3,1
,adjacent directions from,1
,directions #3,1
,directions from,1
,( directions Forwards,2
,directions Forwards,2
null,selecting null moves,1
,null moves,1
compass,the compass opposite,1
,compass opposite,1
lists,Find lists of,1
,lists of,1
Value,remember Value STRING,143
,forget Value All,8
,Value STRING,262
,Value All,8
,set Value Mover,121
,set Value Prev,4
,Value Mover,121
,Value Prev,4
,forEach Value (,26
,forget Value STRING,119
,Value (,42
,forEach Value min:1,10
,Value min:1,10
,forget Value (,5
,set Value at:,35
,Value at:,62
,set Value (,2
,set Value P3,1
,set Value P1,4
,set Value P4,1
,set Value P2,4
,Value P3,1
,Value P1,4
,Value P4,1
,Value P2,4
,count Value INTEGER,6
,Value INTEGER,6
,forEach Value min:2,3
,Value min:2,3
,remember Value (,7
,) Value line,1
,Value line,1
,set Value Next,2
,Value Next,2
,forEach Value min:0,5
,Value min:0,5
,forget Value #2,2
,remember Value #2,1
,Value #2,3
,Hidden Value at:,27
,Hidden Value (,2
,State Value },2
,Value },2
,remember Value #1,2
,forget Value #1,2
,Value #1,4
Save,- Save skipped-over,6
,- Save location,6
,Save skipped-over,6
,Save location,6
position,previous position of,1
,position of,2
,that position until,1
,position until,1
,starting position of,1
<playerMaps>,{ <playerMaps> <numPlayers>,1
,<playerMaps> <numPlayers>,1
<dogs>,{ <dogs> },1
,<dogs> },1
oriented,space oriented vertically,1
,oriented vertically,1
TeamMover,Pieces TeamMover ),9
,result TeamMover Win,20
,TeamMover ),10
,TeamMover Win,20
,STRING TeamMover ),1
<Board:track>,STRING <Board:track> directed:True,2
,<Board:track> directed:True,2
,STRING <Board:track> loop:True,2
,<Board:track> loop:True,2
,store:None <Board:track> ),1
,<Board:track> ),1
,) <Board:track> use:Vertex,1
,<Board:track> use:Vertex,1
<turnOption>,{ <turnOption> },1
,<turnOption> },1
Symbol,show Symbol STRING,64
,Symbol STRING,64
<RB2>,<RF2> <RB2> ),2
,<RB2> ),2
mess,don't mess with,1
,mess with,1
Entrenchments,) Entrenchments Sets,1
,Entrenchments Sets,1
<112>,<14> <112> STRING,1
,<112> STRING,1
Domino,take Domino ),1
,Domino ),1
dominoes,( dominoes ),1
,dominoes ),1
repeat,( repeat INTEGER,10
,repeat INTEGER,10
,( repeat STRING,1
,repeat STRING,1
diagonally,--COMMA-- diagonally left,2
,--COMMA-- diagonally right,2
,diagonally left,2
,diagonally right,2
,capture diagonally (,1
,diagonally (,1
,spaces diagonally on,1
,diagonally on,1
strokeColour:,) strokeColour: (,4
,strokeColour: (,4
<tracks>,<num> <tracks> <start>,1
,<tracks> <start>,1
,<num> <tracks> <entries>,1
,<tracks> <entries>,3
,<center> <tracks> },1
,<tracks> },10
,<start> <tracks> <entries>,2
,<size> <tracks> },3
,<board> <tracks> <stores>,1
,<tracks> <stores>,1
,<size> <tracks> <regions>,1
,<tracks> <regions>,1
,<team> <tracks> },4
,<teams> <tracks> },1
,<dice> <tracks> },1
make,can make any,1
,make any,1
,can make .,1
,make .,1
,to make sure,1
,make sure,1
included,the included then,1
,included then,1
33>,. 33> <30,1
,<30 33> STRING,1
,33> <30,1
,33> STRING,1
Rows,count Rows ),141
,Rows ),141
,Columns Rows SubGrids,4
,Rows SubGrids,4
,Columns Rows },5
,Rows },5
,Columns Rows Diagonals,1
,Rows Diagonals,1
<Size:board>,INTEGER <Size:board> ),1
,<Size:board> ),1
<RB1>,<RF1> <RB1> <LF2>,2
,<RB1> <LF2>,2
<prioritySetting>,{ <prioritySetting> },1
,<prioritySetting> },1
<111>,<36> <111> STRING,1
,<111> STRING,1
4x4x4x5x100x4,( 4x4x4x5x100x4 ),1
,4x4x4x5x100x4 ),1
structure,the structure of,1
,structure of,1
Trials,count Trials ),66
,Trials ),66
due,stalemate due to,1
,due to,1
Diagonal,Slide Diagonal (,54
,Diagonal (,179
,) Diagonal (,34
,) Diagonal ),5
,Diagonal ),80
,) Diagonal if:,3
,Diagonal if:,3
,Step Diagonal (,34
,Slide Diagonal ),15
,STRING Diagonal before:,1
,Slide Diagonal stack:True,1
,Diagonal before:,1
,Diagonal stack:True,1
,difference Diagonal OppositeDirection,2
,STRING Diagonal ),57
,directions Diagonal ),1
,Diagonal OppositeDirection,2
,#1 Diagonal (,5
,Hop Diagonal (,33
,) Diagonal distance:,1
,difference Diagonal (,1
,Diagonal distance:,1
,Forwards Diagonal ),1
,Direction Diagonal (,1
,Related Diagonal (,1
,STRING Diagonal ~,11
,Diagonal ~,11
,STRING Diagonal STRING,10
,Diagonal STRING,10
,STRING Diagonal (,16
,Orthogonal Diagonal ),1
,) Diagonal slide,1
,Jump Diagonal on,1
,Diagonal slide,1
,Diagonal on,1
,difference Diagonal N,1
,Diagonal N,1
,) Diagonal processing,1
,Diagonal processing,1
Pips,count Pips ),215
,Pips ),215
simplify,and simplify them,1
,simplify them,1
threat,a threat by,1
,threat by,1
Track,sites Track #2,1
,Track #2,1
,sites Track STRING,254
,Track STRING,254
,sites Track Mover,11
,Track Mover,11
,sites Track ),96
,Track ),96
,sites Track from:,15
,Track from:,15
,forEach Track if:,1
,Track if:,1
<Board:tracks>,{ <Board:tracks> },1
,<Board:tracks> },1
,store:None <Board:tracks> ),2
,<Board:tracks> ),2
,<Board:board> <Board:tracks> use:Vertex,1
,<Board:tracks> use:Vertex,2
,) <Board:tracks> use:Vertex,1
Each,hand Each ),323
,Each ),549
,STRING Each (,1321
,Each (,1321
,STRING Each ),225
,STRING Each <Dice:move>,1
,Each <Dice:move>,1
,STRING Each The,1
,Each The,1
,hand Each size:2,9
,Each size:2,9
,STRING Each STRING,74
,Each STRING,74
,hand Each size:6,6
,Each size:6,6
,hand Each size:<Board:numPieces>,1
,Each size:<Board:numPieces>,1
,STRING Each <Play:movePiece>,1
,Each <Play:movePiece>,1
,STRING Each <Play>,1
,Each <Play>,1
,<Tiling:tile> Each <Tiling:numSides>,2
,Each <Tiling:numSides>,2
,Score Each INTEGER,13
,Each INTEGER,13
,STRING Each <Piece>,1
,Each <Piece>,1
,hand Each size:3,5
,Each size:3,5
,hand Each size:4,2
,Each size:4,2
,STRING Each <Disc>,1
,Each <Disc>,1
,STRING Each <Elephant>,1
,Each <Elephant>,1
,hand Each size:5,8
,Each size:5,8
,STRING Each numSides:4,6
,Each numSides:4,6
,STRING Each TO,1
,Each TO,1
,hand Each size:7,4
,Each size:7,4
,hand Each size:8,1
,Each size:8,1
,#3 Each ),1
,#1 Each #2,1
,Each #2,1
,STRING Each Piece,2
,STRING Each Lion,1
,Each Piece,2
,Each Lion,1
,hand Each size:12,1
,Each size:12,1
,Score Each <Scenario:startingMoney>,1
,Each <Scenario:startingMoney>,1
,STRING Each <Moves>,1
,Each <Moves>,1
,hand Each size:21,1
,Each size:21,1
,) Each turn,1
,Each turn,1
Promotion:,Pawn Promotion: *,1
,Promotion: *,1
<Result:mover>,Mover <Result:mover> ),2
,<Result:mover> ),2
depend,conditions depend on,1
,depend on,1
Connected,) Connected sites,1
,Connected sites,1
,is Connected {,8
,Connected {,8
,is Connected Mover,7
,is Connected Next,1
,Connected Mover,7
,Connected Next,1
,is Connected All,3
,Connected All,3
,is Connected INTEGER,5
,Connected INTEGER,5
,is Connected Orthogonal,7
,Connected Orthogonal,7
,is Connected <Connection:type>,1
,Connected <Connection:type>,1
<Placement>,STRING <Placement> args:,2
,<Placement> args:,2
<BoardSize>,STRING <BoardSize> args:,11
,<BoardSize> args:,11
,<Board:type> <BoardSize> ),2
,<BoardSize> ),2
<Exact>,All <Exact> ),1
,STRING <Exact> args:,1
,<Exact> ),1
,<Exact> args:,1
Booleans,for Booleans (,1
,Booleans (,1
about,player about INTEGER,1
,multiplayer about INTEGER,1
,strategy about INTEGER,1
,about INTEGER,4
,to about INTEGER,1
0:,State 0: liberties,1
,0: liberties,1
History,) History (,3
,History (,3
<198>,<19> <198> STRING,1
,<198> STRING,1
<trackP3>,<startP3> <trackP3> <startP4>,3
,<trackP3> <startP4>,3
sizes,( sizes Group,31
,sizes Group,31
above,mentioned above --COMMA--,1
,above --COMMA--,1
fire,= fire site,1
,fire site,1
<NeighborsOf>,STRING <NeighborsOf> args:,1
,<NeighborsOf> args:,1
stick,notched stick (,1
,stick (,1
distance:,Diagonal distance: (,1
,) distance: (,1
,distance: (,3
,stopIncluded:True distance: (,1
35>,. 35> <36,1
,35> <36,1
<Piece>,Each <Piece> ),1
,STRING <Piece> args:,1
,<Piece> ),1
,<Piece> args:,1
Paidal,) Paidal (,1
,Paidal (,1
<rook_dir>,<rook_side> <rook_dir> <rook_spaces>,6
,<rook_dir> <rook_spaces>,6
based,moves based on,1
,based on,1
mancalaBoard,( mancalaBoard INTEGER,163
,mancalaBoard INTEGER,163
<defs>,{ <defs> },1
,<defs> },1
<trackP4>,<startP4> <trackP4> },3
,<trackP4> },3
outer,P1 outer Home,14
,outer Home,24
,P2 outer Home,10
3-player,A 3-player chess,1
,3-player chess,1
Sum,is Sum (,2
,Sum (,2
,is Sum STRING,1
,Sum STRING,1
,is Sum INTEGER,2
,Sum INTEGER,2
,is Sum <Challenge:sum>,1
,Sum <Challenge:sum>,1
<p1_arg>,STRING <p1_arg> <p2_arg>,2
,<p1_arg> <p2_arg>,2
<PlaceBy>,STRING <PlaceBy> args:,1
,<PlaceBy> args:,1
1>,<2 1> <3>,1
,INTEGER 1> <7>,1
,INTEGER 1> <15>,1
,INTEGER 1> <31>,1
,INTEGER 1> <63>,1
,INTEGER 1> <127>,1
,INTEGER 1> <255>,1
,INTEGER 1> <511>,1
,1> <3>,1
,1> <7>,1
,1> <15>,1
,1> <31>,1
,1> <63>,1
,1> <127>,1
,1> <255>,1
,1> <511>,1
<rules>>,{ <rules>> },1
,<rules>> },1
something,into something logically,1
,something logically,1
,that something is,1
,something is,1
<pile>,{ <pile> },1
,<pile> },1
Giraffe,to Giraffe .,2
,Giraffe .,2
<Dual>,STRING <Dual> args:,1
,<Dual> args:,1
component:#3,by:All component:#3 ),1
,component:#3 ),1
meta,( meta (,32
,meta (,32
,( meta {,1
,meta {,1
Starting,#1 Starting rules,1
,Starting rules,1
<Model>,STRING <Model> args:,1
,<Model> args:,1
unique,. unique elements,1
,unique elements,1
<Bishop2Start>,<RookRight2Start> <Bishop2Start> <Knight2Start>,1
,<Bishop2Start> <Knight2Start>,1
processing,Diagonal processing (,1
,move processing considerably,1
,processing (,1
,processing considerably,1
except,piece except the,1
,except the,1
,--COMMA-- except functions,8
,except functions,8
post-promotion,possible post-promotion movement,1
,post-promotion movement,1
if:<Variant:moveCondition>,#1 if:<Variant:moveCondition> <Variant:capture>,1
,if:<Variant:moveCondition> <Variant:capture>,1
<Board:3dSites>,Sites <Board:3dSites> if:,1
,<Board:3dSites> if:,1
Key,) Key concept:,1
,Key concept:,1
<extraBoardSize>,{ <extraBoardSize> <tilePlacementRegion>,1
,<extraBoardSize> <tilePlacementRegion>,1
<rules>,{ <rules> },16
,<rules> },19
,<piece> <rules> },1
,{ <rules> <misoroPhase>,2
,<rules> <misoroPhase>,2
,<board> <rules> },2
functional,) functional defines,1
,functional defines,1
<Orthogonal>,STRING <Orthogonal> STRING,3
,<Orthogonal> STRING,27
,> <Orthogonal> <Hidden>,24
,<Hidden> <Orthogonal> STRING,21
,<Orthogonal> <Hidden>,24
,<ThinDashed> <Orthogonal> STRING,2
,<ThinDotted> <Orthogonal> STRING,1
CannonOutline,the CannonOutline (,1
,CannonOutline (,1
One,) One flat,1
,One flat,1
,STRING One test,1
,One test,1
<FogOfWar:EachMove>,) <FogOfWar:EachMove> },1
,{ <FogOfWar:EachMove> },2
,<FogOfWar:EachMove> },3
2:,State 2: Liberties,1
,2: Liberties,1
<Ruleset:piece>,STRING <Ruleset:piece> ),1
,<Ruleset:piece> ),1
2>,INTEGER 2> STRING,1
,2> STRING,1
<Players:home>,) <Players:home> },2
,<Players:home> },2
<NumOfPlayers>,STRING <NumOfPlayers> args:,2
,<NumOfPlayers> args:,2
remember,( remember Value,153
,remember Value,153
,( remember State,4
,remember State,4
,optional remember clause,2
,remember clause,2
,( remember ),1
,remember ),1
pieces,capturing pieces which,3
,opponent pieces are,3
,pieces which,3
,pieces are,4
,normal pieces when,2
,pieces when,2
,) pieces in,2
,pieces in,2
,enemy pieces are,1
,your pieces and,1
,pieces and,1
,of pieces (,3
,the pieces .,3
,pieces (,6
,pieces .,6
,INTEGER pieces .,1
,intervening pieces ;,1
,pieces ;,1
,When pieces other,1
,are pieces of,1
,captured pieces --COMMA--,1
,no pieces of,1
,captured pieces available,1
,player's pieces .,1
,pieces other,1
,pieces of,2
,pieces --COMMA--,1
,pieces available,1
,dice pieces .,1
,other pieces on,1
,pieces on,1
,all pieces if,1
,all pieces (,1
,pieces if,1
,who's pieces (,2
,to pieces with,1
,pieces with,1
,the pieces around,1
,pieces around,1
into,direction into the,1
,into the,2
,swapped into our,2
,into our,2
,them into something,1
,move into omnicheck,1
,into something,1
,into omnicheck,1
,passed into the,1
<hopCapture>,{ <hopCapture> <stepMove>,1
,<hopCapture> <stepMove>,1
1st,to 1st player,1
,1st player,1
min,( min (,16
,min (,16
,( min INTEGER,8
,min INTEGER,8
value:80,state:1 value:80 ),1
,state:4 value:80 ),1
,value:80 ),2
unless,( unless captured,1
,unless captured,1
outnumber,( outnumber the,1
,outnumber the,1
<Board:walls>,{ <Board:walls> },3
,<Board:walls> },3
distance:<Equi:method>,) distance:<Equi:method> ),1
,distance:<Equi:method> ),1
Team,set Team INTEGER,179
,Team INTEGER,179
,forEach Team (,2
,Team (,2
37>,. 37> <34,1
,<34 37> STRING,1
,37> <34,1
,37> STRING,1
holes,inner holes (,2
,holes (,6
,sides holes (,2
,End holes (,2
,Inner holes with,2
,holes with,2
,Rightmost holes of,2
,holes of,2
,First holes },1
,holes },1
But,. But an,1
,But an,1
,. But at,1
,But at,1
intervening,any intervening pieces,1
,intervening pieces,1
T488>,<tiling T488> STRING,1
,T488> STRING,1
3>,<3 3> <,1
,3> <,1
,. 3> <50>,1
,3> <50>,1
,INTEGER 3> STRING,1
,3> STRING,1
many,how many Kings,1
,many Kings,1
,too many neighbors,1
,many neighbors,1
people,some people play,1
,people play,1
<trackP2>,<size> <trackP2> },1
,<trackP2> },1
value:70,state:1 value:70 ),1
,value:70 ),1
face,( face INTEGER,107
,face INTEGER,107
,( face (,6
,face (,6
<store>,<num> <store> <homes>,1
,<store> <homes>,1
Prev,Player Prev ),5
,Value Prev (,1
,Prev ),217
,Prev (,1
,is Prev P1,2
,STRING Prev ),11
,is Prev P2,2
,is Prev P3,2
,Hand Prev ),4
,Prev P1,2
,Prev P2,2
,Prev P3,2
,is Prev Mover,6
,Prev Mover,6
,Mover Prev ),194
,Next Prev ),3
,Value Prev INTEGER,3
,Prev INTEGER,3
,is Prev Next,1
,Prev Next,1
by:P1,Occupied by:P1 ),25
,by:P1 ),25
,Occupied by:P1 STRING,6
,by:P1 STRING,6
,Occupied by:P1 top:True,1
,by:P1 top:True,1
<Version:map>,) <Version:map> (,1
,<Version:map> (,1
<brick,STRING <brick Diamond>,3
,<brick Diamond>,3
,STRING <brick Spiral>,1
,STRING <brick Limping>,1
,<brick Spiral>,1
,<brick Limping>,1
After,cycling:- After a,1
,After a,1
STRING,game STRING (,942
,piece STRING P1,315
,or STRING STRING,55
,STRING STRING ),1222
,piece STRING P2,167
,P2 STRING ),116
,place STRING (,1426
,{ STRING },526
,place STRING STRING,1007
,( STRING Loss,49
,option STRING <Num>,10
,item STRING <0>,5
,<0> STRING ),5
,item STRING <9>,89
,<9> STRING ),66
,STRING (,12119
,STRING P1,1654
,STRING STRING,8323
,STRING ),13575
,STRING P2,1524
,STRING },2494
,STRING Loss,49
,STRING <Num>,10
,STRING <0>,5
,STRING <9>,89
,define STRING (,4014
,Piece STRING (,146
,( STRING ),3735
,Value STRING (,91
,) STRING ),1528
,{ STRING STRING,1899
,STRING STRING },1934
,Remembered STRING ),145
,regions STRING (,386
,Stack STRING (,722
,Stack STRING INTEGER,318
,phase STRING P1,49
,( STRING Mover,153
,phase STRING (,680
,( STRING (,2226
,STRING INTEGER,1122
,STRING Mover,751
,( STRING INTEGER,159
,P1 STRING ),148
,STRING STRING STRING,3204
,place STRING <Start:tigerSites>,1
,option STRING <Start>,15
,item STRING <,547
,> STRING ),1265
,option STRING <Board>,153
,option STRING <Tiger>,2
,ruleset STRING {,367
,STRING <Start:tigerSites>,1
,STRING <Start>,15
,STRING <,547
,STRING <Board>,153
,STRING <Tiger>,2
,STRING {,2765
,nextPhase STRING ),46
,( STRING P1,157
,item STRING <15>,57
,<15> STRING ),40
,STRING <15>,57
,if STRING (,270
,option STRING <Jump>,3
,item STRING STRING,175
,STRING STRING >,186
,STRING <Jump>,3
,STRING >,574
,( STRING ~,26
,STRING ~,26
,place STRING <Board:initTiger>,1
,phase STRING P2,18
,( STRING P2,192
,STRING <Board:initTiger>,1
,STRING STRING count:2,9
,STRING STRING count:24,4
,option STRING <Move>,2
,Piece STRING STRING,8
,STRING count:2,9
,STRING count:24,4
,STRING <Move>,2
,option STRING <Place>,1
,STRING <Place>,1
,piece STRING Each,1623
,where STRING P2,26
,by:All STRING ),9
,piece STRING ),145
,where STRING P1,28
,STRING Each,1638
,id STRING ),258
,then STRING ),27
,piece STRING Neutral,74
,place STRING {,1141
,STRING Neutral,163
,<3> STRING ),82
,<5> STRING ),81
,E STRING ),2
,STRING STRING (,147
,N STRING ),4
,option STRING <Variant>,25
,< STRING >,17
,STRING <Variant>,25
,item STRING <3>,107
,item STRING <4>,129
,<4> STRING ),82
,item STRING <5>,102
,item STRING <6>,130
,<6> STRING ),82
,item STRING <7>,96
,<7> STRING ),71
,item STRING <8>,118
,<8> STRING ),74
,STRING <3>,107
,STRING <4>,129
,STRING <5>,102
,STRING <6>,130
,STRING <7>,96
,STRING <8>,118
,coord STRING ),104
,option STRING <Moves>,2
,STRING <Moves>,2
,Mover STRING ),507
,by:P2 STRING ),6
,place STRING INTEGER,139
,item STRING <1>,20
,<1> STRING ),22
,item STRING <2>,112
,<2> STRING ),53
,option STRING <Goat>,2
,item STRING <10>,101
,<10> STRING ),59
,item STRING <11>,74
,<11> STRING ),60
,item STRING <12>,81
,<12> STRING ),48
,item STRING <13>,51
,<13> STRING ),35
,item STRING <14>,80
,<14> STRING ),52
,item STRING <16>,65
,<16> STRING ),34
,item STRING <17>,38
,<17> STRING ),27
,item STRING <18>,50
,<18> STRING ),29
,item STRING <19>,48
,<19> STRING ),36
,item STRING <20>,33
,<20> STRING ),13
,item STRING <21>,17
,<21> STRING ),7
,item STRING <22>,14
,<22> STRING ),6
,item STRING <23>,7
,<23> STRING ),5
,STRING <1>,20
,STRING <2>,112
,STRING <Goat>,2
,STRING <10>,101
,STRING <11>,74
,STRING <12>,81
,STRING <13>,51
,STRING <14>,80
,STRING <16>,65
,STRING <17>,38
,STRING <18>,50
,STRING <19>,48
,STRING <20>,33
,STRING <21>,17
,STRING <22>,14
,STRING <23>,7
,Piece STRING #1,2
,Piece STRING #2,2
,option STRING <Fox>,1
,STRING #1,321
,STRING #2,34
,STRING <Fox>,1
,define STRING <Play:kingHop>,1
,option STRING <Play>,15
,STRING <Play:kingHop>,1
,STRING <Play>,15
,sites STRING ),1062
,id STRING P1,617
,track STRING STRING,686
,STRING STRING P1,112
,STRING STRING P2,110
,= STRING End,8
,) STRING (,219
,= STRING Off,32
,In STRING (,26
,who STRING ),36
,to STRING STRING,36
,item STRING <>,55
,<> STRING ),76
,STRING End,10
,STRING Off,32
,STRING <>,55
,{ STRING (,38
,regions STRING {,12
,= STRING (,14
,to STRING ),67
,( STRING #1,197
,STRING STRING P3,35
,STRING STRING P4,27
,STRING STRING count:4,3
,STRING P3,180
,STRING P4,163
,STRING count:4,3
,what STRING ),5
,( STRING #2,23
,track STRING {,902
,( STRING STRING,908
,not STRING ),83
,firstMoveOnTrack STRING Mover,7
,if STRING STRING,73
,Distance STRING Mover,6
,mapEntry STRING (,208
,map STRING {,313
,regions STRING P1,365
,regions STRING P2,365
,#1 STRING ),124
,option STRING <Dice>,5
,STRING <Dice>,5
,( STRING from:,111
,STRING from:,140
,Var STRING INTEGER,117
,var STRING ),274
,Value STRING All,63
,STRING All,76
,Stack STRING ),9
,Var STRING (,123
,regions STRING P3,26
,regions STRING P4,25
,( STRING Next,52
,trigger STRING Next,5
,Triggered STRING P1,2
,Triggered STRING P2,10
,STRING Next,369
,Move STRING steps:,28
,STRING STRING count:<Num:piece>,3
,option STRING <Players>,17
,STRING steps:,49
,STRING count:<Num:piece>,3
,STRING <Players>,17
,match STRING (,6
,subgame STRING ),1
,subgame STRING result:,3
,STRING result:,3
,option STRING <Player>,31
,STRING <Player>,31
,mapEntry STRING #1,3
,trigger STRING Mover,7
,define STRING INTEGER,147
,id STRING P2,619
,mapEntry STRING Mover,153
,= STRING INTEGER,9
,STRING STRING count:3,27
,STRING count:3,27
,option STRING <End>,11
,STRING <End>,11
,( STRING from:0,2
,where STRING Shared,6
,track STRING <Board:track>,4
,piece STRING Shared,201
,item STRING <25>,10
,item STRING <30>,11
,item STRING <35>,5
,item STRING <40>,6
,item STRING <45>,5
,item STRING <50>,6
,item STRING <55>,3
,item STRING <60>,4
,item STRING <65>,3
,item STRING <70>,4
,item STRING <75>,3
,item STRING <80>,4
,item STRING <85>,3
,item STRING <90>,4
,item STRING <95>,3
,item STRING <100>,4
,STRING from:0,2
,STRING Shared,235
,STRING <Board:track>,4
,STRING <25>,10
,STRING <30>,11
,STRING <35>,5
,STRING <40>,6
,STRING <45>,5
,STRING <50>,6
,STRING <55>,3
,STRING <60>,4
,STRING <65>,3
,STRING <70>,4
,STRING <75>,3
,STRING <80>,4
,STRING <85>,3
,STRING <90>,4
,STRING <95>,3
,STRING <100>,4
,mapEntry STRING Next,13
,STRING STRING Mover,180
,Empty STRING ),3
,STRING STRING P5,3
,STRING STRING P6,3
,regions STRING P5,6
,regions STRING P6,6
,STRING P5,16
,STRING P6,15
,option STRING <Track>,3
,STRING <Track>,3
,#2 STRING ),14
,define STRING <Ruleset:piece>,1
,define STRING True,1
,define STRING #1,1
,( STRING #3,17
,option STRING <Throw>,1
,option STRING <Ruleset>,1
,STRING STRING count:5,3
,< STRING INTEGER,2
,>= STRING INTEGER,2
,STRING <Ruleset:piece>,1
,STRING True,2
,STRING #3,18
,STRING <Throw>,1
,STRING <Ruleset>,1
,STRING count:5,3
,subgame STRING next:1,1
,subgame STRING next:2,1
,subgame STRING next:0,1
,STRING next:1,1
,STRING next:2,1
,STRING next:0,1
,to STRING if:,1
,STRING if:,30
,id STRING P3,84
,id STRING P4,84
,Value STRING ),2
,id STRING Mover,170
,option STRING <Pieces>,1
,STRING <Pieces>,1
,) STRING #1,1
,Leap STRING (,102
,define STRING <Board:sizeHome>,1
,Each STRING ),74
,) STRING Orthogonal,6
,STRING <Board:sizeHome>,1
,STRING Orthogonal,111
,) STRING STRING,51
,if STRING Charge,1
,Hop STRING (,1
,STRING Charge,1
,and STRING (,20
,define STRING <Board:size>,21
,STRING <Board:size>,22
,option STRING <Version>,23
,STRING <Version>,23
,Piece STRING ),54
,( STRING #4,3
,piece:#1 STRING ),2
,STRING STRING #1,21
,regions STRING Shared,8
,P1 STRING STRING,4
,P2 STRING STRING,4
,Var STRING -1,8
,Decided STRING ),8
,Proposed STRING ),16
,Vote STRING ),17
,Propose STRING (,7
,note STRING to:Next,1
,vote STRING ),2
,STRING #4,4
,STRING -1,8
,STRING to:Next,6
,Next STRING ),48
,apply STRING ),6
,where STRING Prev,10
,) STRING steps:1,34
,id STRING Shared,19
,id STRING #1,15
,( STRING Prev,1
,where STRING Mover,57
,where STRING P3,4
,where STRING P4,4
,STRING Prev,11
,STRING steps:1,39
,or STRING (,13
,by:#1 STRING ),8
,( STRING Orthogonal,105
,STRING STRING count:8,2
,STRING STRING count:1,7
,STRING count:8,2
,STRING count:1,7
,INTEGER STRING ),252
,STRING STRING INTEGER,23
,to STRING (,3
,P3 STRING ),5
,P4 STRING ),5
,option STRING <Tiling>,4
,item STRING <square>,6
,<square> STRING ),5
,item STRING <hex>,5
,<hex> STRING ),5
,STRING <Tiling>,4
,STRING <square>,6
,STRING <hex>,5
,Var STRING #1,3
,( STRING TeamMover,1
,STRING TeamMover,1
,regions STRING Neutral,2
,option STRING <Each>,1
,item STRING <priority>,1
,<priority> STRING ),1
,item STRING <or>,1
,<or> STRING ),1
,STRING <Each>,1
,STRING <priority>,1
,STRING <or>,1
,define STRING <Num:pieces>,1
,STRING <Num:pieces>,1
,by:Mover STRING ),29
,trigger STRING (,6
,Triggered STRING Mover,8
,STRING STRING directed:True,13
,pair STRING STRING,19
,} STRING ),52
,STRING directed:True,13
,where STRING Neutral,41
,Level STRING Neutral,16
,Track STRING from:,18
,id STRING Neutral,29
,id STRING Next,84
,STRING STRING state:1,102
,STRING STRING state:2,6
,STRING STRING state:3,7
,STRING STRING state:4,3
,STRING STRING state:5,2
,STRING STRING state:6,2
,STRING STRING state:7,2
,STRING STRING state:8,2
,STRING state:1,102
,STRING state:2,6
,STRING state:3,7
,STRING state:4,3
,STRING state:5,2
,STRING state:6,2
,STRING state:7,6
,STRING state:8,2
,Leap STRING forward:True,1
,STRING forward:True,1
,Value STRING #1,66
,) STRING INTEGER,9
,Level STRING Mover,1
,( STRING Player,5
,STRING Player,10
,option STRING <Stack>,2
,item STRING <rectangle,1
,55> STRING ),1
,item STRING <square,5
,63> STRING ),2
,item STRING <hex,9
,60> STRING ),1
,STRING <Stack>,2
,STRING <rectangle,1
,STRING <square,5
,STRING <hex,9
,piece STRING P3,6
,option STRING <Scoring>,4
,STRING <Scoring>,4
,Edge STRING ),1
,regions STRING <Player:diceHand>,1
,STRING STRING P7,2
,STRING STRING P8,2
,STRING STRING P9,1
,STRING STRING P10,1
,STRING STRING P11,1
,STRING STRING P12,1
,STRING STRING P13,1
,STRING STRING P14,1
,STRING STRING P15,1
,STRING STRING P16,1
,STRING <Player:diceHand>,1
,STRING P7,10
,STRING P8,6
,STRING P9,1
,STRING P10,1
,STRING P11,1
,STRING P12,1
,STRING P13,1
,STRING P14,1
,STRING P15,1
,STRING P16,1
,STRING STRING loop:True,370
,STRING loop:True,370
,( STRING UNE,3
,( STRING USE,2
,( STRING USW,2
,( STRING UNW,1
,STRING STRING count:15,2
,STRING UNE,3
,STRING USE,2
,STRING USW,2
,STRING UNW,1
,STRING count:15,2
,where STRING #1,5
,define STRING <Players:num>,1
,players STRING ),2
,( STRING P3,23
,( STRING P4,18
,STRING <Players:num>,1
,Mover STRING from:,4
,if:True STRING ),1
,Stack STRING Edge,2
,( STRING Team1,5
,Team1 STRING ),1
,( STRING Team2,5
,Team2 STRING ),1
,where STRING Team1,1
,where STRING Team2,1
,STRING Edge,11
,STRING Team1,6
,STRING Team2,6
,Value STRING INTEGER,39
,mapEntry STRING INTEGER,20
,Track STRING ),236
,where STRING (,2
,Stack STRING STRING,97
,S STRING ),3
,place STRING Edge,9
,mapEntry STRING P1,7
,mapEntry STRING P2,7
,mapEntry STRING P3,2
,mapEntry STRING P4,2
,Move STRING steps:#1,2
,STRING steps:#1,2
,<2> STRING STRING,1
,<3> STRING STRING,1
,<4> STRING STRING,1
,<5> STRING STRING,1
,<6> STRING STRING,1
,<7> STRING STRING,1
,<8> STRING STRING,1
,<9> STRING STRING,1
,<10> STRING STRING,1
,<11> STRING STRING,2
,<12> STRING STRING,1
,<13> STRING STRING,1
,<14> STRING STRING,1
,<15> STRING STRING,2
,<16> STRING STRING,1
,define STRING From,1
,Propose STRING ),7
,STRING From,1
,Column STRING ),2
,Row STRING ),1
,* STRING INTEGER,108
,count STRING ),117
,from STRING ),40
,INTEGER STRING store:None,80
,STRING store:None,80
,sow STRING owner:,103
,STRING owner:,131
,track STRING <Board:track2>,5
,<6> STRING >,15
,<8> STRING >,18
,<10> STRING >,21
,<12> STRING >,21
,<14> STRING >,17
,<16> STRING >,19
,<18> STRING >,19
,<20> STRING >,17
,<22> STRING >,7
,item STRING <24>,13
,<24> STRING >,7
,item STRING <26>,8
,<26> STRING >,3
,item STRING <28>,8
,<28> STRING >,3
,STRING <Board:track2>,5
,STRING <24>,13
,STRING <26>,8
,STRING <28>,8
,) STRING steps:,21
,) STRING steps:2,6
,STRING steps:2,6
,define STRING <Board:rowSize>,4
,define STRING <Board:InitOneSeed>,1
,define STRING <Board:InitTwoSeeds>,1
,track STRING <Board:CCW2>,7
,track STRING <Board:CW1>,2
,track STRING <Board:CW2>,2
,<7> STRING >,11
,> STRING >,94
,20> STRING ),3
,23> STRING ),1
,<9> STRING >,14
,26> STRING ),1
,29> STRING ),2
,option STRING <Phase>,1
,Var STRING Undefined,4
,option STRING <Capture>,4
,STRING <Board:rowSize>,4
,STRING <Board:InitOneSeed>,1
,STRING <Board:InitTwoSeeds>,1
,STRING <Board:CCW2>,7
,STRING <Board:CW1>,2
,STRING <Board:CW2>,2
,STRING <Phase>,1
,STRING Undefined,4
,STRING <Capture>,4
,Pending STRING ),2
,option STRING <Sow>,2
,STRING <Sow>,2
,count:2 STRING owner:,2
,) STRING owner:,23
,39> STRING ),1
,44> STRING ),1
,49> STRING ),1
,54> STRING ),1
,from:#1 STRING steps:1,3
,Mover STRING from:#1,1
,numPerHole:2 STRING owner:,1
,STRING from:#1,1
,define STRING <Row:size>,15
,Player STRING ),15
,Var STRING <ExtraCapture:num>,1
,track STRING <Row:track2>,12
,remove STRING ),6
,option STRING <Row>,17
,<11> STRING >,9
,<13> STRING >,11
,<15> STRING >,14
,<17> STRING >,9
,<19> STRING >,9
,<21> STRING >,9
,option STRING <ExtraCapture>,2
,STRING <Row:size>,15
,STRING <ExtraCapture:num>,1
,STRING <Row:track2>,12
,STRING <Row>,17
,STRING <ExtraCapture>,2
,21> STRING ),1
,25> STRING ),1
,33> STRING ),1
,37> STRING ),1
,41> STRING ),1
,track STRING <Board:track1>,1
,STRING <Board:track1>,1
,- STRING INTEGER,11
,Mover STRING STRING,1
,from:#1 STRING steps:#2,14
,STRING steps:#2,14
,define STRING <Sow:numSeed>,1
,STRING <Sow:numSeed>,1
,count:4 STRING owner:,1
,remove STRING count:,6
,<24> STRING ),7
,STRING count:,6
,<4> STRING >,1
,track STRING <Row:trackCCW2>,1
,track STRING <Row:trackCW1>,1
,track STRING <Row:trackCW2>,1
,STRING <Row:trackCCW2>,1
,STRING <Row:trackCW1>,1
,STRING <Row:trackCW2>,1
,define STRING <Player:num>,1
,track STRING <Player:track>,1
,( STRING P5,5
,STRING <Player:num>,1
,STRING <Player:track>,1
,game STRING THIS,1
,. STRING owner:,1
,STRING THIS,1
,RememberValue STRING (,39
,FirstSite STRING from:,7
,INTEGER STRING {,8
,sow STRING if:,3
,>= STRING <Capture:doneSoFar>,1
,STRING <Capture:doneSoFar>,1
,track STRING <Board:trackDirection>,1
,STRING <Board:trackDirection>,1
,sow STRING apply:,30
,STRING apply:,34
,option STRING <Counters>,1
,STRING <Counters>,1
,) STRING if:,3
,track STRING <Track:directionP1>,1
,track STRING <Track:directionP2>,1
,STRING <Track:directionP1>,1
,STRING <Track:directionP2>,1
,option STRING <Rightmost>,1
,STRING <Rightmost>,1
,STRING STRING steps:1,2
,<40> STRING ),4
,item STRING <41>,1
,<41> STRING ),1
,item STRING <42>,1
,<42> STRING ),1
,item STRING <43>,1
,<43> STRING ),1
,item STRING <44>,1
,<44> STRING ),1
,<45> STRING ),3
,item STRING <46>,1
,<46> STRING ),1
,item STRING <47>,1
,<47> STRING ),1
,item STRING <48>,1
,<48> STRING ),1
,item STRING <49>,1
,<49> STRING ),1
,<50> STRING ),4
,STRING <41>,1
,STRING <42>,1
,STRING <43>,1
,STRING <44>,1
,STRING <46>,1
,STRING <47>,1
,STRING <48>,1
,STRING <49>,1
,INTEGER STRING (,49
,numPerHole:4 STRING apply:,3
,count:18 STRING apply:,1
,Count STRING to:,2
,STRING to:,2
,option STRING <Column>,1
,STRING <Column>,1
,option STRING <Skip>,1
,STRING <Skip>,1
,option STRING <Scale>,1
,item STRING <0,2
,8> STRING ),1
,STRING <Scale>,1
,STRING <0,2
,option STRING <Result>,15
,item STRING <Loss>,15
,<Loss> STRING ),15
,item STRING <Win>,16
,<Win> STRING ),16
,STRING <Result>,15
,STRING <Loss>,15
,STRING <Win>,16
,tile STRING P1,2
,tile STRING P2,2
,( STRING <End:result>,2
,option STRING <Rows>,5
,option STRING <Columns>,5
,STRING <End:result>,2
,STRING <Rows>,5
,STRING <Columns>,5
,item STRING <6,4
,item STRING <7,3
,STRING <6,4
,STRING <7,3
,option STRING <Tower>,1
,item STRING <Forwards>,1
,<Forwards> STRING ),1
,item STRING <Forward>,1
,<Forward> STRING ),1
,option STRING <Army>,1
,item STRING <Orthogonal>,3
,<Orthogonal> STRING ),27
,STRING <Tower>,1
,STRING <Forwards>,1
,STRING <Forward>,1
,STRING <Army>,1
,STRING <Orthogonal>,3
,tile STRING Each,15
,STRING STRING state:0,1
,STRING state:0,1
,and STRING STRING,3
,option STRING <Rules>,4
,STRING <Rules>,5
,Triggered STRING #1,3
,( STRING Friend,1
,( STRING Enemy,5
,STRING Friend,1
,STRING Enemy,5
,<19> STRING STRING,1
,note STRING to:All,8
,option STRING <Boundary>,2
,item STRING <Hexagon>,3
,item STRING <Limping>,4
,STRING to:All,8
,STRING <Boundary>,2
,STRING <Hexagon>,3
,STRING <Limping>,4
,option STRING <Meta>,5
,STRING <Meta>,5
,option STRING <BoardSize>,11
,STRING <BoardSize>,11
,option STRING <Swap>,1
,) STRING mover,1
,STRING <Swap>,1
,STRING mover,1
,/ STRING INTEGER,2
,move STRING (,2
,tile STRING numSides:4,2
,<= STRING (,2
,STRING numSides:4,2
,( STRING S,14
,( STRING SW,9
,( STRING SE,10
,( STRING N,17
,option STRING <Edge>,2
,STRING S,20
,STRING SW,9
,STRING SE,10
,STRING N,23
,STRING <Edge>,2
,option STRING <Size>,9
,STRING <Size>,9
,( STRING if:,9
,item STRING <Draw>,1
,<Draw> STRING ),1
,STRING <Draw>,1
,5> STRING ),2
,6> STRING ),3
,item STRING <8,2
,7> STRING ),1
,STRING <8,2
,option STRING <Group>,1
,STRING <Group>,1
,define STRING <Stars>,1
,option STRING <Shape>,1
,item STRING <Triangle>,1
,<Triangle> STRING ),1
,item STRING <Diamond>,1
,<Diamond> STRING ),1
,item STRING <Star>,1
,<Star> STRING ),1
,<Limping> STRING ),1
,option STRING <Stars>,1
,option STRING <Balance>,1
,STRING <Stars>,2
,STRING <Shape>,1
,STRING <Triangle>,1
,STRING <Diamond>,1
,STRING <Star>,1
,STRING <Balance>,1
,place STRING <Board:dot0>,1
,STRING <Board:dot0>,1
,by:Next STRING ),54
,STRING STRING count:6,5
,STRING count:6,5
,item STRING <Hexagonal>,2
,<Hexagonal> STRING >,2
,<numSides:6> STRING >,2
,item STRING <Square>,2
,<Square> STRING >,2
,<numSides:4> STRING >,2
,item STRING <Triangular>,2
,<Triangular> STRING >,2
,<numSides:3> STRING >,2
,STRING <Hexagonal>,2
,STRING <Square>,2
,STRING <Triangular>,2
,STRING STRING count:18,1
,STRING count:18,1
,STRING STRING count:12,23
,STRING count:12,23
,use STRING macro,1
,the STRING option,1
,- STRING STRING,2
,STRING STRING #2,7
,( STRING Row,21
,( STRING Column,21
,STRING macro,1
,STRING option,1
,STRING Row,21
,STRING Column,21
,exact STRING ),2
,option STRING <Model>,1
,STRING <Model>,1
,item STRING <board,2
,use:Vertex> STRING ),1
,STRING <board,2
,( STRING E,17
,( STRING W,13
,nextPhase STRING STRING,1
,STRING E,77
,STRING W,73
,phase STRING <Rules>,1
,copy:True STRING ),1
,if STRING <Remove:rule>,4
,option STRING <Remove>,2
,STRING <Remove:rule>,4
,STRING <Remove>,2
,option STRING <Exact>,1
,item STRING <exact:True>,1
,<exact:True> STRING ),1
,STRING <Exact>,1
,STRING <exact:True>,1
,STRING STRING count:9,9
,STRING count:9,9
,STRING STRING count:<Board:size>,1
,STRING count:<Board:size>,1
,by:Enemy STRING ),13
,play STRING ),2
,item STRING <P2>,1
,<P1> STRING ),1
,item STRING <P1>,1
,<P2> STRING ),1
,STRING <P2>,1
,STRING <P1>,1
,option STRING <To>,1
,STRING <To>,1
,) STRING },9
,( STRING Left,4
,Left STRING ),2
,( STRING Right,4
,Right STRING ),2
,( STRING Bottom,5
,Bottom STRING ),2
,( STRING Top,5
,Top STRING ),2
,STRING Left,4
,STRING Right,4
,STRING Bottom,5
,STRING Top,5
,item STRING <5,5
,<5 STRING ),1
,<6 STRING ),1
,STRING <5,5
,STRING STRING count:14,1
,STRING count:14,1
,option STRING <Piece>,1
,STRING <Piece>,1
,piece STRING P4,3
,STRING STRING count:40,1
,STRING count:40,1
,by:Shared STRING ),1
,STRING STRING count:17,3
,STRING count:17,3
,Sites STRING ),7
,intersection STRING (,3
,apply STRING (,2
,Triggered STRING Next,7
,Cell STRING ),7
,Site STRING (,4
,piece STRING state:,6
,append STRING (,2
,STRING state:,6
,player:Mover STRING ),3
,player:Next STRING ),1
,append STRING ),1
,trigger STRING P2,8
,between STRING ),7
,between STRING STRING,7
,item STRING <surround,2
,item STRING <custodial,2
,STRING <surround,2
,STRING <custodial,2
,option STRING <Disc>,1
,STRING <Disc>,1
,STRING STRING count:16,3
,STRING count:16,3
,<Slide> STRING ),1
,define STRING <Repetition>,2
,option STRING <Repetition>,2
,STRING STRING count:20,5
,STRING STRING count:23,2
,STRING STRING count:27,2
,STRING STRING count:31,2
,STRING STRING count:35,2
,STRING STRING count:49,2
,STRING STRING count:87,2
,STRING STRING count:44,2
,STRING STRING count:65,2
,STRING <Repetition>,4
,STRING count:20,5
,STRING count:23,2
,STRING count:27,2
,STRING count:31,2
,STRING count:35,2
,STRING count:49,2
,STRING count:87,2
,STRING count:44,2
,STRING count:65,2
,STRING STRING count:144,2
,STRING STRING count:152,2
,STRING count:144,2
,STRING count:152,2
,STRING STRING count:<Board:numPieces>,1
,STRING count:<Board:numPieces>,1
,) STRING #2,1
,option STRING <Jarl>,1
,STRING <Jarl>,1
,#5 STRING ),5
,#4 STRING ),2
,( STRING <Board:size>,1
,item STRING <3,1
,STRING <3,1
,Slide STRING (,3
,steps:2 STRING ),2
,steps:3 STRING ),2
,( STRING before:,26
,STRING before:,26
,( STRING Diagonal,95
,STRING Diagonal,95
,option STRING <Tag>,1
,item STRING <10><4>,1
,<10><4> STRING ),1
,item STRING <10><1>,1
,<10><1> STRING ),1
,STRING <Tag>,1
,STRING <10><4>,1
,STRING <10><1>,1
,Move STRING ),4
,place STRING Cell,6
,STRING STRING count:66,1
,STRING Cell,6
,STRING count:66,1
,place STRING <Board:startP1>,2
,place STRING <Board:startP2>,2
,STRING <Board:startP1>,2
,STRING <Board:startP2>,2
,STRING STRING value:1,3
,STRING STRING value:2,11
,STRING value:1,3
,STRING value:2,11
,square STRING diagonals:Alternating,1
,* STRING STRING,1
,STRING diagonals:Alternating,1
,( STRING before:10,2
,STRING before:10,2
,define STRING <Board:armSize>,1
,define STRING <Board:numPiece>,1
,shift STRING INTEGER,2
,rectangle STRING (,1
,Even STRING ),2
,STRING <Board:armSize>,1
,STRING <Board:numPiece>,1
,define STRING <Variant:promotedCaptureMove>,1
,Piece STRING <Variant:promotedMove>,1
,STRING <Variant:promotedCaptureMove>,1
,STRING <Variant:promotedMove>,1
,STRING STRING Next,177
,piece STRING (,98
,where STRING Next,23
,option STRING <Elephant>,1
,STRING <Elephant>,1
,by:Mover STRING STRING,14
,STRING STRING value:3,9
,STRING STRING value:4,9
,STRING STRING value:5,9
,STRING STRING value:6,1
,STRING STRING value:7,1
,STRING STRING value:8,1
,STRING STRING value:9,1
,STRING STRING value:10,1
,STRING STRING value:11,1
,STRING STRING value:12,1
,STRING STRING value:13,1
,STRING STRING value:14,1
,STRING STRING value:15,1
,STRING STRING value:16,1
,STRING STRING value:17,1
,STRING STRING value:18,1
,STRING STRING value:19,1
,STRING STRING value:20,1
,STRING STRING value:21,1
,STRING STRING value:22,1
,STRING value:3,9
,STRING value:4,9
,STRING value:5,9
,STRING value:6,1
,STRING value:7,1
,STRING value:8,1
,STRING value:9,1
,STRING value:10,1
,STRING value:11,1
,STRING value:12,1
,STRING value:13,1
,STRING value:14,1
,STRING value:15,1
,STRING value:16,1
,STRING value:17,1
,STRING value:18,1
,STRING value:19,1
,STRING value:20,1
,STRING value:21,1
,STRING value:22,1
,by:P1 STRING ),4
,player:Next STRING to:Next,3
,STRING STRING E,59
,STRING STRING W,59
,( STRING <p1_directions>,6
,( STRING <player1_arg>,6
,( STRING <directions>,24
,( STRING <piece_name_key>,3
,( STRING <piece_key>,3
,( STRING <king_dir>,6
,#2 STRING (,3
,INTEGER STRING STRING,3
,INTEGER STRING W,1
,INTEGER STRING E,1
,piece STRING .,13
,( STRING NNW,7
,( STRING SSW,4
,( STRING <fwd_dir>,5
,( STRING {,17
,( STRING <LF1>,2
,( STRING #5,5
,( STRING #7,2
,( STRING <piece_types>,7
,( STRING All,13
,All STRING ),3
,Orthogonal STRING ),16
,{ STRING Can,1
,or STRING Only,1
,) STRING Can,1
,STRING <p1_directions>,6
,STRING <player1_arg>,6
,STRING <directions>,24
,STRING <piece_name_key>,3
,STRING <piece_key>,3
,STRING <king_dir>,6
,STRING .,39
,STRING NNW,7
,STRING SSW,4
,STRING <fwd_dir>,5
,STRING <LF1>,2
,STRING #5,6
,STRING #7,2
,STRING <piece_types>,7
,STRING Can,2
,STRING Only,1
,count STRING INTEGER,12
,( STRING ESE,4
,INTEGER STRING WNW,4
,( STRING WNW,4
,INTEGER STRING ESE,4
,place STRING coord:<BoardConfig:King2Start>,1
,place STRING coord:<BoardConfig:Queen2Start>,1
,place STRING <BoardConfig:Bishop2Start>,1
,place STRING <BoardConfig:Knight2Start>,1
,place STRING <BoardConfig:Pawn1Start>,1
,place STRING <BoardConfig:Pawn2Start>,1
,option STRING <BoardConfig>,1
,Pawn1Start STRING >,2
,King2Start STRING >,2
,Queen2Start STRING >,2
,RookLeft2Start STRING >,2
,STRING ESE,8
,STRING WNW,8
,STRING coord:<BoardConfig:King2Start>,1
,STRING coord:<BoardConfig:Queen2Start>,1
,STRING <BoardConfig:Bishop2Start>,1
,STRING <BoardConfig:Knight2Start>,1
,STRING <BoardConfig:Pawn1Start>,1
,STRING <BoardConfig:Pawn2Start>,1
,STRING <BoardConfig>,1
,STRING STRING S,6
,STRING STRING N,6
,where STRING Player,5
,option STRING <NumOfPlayers>,2
,regions STRING P7,2
,regions STRING P8,2
,{ STRING .,26
,. STRING },24
,( STRING P6,4
,( STRING P7,4
,( STRING P8,2
,STRING <NumOfPlayers>,2
,( STRING Forward,75
,place STRING <Placement:Pawn1>,1
,place STRING <Placement:Pawn2>,1
,option STRING <Placement>,2
,STRING Forward,75
,STRING <Placement:Pawn1>,1
,STRING <Placement:Pawn2>,1
,STRING <Placement>,2
,( STRING NW,6
,( STRING NE,8
,STRING NW,6
,STRING NE,8
,<Play:doubleStep> STRING STRING,1
,Piece STRING Mover,1
,note STRING ),1
,by:Next STRING components:,6
,by:Next STRING STRING,6
,by:Mover STRING components:,30
,STRING components:,87
,( STRING <direction>,2
,STRING <direction>,2
,( STRING <p1_arg>,2
,STRING <p1_arg>,2
,( STRING ENE,2
,INTEGER STRING WSW,2
,( STRING WSW,2
,INTEGER STRING ENE,2
,STRING ENE,4
,STRING WSW,4
,define STRING as:,1
,( STRING Adjacent,50
,{ STRING This,1
,STRING as:,1
,STRING Adjacent,50
,STRING This,1
,Mover STRING in:,5
,Next STRING in:,6
,by:#1 STRING STRING,24
,option STRING <PlacementConditions>,1
,STRING in:,13
,STRING <PlacementConditions>,1
,( STRING <p1_dirs>,1
,( STRING <piece_type>,1
,functions STRING =,1
,STRING STRING Wellisch,2
,Wellisch STRING STRING,1
,STRING STRING A,1
,. STRING Wellisch's,1
,Wellisch's STRING Wellisch,1
,. STRING For,1
,<a STRING STRING,1
,STRING STRING />Wikipedia</a>,1
,. STRING INTEGER,1
,. STRING STRING,1
,STRING STRING Siegmund,1
,Siegmund STRING Jay,1
,Eric STRING STRING,1
,STRING <p1_dirs>,1
,STRING <piece_type>,1
,STRING =,1
,STRING Wellisch,3
,STRING A,1
,STRING Wellisch's,1
,STRING For,1
,STRING />Wikipedia</a>,1
,STRING Siegmund,1
,STRING Jay,1
,by:#1 STRING components:,5
,Forward STRING ),3
,Diagonal STRING ),10
,Leap STRING rotations:False,1
,STRING rotations:False,1
,( STRING Backward,42
,( STRING Forwards,18
,( STRING BL,2
,( STRING FL,3
,( STRING FR,3
,STRING Backward,42
,STRING Forwards,18
,STRING BL,2
,STRING FL,3
,STRING FR,3
,~ STRING ),14
,( STRING Backwards,4
,( STRING BR,2
,( STRING Rightwards,3
,( STRING Leftwards,3
,( STRING Leftward,1
,( STRING Rightward,1
,Forwards STRING ),1
,STRING Backwards,4
,STRING BR,2
,STRING Rightwards,3
,STRING Leftwards,3
,STRING Leftward,1
,STRING Rightward,1
,#1 STRING in:,2
,option STRING <PiecePlacement>,1
,STRING <PiecePlacement>,1
,id STRING P5,2
,id STRING P6,2
,id STRING P7,2
,( STRING at:,18
,STRING at:,18
,item STRING <29>,6
,<29> STRING ),5
,STRING <29>,6
,option STRING <High>,1
,STRING <High>,1
,STRING STRING {,5
,subgame STRING <Player:option>,5
,STRING <Player:option>,5
,. STRING End,2
,Piece STRING Shared,1
,item STRING <27>,5
,STRING <27>,5
,track STRING <Board:trackP2>,1
,<5> STRING >,1
,STRING <Board:trackP2>,1
,track STRING <Board:trackTeam2>,2
,<23> STRING >,1
,<25> STRING >,1
,STRING <Board:trackTeam2>,2
,place STRING <Option:start1>,1
,place STRING <Option:start2>,1
,Vote STRING (,1
,option STRING <Step>,1
,option STRING <Slide>,1
,option STRING <Option>,1
,STRING <Option:start1>,1
,STRING <Option:start2>,1
,STRING <Step>,1
,STRING <Slide>,1
,STRING <Option>,1
,track STRING <Board:HomeTrack2>,1
,track STRING <Board:MiddleTrack>,1
,track STRING <Board:EnemyTrack1>,1
,track STRING <Board:EnemyTrack2>,1
,STRING <Board:HomeTrack2>,1
,STRING <Board:MiddleTrack>,1
,STRING <Board:EnemyTrack1>,1
,STRING <Board:EnemyTrack2>,1
,10> STRING ),1
,item STRING <10,1
,STRING <10,1
,player STRING ),1
,by:#1 STRING on:#2,1
,STRING on:#2,1
,option STRING <ThrowSix>,1
,item STRING <36>,1
,<36> STRING ),1
,<30> STRING ),7
,STRING <ThrowSix>,1
,STRING <36>,1
,by:Enemy STRING components:,15
,by:All STRING components:,18
,by:P1 STRING components:,2
,by:P2 STRING components:,2
,by:Neutral STRING components:,2
,define STRING Move,2
,( STRING from,1
,intersection STRING #1,2
,STRING Move,2
,STRING from,2
,Triggered STRING (,1
,player:Mover STRING to:Next,2
,by:Friend STRING ),4
,by:Neutral STRING ),8
,building STRING Attacking,1
,( STRING components:,4
,define STRING state,2
,by:Player STRING ),2
,by:Player STRING components:,3
,<Scenario:playerMaps> STRING },1
,option STRING <Scenario>,1
,Symbol STRING (,64
,option STRING <FogOfWar>,1
,> STRING STRING,5
,option STRING <Doctrine1>,1
,option STRING <Doctrine2>,1
,option STRING <Doctrine3>,1
,option STRING <Doctrine4>,1
,STRING Attacking,1
,STRING state,2
,STRING <Scenario>,1
,STRING <FogOfWar>,1
,STRING <Doctrine1>,1
,STRING <Doctrine2>,1
,STRING <Doctrine3>,1
,STRING <Doctrine4>,1
,define STRING <Version:removeRule>,1
,trigger STRING #1,2
,STRING STRING rotation:0,16
,STRING STRING rotation:7,7
,STRING STRING rotation:4,11
,STRING STRING rotation:3,7
,STRING STRING rotation:1,8
,STRING STRING rotation:2,1
,STRING STRING rotation:5,5
,STRING STRING rotation:6,1
,STRING <Version:removeRule>,1
,STRING rotation:0,16
,STRING rotation:7,7
,STRING rotation:4,11
,STRING rotation:3,7
,STRING rotation:1,8
,STRING rotation:2,1
,STRING rotation:5,5
,STRING rotation:6,1
,STRING STRING value:,16
,option STRING <CheckmateRule>,1
,STRING value:,16
,STRING <CheckmateRule>,1
,Pieces STRING ),2
,option STRING <Movement>,1
,STRING <Movement>,1
,option STRING <CapThreshold>,1
,<25> STRING ),6
,<35> STRING ),3
,STRING <CapThreshold>,1
,Group STRING Mover,8
,Group STRING Next,8
,Groups STRING if:,14
,) STRING includeSelf:True,1
,step STRING (,2
,define STRING <BoardShape:directionScored>,2
,define STRING <BoardShape:directionUsed>,2
,define STRING <BoardShape:gridType>,6
,option STRING <GType>,2
,option STRING <SType>,2
,option STRING <BoardShape>,7
,<Adjacent> STRING ),4
,<All> STRING ),10
,STRING includeSelf:True,1
,STRING <BoardShape:directionScored>,2
,STRING <BoardShape:directionUsed>,2
,STRING <BoardShape:gridType>,6
,STRING <GType>,2
,STRING <SType>,2
,STRING <BoardShape>,7
,option STRING <Line>,1
,Diamond> STRING ),8
,item STRING <tri,7
,item STRING <brick,5
,item STRING <tri>,2
,<tri> STRING ),2
,option STRING <Connection>,2
,item STRING <Diagonal>,2
,<Diagonal> STRING ),2
,item STRING <All>,2
,item STRING <Adjacent>,2
,item STRING <OffDiagonal>,2
,<OffDiagonal> STRING ),2
,STRING <Line>,1
,STRING <tri,7
,STRING <brick,5
,STRING <tri>,2
,STRING <Connection>,2
,STRING <Diagonal>,2
,STRING <All>,2
,STRING <Adjacent>,2
,STRING <OffDiagonal>,2
,define STRING <BoardShape:directionsUsed>,3
,STRING <BoardShape:directionsUsed>,3
,item STRING <tiling,10
,STRING <tiling,10
,( STRING True,1
,( STRING SSE,3
,( STRING NNE,5
,STRING SSE,3
,STRING NNE,5
,STRING STRING fillColour:,4
,P1 STRING fillColour:,2
,P2 STRING fillColour:,2
,STRING fillColour:,8
,option STRING <TurnType>,1
,STRING <TurnType>,1
,define STRING ),1
,define STRING arg:,2
,arg: STRING see,1
,define STRING No,1
,define STRING Friendly,1
,( STRING <CapOption:friendHops>,1
,<CapOption:friendHops> STRING ),1
,( STRING <CapOption:enemyHops>,1
,define STRING Options:,1
,. STRING or,1
,define STRING <ScoreOption:discVal>,1
,propose STRING ),1
,define STRING argument,3
,#2 STRING STRING,4
,( STRING <Multi:influence>,2
,option STRING <NumberPlayers>,1
,option STRING <CapOption>,1
,option STRING <ChosenHop>,1
,option STRING <Multi>,1
,option STRING <Equi>,1
,option STRING <PlaceDisc>,1
,option STRING <ScoreOption>,1
,item STRING <-10>,1
,<-10> STRING ),1
,STRING arg:,2
,STRING see,1
,STRING No,1
,STRING Friendly,1
,STRING <CapOption:friendHops>,1
,STRING <CapOption:enemyHops>,1
,STRING Options:,1
,STRING or,1
,STRING <ScoreOption:discVal>,1
,STRING argument,3
,STRING <Multi:influence>,2
,STRING <NumberPlayers>,1
,STRING <CapOption>,1
,STRING <ChosenHop>,1
,STRING <Multi>,1
,STRING <Equi>,1
,STRING <PlaceDisc>,1
,STRING <ScoreOption>,1
,STRING <-10>,1
,Limping> STRING ),4
,board STRING use:Cell,1
,STRING use:Cell,1
,tile STRING Neutral,1
,item STRING <Default,1
,item STRING <DefaultAndCount,1
,STRING <Default,1
,STRING <DefaultAndCount,1
,option STRING <Center>,1
,STRING <Center>,1
,define STRING from,1
,by:Mover STRING on:Edge,1
,define STRING One,1
,by:#1 STRING on:Cell,1
,define STRING continuity,1
,define STRING work,1
,define STRING note,1
,id STRING #3,1
,id STRING #4,1
,Value STRING #2,1
,by:#4 STRING ),1
,id STRING #5,1
,by:#5 STRING ),1
,define STRING bug,1
,by:Mover STRING on:Cell,1
,define STRING remembered,1
,STRING on:Edge,1
,STRING One,1
,STRING on:Cell,2
,STRING continuity,1
,STRING work,1
,STRING note,1
,STRING bug,1
,STRING remembered,1
,define STRING Cannot,1
,option STRING <CellBackground>,1
,STRING Cannot,1
,STRING <CellBackground>,1
,Around STRING ),1
,<112> STRING ),1
,<198> STRING ),1
,<288> STRING ),1
,option STRING <PlaceBy>,1
,option STRING <NeighborsOf>,1
,STRING <PlaceBy>,1
,STRING <NeighborsOf>,1
,by:Mover STRING top:False,1
,STRING top:False,1
,the STRING clauses,1
,define STRING Two,1
,define STRING Test,1
,define STRING Remaining,1
,( STRING the,1
,define STRING Opponent,1
,define STRING Selects,1
,define STRING shows,1
,define STRING phases:,2
,place STRING state:7,4
,03> STRING ),3
,07> STRING ),1
,option STRING <Variants>,1
,STRING clauses,1
,STRING Two,1
,STRING Test,1
,STRING Remaining,1
,STRING the,1
,STRING Opponent,1
,STRING Selects,1
,STRING shows,1
,STRING phases:,2
,STRING <Variants>,1
,- STRING (,3
,difference STRING (,1
,Square> STRING ),2
,Triangle> STRING ),1
,Star> STRING ),2
,Hexagon> STRING ),1
,item STRING <celtic>,1
,<celtic> STRING ),1
,item STRING <brick>,1
,<brick> STRING ),1
,Spiral> STRING ),1
,item STRING <quadhex>,1
,<quadhex> STRING ),1
,T31212> STRING ),1
,T333333_33434> STRING ),1
,T33336> STRING ),1
,T33344> STRING ),1
,T3464> STRING ),1
,T3636> STRING ),1
,T4612> STRING ),1
,T488> STRING ),1
,option STRING <Dual>,1
,STRING <celtic>,1
,STRING <brick>,1
,STRING <quadhex>,1
,STRING <Dual>,1
,define STRING <Players:sumFingers>,1
,STRING <Players:sumFingers>,1
,define STRING <Num:row>,1
,+ STRING INTEGER,1
,repeat STRING INTEGER,1
,>= STRING STRING,2
,STRING <Num:row>,1
,<= STRING STRING,1
,item STRING <Next>,2
,<Next> STRING ),2
,item STRING <Mover>,2
,<Mover> STRING ),2
,<55> STRING ),1
,<60> STRING ),1
,<65> STRING ),2
,<70> STRING ),1
,<75> STRING ),1
,<80> STRING ),1
,<85> STRING ),1
,<90> STRING ),1
,<95> STRING ),1
,<100> STRING ),1
,STRING <Next>,2
,STRING <Mover>,2
,option STRING <Challenge>,15
,STRING <Challenge>,15
,item STRING <4,1
,item STRING <14,1
,item STRING <12,1
,STRING <4,1
,STRING <14,1
,STRING <12,1
,regions STRING HintRegions,1
,Sum STRING (,1
,STRING HintRegions,1
,<26> STRING ),4
,<27> STRING ),4
,<28> STRING ),4
,item STRING <31>,1
,<31> STRING ),2
,item STRING <32>,1
,<32> STRING ),1
,item STRING <33>,1
,<33> STRING ),1
,item STRING <34>,1
,<34> STRING ),2
,STRING <31>,1
,STRING <32>,1
,STRING <33>,1
,STRING <34>,1
,<111> STRING ),1
,<175> STRING ),1
,<260> STRING ),1
,<369> STRING ),1
,item STRING <31,1
,STRING <31,1
,define STRING <Robots:num>,1
,define STRING <SafeTeleportation:num>,1
,option STRING <SafeTeleportation>,1
,option STRING <Robots>,1
,STRING <Robots:num>,1
,STRING <SafeTeleportation:num>,1
,STRING <SafeTeleportation>,1
,STRING <Robots>,1
,option STRING <challenge>,2
,STRING <challenge>,2
,W STRING ),1
,place STRING <Board:start1>,1
,place STRING <Board:start2>,1
,<170> STRING ),1
,STRING <Board:start1>,1
,STRING <Board:start2>,1
,item STRING <692,1
,STRING <692,1
,2> STRING ),1
,3> STRING ),1
,4> STRING ),1
,item STRING <12><14><4>,1
,<12><14><4> STRING ),1
,item STRING <14><18><6>,1
,<14><18><6> STRING ),1
,item STRING <16><21><8>,1
,<16><21><8> STRING ),1
,option STRING <OuterRing>,1
,item STRING <0><,1
,item STRING <2><,1
,STRING <12><14><4>,1
,STRING <14><18><6>,1
,STRING <16><21><8>,1
,STRING <OuterRing>,1
,STRING <0><,1
,STRING <2><,1
,place STRING coord:<Board:startTheseus>,1
,place STRING coord:<Board:startMinotaur>,1
,28> STRING ),1
,88> STRING ),1
,option STRING <Minotaur>,2
,STRING coord:<Board:startTheseus>,1
,STRING coord:<Board:startMinotaur>,1
,STRING <Minotaur>,2
,<63> STRING ),1
,<127> STRING ),1
,<255> STRING ),1
,<511> STRING ),1
by:P2,Occupied by:P2 ),27
,by:P2 ),27
,Occupied by:P2 STRING,8
,by:P2 STRING,8
,Occupied by:P2 on:Cell,2
,by:P2 on:Cell,2
,Occupied by:P2 top:True,1
,by:P2 top:True,1
by:P3,Occupied by:P3 ),1
,by:P3 ),1
by:P4,Occupied by:P4 ),1
,by:P4 ),1
coord:<Board:startTheseus>,STRING coord:<Board:startTheseus> ),1
,coord:<Board:startTheseus> ),1
through:,W through: (,5
,N through: (,2
,S through: (,2
,E through: (,5
,through: (,37
,Orthogonal through: (,19
,INTEGER through: (,3
,All through: (,1
if:False,apply if:False (,2
,if:False (,5
,to if:False (,3
at:38,Edge at:38 ),3
,at:38 ),3
NonMover,forEach NonMover if:,35
,NonMover if:,35
,use NonMover for,1
,NonMover for,1
at:39,Edge at:39 ),3
,at:39 ),3
conditional,- conditional (,1
,conditional (,1
at:34,Edge at:34 ),5
,at:34 ),5
at:35,Edge at:35 ),5
,at:35 ),5
Eric,by Eric STRING,1
,Eric STRING,1
,) Eric to,1
,Eric to,1
at:36,Edge at:36 ),3
,at:36 ),3
at:37,Edge at:37 ),3
,at:37 ),3
at:30,Edge at:30 ),6
,at:30 ),6
numbers,these numbers also,1
,numbers also,1
store:None,STRING store:None {,53
,store:None {,64
,STRING store:None (,23
,store:None (,55
,STRING store:None ),1
,store:None ),1
,) store:None {,1
,STRING store:None <Board:track>,1
,store:None <Board:track>,1
,STRING store:None <Board:tracks>,1
,store:None <Board:tracks>,2
,STRING store:None <Row:tracks>,1
,store:None <Row:tracks>,1
,INTEGER store:None (,26
,INTEGER store:None {,10
,) store:None <Board:tracks>,1
,<Board> store:None (,1
,<Board:size> store:None (,3
,<Row:size> store:None (,1
,<Column:size> store:None (,1
Rightmost,The Rightmost holes,2
,Rightmost holes,2
at:31,Edge at:31 ),6
,at:31 ),6
at:32,what at:32 ),1
,at:32 ),6
,Edge at:32 ),5
<rook_spaces>,<rook_dir> <rook_spaces> ),6
,<rook_spaces> ),6
<High>,STRING <High> args:,1
,<High> args:,1
4>,<4 4> <,1
,4> <,1
,INTEGER 4> STRING,1
,4> STRING,1
at:33,what at:33 ),1
,at:33 ),6
,Edge at:33 ),5
<doneSoFar>,{ <doneSoFar> <numCounters>,1
,<doneSoFar> <numCounters>,1
Full,is Full ),8
,Full ),8
value:60,state:1 value:60 ),2
,value:60 ),2
swapped,got swapped into,2
,swapped into,2
Hoplites,and Hoplites -------------------------------------------------------,1
,Hoplites -------------------------------------------------------,1
39>,. 39> STRING,1
,. 39> <40,1
,39> STRING,1
,39> <40,1
First,) First holes,1
,First holes,1
,= First Attack,1
,First Attack,1
,movement First some,1
,First some,1
<PlaceDisc:suicideOption>,forEach <PlaceDisc:suicideOption> if:<PlaceDisc:location>,1
,<PlaceDisc:suicideOption> if:<PlaceDisc:location>,1
Remaining,STRING Remaining piece,1
,Remaining piece,1
-216,rotate -216 (,3
,-216 (,3
maps,Player maps (,1
,maps (,1
<Version:start>,{ <Version:start> },3
,<Version:start> },4
,rules <Version:start> (,1
,<Version:start> (,1
,rules <Version:start> <Version:play>,1
,<Version:start> <Version:play>,1
,start <Version:start> ),2
,<Version:start> ),2
,) <Version:start> },1
seeds,with seeds at,2
,seeds at,2
<Scale>,STRING <Scale> args:,1
,<Scale> args:,1
at:41,Edge at:41 ),3
,at:41 ),3
5>,<hex 5> <0,1
,5> <0,1
,<6 5> STRING,1
,5> STRING,2
,<5 5> <,2
,5> <,2
,. 5> <12>,1
,5> <12>,1
,INTEGER 5> STRING,1
<cond>,{ <cond> },1
,<cond> },1
<Swap:playRules>,play <Swap:playRules> ),1
,<Swap:playRules> ),1
<BoardShape:directionsUsed>,STRING <BoardShape:directionsUsed> ),3
,) <BoardShape:directionsUsed> ),5
,<BoardShape:directionsUsed> ),8
,Group <BoardShape:directionsUsed> Mover,2
,Group <BoardShape:directionsUsed> Next,1
,<BoardShape:directionsUsed> Mover,2
,<BoardShape:directionsUsed> Next,1
at:42,Edge at:42 ),2
,at:42 ),2
at:43,Edge at:43 ),2
,at:43 ),2
pyramidal:True,INTEGER pyramidal:True ),2
,pyramidal:True ),4
,<Board> pyramidal:True ),2
<Version:consequence>,Piece <Version:consequence> ),1
,<Version:consequence> ),1
at:44,Edge at:44 ),2
,at:44 ),2
<pieOrNot>,<starting> <pieOrNot> },1
,<pieOrNot> },1
look,) look the,1
,look the,1
Stack,place Stack STRING,1139
,Stack STRING,1148
,size Stack in:,13
,Stack in:,13
,size Stack at:#1,3
,Stack at:#1,5
,size Stack STRING,9
,size Stack at:,80
,Stack at:,80
,size Stack at:<End:site1>,1
,size Stack at:<End:site2>,1
,size Stack at:<End:site3>,1
,size Stack at:<End:site4>,1
,size Stack at:<End:site5>,1
,size Stack at:<End:site6>,1
,size Stack at:12,5
,size Stack at:0,2
,Stack at:<End:site1>,1
,Stack at:<End:site2>,1
,Stack at:<End:site3>,1
,Stack at:<End:site4>,1
,Stack at:<End:site5>,1
,Stack at:<End:site6>,1
,Stack at:12,5
,Stack at:0,2
,size Stack at:1,1
,size Stack at:2,1
,size Stack at:13,5
,size Stack at:14,4
,size Stack at:15,4
,Stack at:1,1
,Stack at:2,1
,Stack at:13,5
,Stack at:14,4
,Stack at:15,4
,size Stack at:10,3
,size Stack at:11,3
,size Stack at:8,1
,size Stack at:9,1
,size Stack at:17,1
,size Stack at:18,1
,Stack at:10,3
,Stack at:11,3
,Stack at:8,1
,Stack at:9,1
,Stack at:17,1
,Stack at:18,1
,place Stack items:,24
,Stack items:,24
,place Stack items:<Player:init>,4
,Stack items:<Player:init>,4
,count Stack at:#1,2
at:40,Edge at:40 ),3
,at:40 ),3
<playMove>,<move> <playMove> },1
,<playMove> },1
<Moves>,STRING <Moves> args:,2
,<Moves> args:,2
,Each <Moves> ),1
,<Moves> ),1
value:50,state:1 value:50 ),2
,state:4 value:50 ),1
,state:3 value:50 ),1
,value:50 ),4
THIS,STRING THIS IS,1
,THIS IS,1
<Num:players>,players <Num:players> ),1
,<Num:players> ),1
if:,between if: (,176
,to if: (,1175
,if: (,2749
,) if: (,981
,apply if: (,133
,Die if: (,57
,replayDouble:True if: (,17
,combined:True if: (,4
,Player if: (,14
,STRING if: (,30
,#5 if: (,1
,Orthogonal if: (,23
,#2 if: (,10
,from if: (,10
,FirstSite if: (,3
,NonMover if: (,35
,from:#1 if: (,1
,sow if: (,22
,#1 if: (,9
,Groups if: (,14
,Diagonal if: (,3
,<Board:3dSites> if: (,1
,INTEGER if: (,2
,} if: (,4
,level:0 if: (,2
,<Capture:distance> if: (,2
,Own if: (,1
,#3 if: (,4
,after:9 if: (,4
,after:1 if: (,3
,Cell if: (,1
,before:1 if: (,2
,after:2 if: (,1
,Track if: (,1
,. if: (,1
,at:#1 if: (,2
<NumOfPlayers:CheckMate>,then <NumOfPlayers:CheckMate> ),2
,<NumOfPlayers:CheckMate> ),2
allow,to allow (,1
,allow (,1
Options,for Options (,7
,) Options (,6
,Options (,13
,) Options Defines,1
,Options Defines,1
,--------------------------------------------- Options for,1
,Options for,1
needed,is needed before,1
,needed before,1
,is needed to,2
,needed to,2
Knight_rotated,to Knight_rotated .,2
,Knight_rotated .,2
6>,<7 6> STRING,1
,6> STRING,3
,. 6> STRING,2
,<6 6> <,1
,6> <,1
rule,off rule (,1
,off rule ),2
,Trap rule Squares,1
,off rule on,1
,rule (,1
,rule ),2
,rule Squares,1
,rule on,1
,a rule that,1
,rule that,1
update,We update the,1
,update the,1
,to update for,1
,update for,1
,to update (,1
,update (,1
bitter,the bitter end,1
,bitter end,1
<RF2>,<LB2> <RF2> <RB2>,2
,<RF2> <RB2>,2
origin:6,expand origin:6 steps:6,1
,origin:6 steps:6,1
origin:7,expand origin:7 steps:6,1
,origin:7 steps:6,1
Empty,is Empty (,947
,sites Empty ),527
,Empty (,947
,Empty ),530
,is Empty INTEGER,26
,Empty INTEGER,27
,is Empty STRING,3
,Empty STRING,3
,is Empty #1,3
,Empty #1,3
,sites Empty Edge,22
,Empty Edge,26
,) Empty Orthogonal,8
,Empty Orthogonal,8
,sites Empty INTEGER,1
,) Empty ),3
,is Empty Cell,2
,sites Empty Vertex,4
,Empty Cell,9
,Empty Vertex,5
,is Empty Edge,4
,is Empty Vertex,1
,sites Empty Cell,7
,LineOfSight Empty at:,3
,Empty at:,3
,is Empty #2,1
,Empty #2,1
origin:4,expand origin:4 steps:6,1
,origin:4 steps:6,1
Control,take Control of:All,3
,Control of:All,3
,take Control of:P1,1
,take Control of:P2,1
,take Control of:P3,1
,take Control of:P4,1
,Control of:P1,1
,Control of:P2,1
,Control of:P3,1
,Control of:P4,1
origin:5,expand origin:5 steps:6,1
,origin:5 steps:6,1
combined:True,Die combined:True if:,4
,combined:True if:,4
,Die combined:True replayDouble:True,1
,Die combined:True (,1
,combined:True replayDouble:True,1
,combined:True (,1
origin:8,expand origin:8 steps:6,1
,origin:8 steps:6,1
origin:9,expand origin:9 steps:6,1
,origin:9 steps:6,1
value:40,state:1 value:40 ),3
,state:3 value:40 ),1
,value:40 ),4
definition,suitable definition we,1
,definition we,1
<EachMove>,<AttackCheck> <EachMove> <Metadata>,1
,<EachMove> <Metadata>,1
twin,The twin piece,1
,a twin (,2
,twin piece,1
,twin (,2
Continuation,) Continuation of,1
,Continuation of,1
winning,the winning of,2
,winning of,2
apply,( apply (,635
,apply (,635
,( apply if:,133
,apply if:,133
,( apply if:True,5
,apply if:True,5
,( apply STRING,8
,apply STRING,8
,( apply We,1
,apply We,1
,( apply #2,1
,apply #2,1
,( apply if:False,2
,apply if:False,2
again,enter again --COMMA--,3
,again --COMMA--,4
,play again --COMMA--,1
,capture again in,1
,again in,1
7>,. 7> <48,1
,. 7> <56,1
,7> <48,1
,7> <56,1
,<7 7> <,2
,7> <,2
,<8 7> STRING,1
,7> STRING,1
Charge,STRING Charge of,1
,Charge of,1
T4612>,<tiling T4612> STRING,1
,T4612> STRING,1
Forest/Shallow,) Forest/Shallow water,1
,Forest/Shallow water,1
origin:2,expand origin:2 steps:6,1
,origin:2 steps:6,1
origin:3,expand origin:3 steps:6,1
,origin:3 steps:6,1
NextCanNotMove,- NextCanNotMove (,8
,NextCanNotMove (,8
at:60,what at:60 ),1
,at:60 ),1
origin:0,expand origin:0 steps:6,1
,origin:0 steps:6,1
,expand origin:0 steps:3,1
,origin:0 steps:3,1
Captures,Non Captures moves,1
,Captures moves,1
,max Captures (,1
,Captures (,1
<RF1>,<LB1> <RF1> <RB1>,2
,<RF1> <RB1>,2
origin:1,expand origin:1 steps:6,1
,origin:1 steps:6,1
use:Edge,} use:Edge ),9
,use:Edge ),32
,<Player:track> use:Edge ),1
,<Player:tracks> use:Edge ),6
,<Board:type> use:Edge ),10
,<Version:type> use:Edge ),1
,) use:Edge ),5
Infantry,) Infantry Moves,1
,Infantry Moves,1
/-----------------------------------------,) /----------------------------------------- Defines,1
,/----------------------------------------- Defines,1
cells,nearest cells if,1
,destination cells are,1
,three cells regardless,2
,cells if,1
,cells are,1
,cells regardless,2
,and cells to,1
,cells to,1
,unwanted cells .,1
,cells .,1
value:30,state:1 value:30 ),1
,value:30 ),1
<Version:endRules>,) <Version:endRules> ),1
,<Version:endRules> ),1
yields,it yields after,1
,yields after,1
removal,Player removal (,1
,removal (,1
,a removal --COMMA--,1
,removal --COMMA--,1
Decided,is Decided STRING,8
,Decided STRING,8
step,( step (,13
,step (,16
,( step Orthogonal,7
,step Orthogonal,7
,Single step (,1
,on step (,2
,to step INTEGER,6
,step INTEGER,6
,( step STRING,2
,step STRING,2
,( step Forwards,1
,( step Backwards,1
,step Forwards,1
,step Backwards,1
,remaining step would,1
,step would,1
noRepeat,( noRepeat ),9
,noRepeat ),9
,( noRepeat Positional,1
,noRepeat Positional,1
value:38,state:2 value:38 ),3
,value:38 ),3
value:39,state:2 value:39 ),1
,value:39 ),1
<RookRight2Start>,<RookLeft2Start> <RookRight2Start> <Bishop2Start>,1
,<RookRight2Start> <Bishop2Start>,1
ExtendName,piece ExtendName P2,16
,piece ExtendName P3,2
,piece ExtendName P4,2
,ExtendName P2,16
,ExtendName P3,2
,ExtendName P4,2
value:36,state:1 value:36 ),3
,value:36 ),3
value:37,state:1 value:37 ),2
,value:37 ),2
after:35,) after:35 ),6
,~ after:35 ),4
,after:35 ),10
state:,} state: (,4
,state: (,11
,Mover state: (,1
,STRING state: (,6
<BoardSize:gridType>,board <BoardSize:gridType> use:Cell,1
,<BoardSize:gridType> use:Cell,1
<ctr>,<bgrd> <ctr> },1
,<ctr> },1
8>,INTEGER 8> <0,1
,<square 8> <0,2
,8> <0,3
,. 8> STRING,1
,8> STRING,1
,<6 8> <,1
,8> <,2
,<8 8> <,1
LargePiece,sites LargePiece at:,1
,LargePiece at:,1
Rectangle,hex Rectangle INTEGER,6
,Rectangle INTEGER,6
during,check during slide,1
,during slide,1
,reset during the,1
,during the,1
degrees,INTEGER degrees off,1
,degrees off,1
<trackDirection>,<size> <trackDirection> },1
,<trackDirection> },1
<ThrowSix>,STRING <ThrowSix> args:,1
,<ThrowSix> args:,1
considerations:,end considerations: (,1
,considerations: (,1
origin:191,expand origin:191 steps:3,1
,origin:191 steps:3,1
<gridType>,{ <gridType> <directionUsed>,3
,<gridType> <directionUsed>,3
,{ <gridType> <directionsUsed>,3
,<gridType> <directionsUsed>,3
,{ <gridType> },2
,<gridType> },2
whats:,) whats: {,2
,whats: {,15
,} whats: {,2
,All whats: {,6
,INTEGER whats: {,5
coord:<BoardConfig:Queen2Start>,STRING coord:<BoardConfig:Queen2Start> ),1
,coord:<BoardConfig:Queen2Start> ),1
<60>,STRING <60> <,3
,<60> <,3
,STRING <60> STRING,1
,<60> STRING,1
value:20,STRING value:20 ),1
,value:20 ),1
lost,have lost .,1
,lost .,1
games,( games {,3
,games {,3
,( games (,3
,games (,3
value:21,STRING value:21 ),1
,value:21 ),1
<Capture:numCounters>,) <Capture:numCounters> ),1
,<Capture:numCounters> ),1
value:22,STRING value:22 ),1
,value:22 ),1
T3636>,<tiling T3636> STRING,1
,T3636> STRING,1
<Size:pile>,- <Size:pile> INTEGER,1
,Count <Size:pile> at:0,1
,<Size:pile> INTEGER,1
,<Size:pile> at:0,1
Vote,move Vote STRING,18
,Vote STRING,18
value:18,STRING value:18 ),1
,value:18 ),1
still,is still very,1
,still very,1
value:19,STRING value:19 ),1
,value:19 ),1
by:Neutral,Occupied by:Neutral ),10
,by:Neutral ),10
,Occupied by:Neutral STRING,10
,Occupied by:Neutral container:,2
,by:Neutral STRING,10
,by:Neutral container:,2
,Occupied by:Neutral container:1,1
,of:All by:Neutral at:,1
,by:Neutral container:1,1
,by:Neutral at:,1
,Occupied by:Neutral on:Edge,4
,by:Neutral on:Edge,4
9>,<5 9> <,1
,9> <,1
var,( var STRING,274
,var STRING,274
,( var ),93
,var ),93
work,not work in,1
,work in,1
,STRING work for,1
,work for,1
hints,( hints {,8
,hints {,8
Proposed,is Proposed STRING,16
,Proposed STRING,16
Out,steps:6 Out ),12
,Out ),12
fail,will fail when,1
,fail when,1
origin:181,expand origin:181 steps:3,1
,origin:181 steps:3,1
Equiversi,default Equiversi (,1
,default Equiversi and,1
,default Equiversi INTEGER,2
,Equi Equiversi },1
,Equiversi (,1
,Equiversi and,1
,Equiversi INTEGER,2
,Equiversi },1
min:1,Value min:1 max:,9
,min:1 max:,9
,Value min:1 max:12,1
,min:1 max:12,1
value:12,STRING value:12 ),1
,value:12 ),1
value:13,STRING value:13 ),1
,value:13 ),1
min:0,Value min:0 max:,5
,min:0 max:,5
<Metadata>,<EachMove> <Metadata> },1
,<Metadata> },1
<CheckmateRule:Ending>,or <CheckmateRule:Ending> (,1
,<CheckmateRule:Ending> (,1
min:3,#1 min:3 ),2
,min:3 ),2
value:10,) value:10 ),2
,value:10 ),5
,STRING value:10 ),1
,INTEGER value:10 ),2
min:2,Value min:2 max:,1
,min:2 max:,1
,Value min:2 max:4,1
,min:2 max:4,1
,Value min:2 max:3,1
,min:2 max:3,1
<homes>,<store> <homes> <track>,1
,<homes> <track>,1
value:11,STRING value:11 ),1
,value:11 ),1
min:5,#1 min:5 ),1
,min:5 ),1
Amazon,to Amazon .,2
,Amazon .,2
value:16,STRING value:16 ),1
,value:16 ),1
Shoot,move Shoot (,3
,Shoot (,6
,) Shoot (,3
value:17,STRING value:17 ),1
,value:17 ),1
value:14,STRING value:14 ),1
,value:14 ),1
stated,be stated as,1
,stated as,1
value:15,STRING value:15 ),1
,value:15 ),1
at:16,who at:16 ),1
,at:16 ),12
,what at:16 ),1
,Edge at:16 ),7
,Vertex at:16 ),3
<rangeP1>,<shape> <rangeP1> <rangeP2>,1
,<rangeP1> <rangeP2>,1
at:17,who at:17 ),2
,at:17 ),14
,Stack at:17 ),1
,what at:17 ),1
,Edge at:17 ),7
,Vertex at:17 ),3
at:EndOfTurn,~ at:EndOfTurn ),2
,at:EndOfTurn ),39
,) at:EndOfTurn ),35
,after:10 at:EndOfTurn ),2
at:18,who at:18 ),2
,at:18 ),14
,Stack at:18 ),1
,what at:18 ),1
,Edge at:18 ),7
,Vertex at:18 ),3
regions,( regions STRING,1207
,regions STRING,1207
,( regions P1,177
,regions P1,177
,( regions P2,176
,regions P2,176
,( regions P3,14
,( regions P4,11
,regions P3,14
,regions P4,11
,( regions P5,1
,regions P5,1
,the regions produced,1
,regions produced,1
,( regions All,1
,regions All,1
,( regions {,209
,regions {,209
,( regions HintRegions,2
,regions HintRegions,2
,( regions (,2
,regions (,2
at:19,what at:19 ),1
,at:19 ),11
,Edge at:19 ),7
,Vertex at:19 ),3
at:12,Stack at:12 ),5
,at:12 ),21
,what at:12 level:0,1
,what at:12 level:1,1
,at:12 level:0,1
,at:12 level:1,1
,who at:12 ),4
,count at:12 ),1
,what at:12 ),1
,Edge at:12 ),7
,Vertex at:12 ),3
StepsOnTrack,count StepsOnTrack (,2
,StepsOnTrack (,2
at:13,Stack at:13 ),5
,at:13 ),20
,who at:13 ),4
,what at:13 ),1
,Edge at:13 ),7
,Vertex at:13 ),3
at:14,Stack at:14 ),4
,at:14 ),18
,who at:14 ),3
,what at:14 ),1
,Edge at:14 ),7
,Vertex at:14 ),3
<Equi>,STRING <Equi> args:,1
,<Equi> args:,1
at:15,Stack at:15 ),4
,at:15 ),18
,who at:15 ),3
,what at:15 ),1
,Edge at:15 ),7
,Vertex at:15 ),3
<hints>,<size> <hints> },4
,<hints> },5
,<size> <hints> <start>,1
,<hints> <start>,1
,{ <hints> },1
isolated,cell isolated from,1
,isolated from,1
<0>,STRING <0> STRING,4
,<0> STRING,5
,STRING <0> <1>,1
,<0> <1>,2
,Pawn2Start <0> <1>,1
,<1> <0> STRING,1
at:10,who at:10 ),3
,Stack at:10 ),3
,at:10 ),19
,count at:10 ),1
,what at:10 ),1
,Edge at:10 ),8
,Vertex at:10 ),3
at:11,who at:11 ),3
,Stack at:11 ),3
,at:11 ),20
,count at:11 ),2
,what at:11 ),1
,Edge at:11 ),8
,Vertex at:11 ),3
specified,is specified for,3
,specified for,3
,but specified explicitly,1
,specified explicitly,1
,rotation specified in,1
,specified in,1
<Model:board>,{ <Model:board> (,1
,<Model:board> (,1
<Board:start1>,{ <Board:start1> },1
,STRING <Board:start1> ),1
,<Board:start1> },1
,<Board:start1> ),1
game:,the game: Double,1
,the game: Start,1
,game: Double,1
,game: Start,1
orthogonal,the orthogonal directions,1
,orthogonal directions,1
<Column>,STRING <Column> args:,1
,<Column> args:,1
<Variants>,STRING <Variants> args:,1
,<Variants> args:,1
<Mover>,STRING <Mover> STRING,2
,<Mover> STRING,2
<BoardConfig:RegionDarkPhase>,Phase <BoardConfig:RegionDarkPhase> ),1
,<BoardConfig:RegionDarkPhase> ),1
<10,26> <10 25>,1
,> <10 .,2
,28> <10 29>,1
,<10 25>,1
,<10 .,2
,<10 29>,1
,STRING <10 20>,1
,<10 20>,1
<Variant:promotedCaptureMove>,STRING <Variant:promotedCaptureMove> ),1
,<Variant:promotedCaptureMove> ),1
<Player:track916>,<Player:track58> <Player:track916> },1
,<Player:track916> },1
<11,29> <11 28>,1
,<11 28>,1
<Each:AIstyle>,( <Each:AIstyle> {,1
,<Each:AIstyle> {,1
<12,STRING <12 10>,1
,<12 10>,1
<13,> <13 INTEGER,1
,<13 INTEGER,1
<14,STRING <14 12>,1
,<14 12>,1
at:27,Edge at:27 ),6
,at:27 ),6
Pattern,is Pattern {,3
,Pattern {,3
DoubleStep,- DoubleStep Usage:,5
,DoubleStep Usage:,5
at:28,Edge at:28 ),6
,at:28 ),6
<17,10> <17 .,1
,<17 .,1
,<16> <17 INTEGER,1
,<17 INTEGER,1
at:29,Edge at:29 ),6
,at:29 ),6
<18,> <18 .,1
,21> <18 21>,1
,<18 .,1
,<18 21>,1
<Num:pieces>,STRING <Num:pieces> ),1
,<Num:pieces> ),1
<rook_side>,<king_spaces> <rook_side> <rook_dir>,6
,<rook_side> <rook_dir>,6
at:23,Edge at:23 ),6
,at:23 ),8
,Vertex at:23 ),2
max:,min:1 max: (,9
,max: (,15
,min:2 max: (,1
,min:0 max: (,5
at:24,Edge at:24 ),6
,at:24 ),7
,Vertex at:24 ),1
at:25,what at:25 level:0,1
,what at:25 level:1,1
,at:25 level:0,1
,at:25 level:1,1
,Edge at:25 ),6
,at:25 ),6
<rangeP2>,<rangeP1> <rangeP2> },1
,<rangeP2> },1
Own,) Own ),8
,Own ),8
,) Own Orthogonal,7
,Own Orthogonal,7
,) Own if:,1
,Own if:,1
Example:,) Example: (,3
,Example: (,3
at:26,Edge at:26 ),6
,at:26 ),6
<1>,> <1> <7>,1
,<1> <7>,1
,STRING <1> STRING,18
,<1> STRING,22
,> <1> STRING,3
,<0> <1> <2>,2
,<1> <2>,4
,<6> <1> STRING,1
,<6> <1> <2>,1
,STRING <1> <1>,1
,<1> <1> <>,1
,<1> <1>,1
,<1> <>,1
,STRING <1> <2>,1
,<2> <1> <0>,1
,<1> <0>,1
,> <1> <31,1
,<1> <31,1
at:20,what at:20 ),1
,at:20 ),10
,Edge at:20 ),7
,Vertex at:20 ),2
Trap,#2 Trap rule,1
,Trap rule,1
<target_zone>,{ <target_zone> },1
,<target_zone> },1
Promote,move Promote (,118
,Promote (,118
,move Promote #1,4
,Promote #1,4
at:21,what at:21 ),1
,at:21 ),9
,Edge at:21 ),6
,Vertex at:21 ),2
count:#1,) count:#1 ),1
,count:#1 ),1
at:22,what at:22 ),1
,at:22 ),9
,Edge at:22 ),6
,Vertex at:22 ),2
Perforated,) Perforated Board,1
,Perforated Board,1
<Board:start2>,{ <Board:start2> },1
,STRING <Board:start2> ),1
,<Board:start2> },1
,<Board:start2> ),1
Orthogonal>,) Orthogonal> <>,2
,) Orthogonal> <,2
,Orthogonal> <>,2
,Orthogonal> <,2
250%,does 250% damage,1
,250% damage,1
McCooey,McCooey Chess,1
<0,8> <0 .,3
,5> <0 .,1
,<0 .,10
,STRING <0 .,2
,> <0 .,4
<calculation>,{ <calculation> },1
,<calculation> },1
<2,> <2 1>,1
,<2 1>,1
<3,STRING <3 3>,1
,<3 3>,1
,> <3 INTEGER,2
,<3 INTEGER,2
<4,STRING <4 4>,1
,<4 4>,1
,> <4 INTEGER,1
,<4 INTEGER,1
<5,STRING <5 STRING,1
,<5 STRING,1
,STRING <5 5>,2
,STRING <5 9>,1
,<5 5>,2
,<5 9>,1
,STRING <5 10>,1
,<5 10>,1
,> <5 .,1
,<5 .,1
,> <5 INTEGER,1
,<5 INTEGER,1
cannot,Pawn cannot move,1
,cannot move,2
,and cannot move,1
,sites cannot be,1
,cannot be,1
<63>,1> <63> STRING,1
,<63> STRING,1
<20,11> <20 .,1
,<20 .,1
<6,STRING <6 8>,1
,<6 8>,1
,STRING <6 5>,1
,<6 5>,1
,STRING <6 STRING,1
,<6 STRING,1
,STRING <6 6>,1
,<6 6>,1
,> <6 INTEGER,1
,<6 INTEGER,1
<to>,{ <to> },2
,<to> },2
<7,> <7 .,1
,19> <7 20>,1
,<7 .,1
,<7 20>,1
,STRING <7 7>,2
,<7 7>,2
,STRING <7 6>,1
,<7 6>,1
,> <7 INTEGER,2
,<7 INTEGER,2
<21,> <21 INTEGER,1
,<21 INTEGER,1
<tigerSites>,{ <tigerSites> },1
,<tigerSites> },1
<8,20> <8 19>,1
,> <8 .,1
,22> <8 23>,1
,<8 19>,1
,<8 .,1
,<8 23>,1
,STRING <8 7>,1
,<8 7>,1
,STRING <8 8>,1
,<8 8>,1
,> <8 INTEGER,1
,<8 INTEGER,1
<22,> <22 .,1
,25> <22 25>,1
,<22 .,1
,<22 25>,1
after:34,) after:34 ),4
,~ after:34 ),2
,after:34 ),6
<9,23> <9 22>,1
,> <9 .,1
,25> <9 26>,1
,<9 22>,1
,<9 .,1
,<9 26>,1
,> <9 INTEGER,1
,<9 INTEGER,1
<23,12> <23 .,1
,<23 .,1
first,( first quadrant,6
,first quadrant,6
,water first .,1
,first .,1
,P1 first Hole,1
,P2 first Hole,1
,first Hole,2
,for first player,4
,in first turn,4
,first player,5
,first turn,4
,its first move,1
,first move,1
,the first player,1
,) first choice,1
,first choice,1
<24,> <24 .,1
,<24 .,1
<26,13> <26 .,1
,<26 .,2
,> <26 .,1
,29> <26 29>,1
,<26 29>,1
<=,( <= (,108
,<= (,108
,( <= INTEGER,98
,<= INTEGER,98
,( <= <Board:init>,2
,<= <Board:init>,2
,( <= <Start:usingHogon>,1
,<= <Start:usingHogon>,1
,( <= STRING,3
,<= STRING,3
,( <= <Board:MainWin0>,2
,( <= <Board:MainWin1>,2
,( <= <Board:MainWinC>,10
,<= <Board:MainWin0>,2
,<= <Board:MainWin1>,2
,<= <Board:MainWinC>,10
,( <= <BoardShape:ForcedFillLevel>,1
,<= <BoardShape:ForcedFillLevel>,1
<27,> <27 .,1
,<27 .,1
<>,STRING <> STRING,32
,<> STRING,76
,<2> <> <>,5
,<> <> <>,12
,<> <> STRING,11
,> <> <,3
,> <> STRING,30
,<> <>,24
,<> <,26
,<> <> <,1
,STRING <> <,21
,> <> <>,4
,<1> <> STRING,1
,<4> <> <>,1
,Orthogonal> <> STRING,2
,STRING <> <>,2
,<2> <> <,1
<end>,<trackP3P4> <end> },1
,<end> },5
,<Play> <end> },1
,<num> <end> <option>,1
,<end> <option>,1
,<removeLastPiece> <end> },1
,<begin> <end> },1
,<noPieceSite> <end> },1
Done,Done without,1
<2>,> <2> <8>,1
,<2> <8>,1
,STRING <2> STRING,50
,<2> STRING,54
,> <2> STRING,1
,STRING <2> <,53
,<2> <,54
,STRING <2> <>,6
,<2> <>,6
,<1> <2> <3>,1
,<2> <3>,3
,<8> <2> STRING,1
,<1> <2> <,1
,<10> <2> <3>,1
,STRING <2> <3>,1
,STRING <2> <4>,2
,<2> <4>,2
,<1> <2> STRING,2
,Pawn2Start <2> <1>,1
,<2> <1>,1
<-10>,STRING <-10> STRING,1
,<-10> STRING,1
<CheckMate>,<PieceSetup> <CheckMate> },2
,<CheckMate> },2
<Board:armSize>,STRING <Board:armSize> ),1
,<Board:armSize> ),1
space,each space oriented,1
,one space in,1
,one space 'diagonally',1
,a space of,1
,the space it,1
,current space .,1
,one space forward,1
,adjacent space slightly,1
,one space .,1
,space oriented,1
,space in,1
,space 'diagonally',1
,space of,1
,space it,1
,space .,2
,space forward,1
,space slightly,1
<Capture:doneSoFar>,STRING <Capture:doneSoFar> ),1
,<Capture:doneSoFar> ),1
wall/singleton,enemy wall/singleton piece,1
,wall/singleton piece,1
<piece2>,<piece1> <piece2> },2
,<piece2> },2
<64>,<8> <64> <260>,1
,<64> <260>,1
<30,> <30 .,2
,<30 .,2
,33> <30 33>,1
,<30 33>,1
Tree,is Tree Neutral,2
,Tree Neutral,2
from,( from (,1871
,from (,1871
,( from ),1834
,from ),1835
,captures from a,1
,( from INTEGER,6
,from a,2
,from INTEGER,6
,( from #1,58
,from #1,58
,- from region,2
,( from #5,1
,zone from capture,1
,from region,2
,from #5,1
,from capture,1
,( from Cell,19
,from Cell,19
,the from value,1
,from value,1
,( from if:,10
,stones from a,1
,from if:,10
,( from STRING,40
,from STRING,40
,( from #4,2
,( from #3,3
,from #4,2
,from #3,3
,drawn from Chess,9
,Derived from Chess,5
,available from Start,1
,. from Start,1
,from Chess,14
,from Start,2
,piece from board,1
,available from previous,1
,directions from their,1
,moved from .,1
,farthest from their,1
,from board,1
,from previous,1
,from their,2
,from .,1
,moving from the,2
,from the,3
,( from Vertex,2
,( from Edge,2
,from Vertex,2
,from Edge,2
,away from the,1
,#1 from site,1
,attacks from site,1
,STRING from ),1
,( from entrenchment,1
,from site,2
,from entrenchment,1
,( from if:#1,2
,from if:#1,2
,where from --COMMA--,3
,from --COMMA--,4
,STRING from --COMMA--,1
,isolated from everything,1
,from everything,1
<31,STRING <31 46>,1
,<31 46>,1
,<1> <31 INTEGER,1
,<31 INTEGER,1
<32,31> <32 .,1
,<32 .,1
constants,) constants defines,1
,constants defines,1
<33,> <33 .,1
,<33 .,1
<34,> <34 .,1
,37> <34 37>,1
,<34 .,1
,<34 37>,1
<Tiling:numSides>,Each <Tiling:numSides> ),2
,<Tiling:numSides> ),2
<Play:move>,play <Play:move> ),1
,<Play:move> ),1
<36,35> <36 .,1
,<36 .,1
<misoroPhase>,<rules> <misoroPhase> },2
,<misoroPhase> },2
<sumFingers>,<board> <sumFingers> <initP3>,1
,<sumFingers> <initP3>,1
<38,> <38 .,1
,41> <38 41>,1
,<38 .,1
,<38 41>,1
<AIstyle>,{ <AIstyle> },1
,<AIstyle> },1
<a,see <a STRING,1
,<a STRING,1
<PiecePlacement>,STRING <PiecePlacement> args:,1
,{ <PiecePlacement> },1
,<PiecePlacement> args:,1
,<PiecePlacement> },1
<3>,<7> <3> STRING,1
,<3> STRING,83
,STRING <3> STRING,71
,STRING <3> <,33
,<3> <,38
,<2> <3> <4>,1
,<3> <4>,1
,<10> <3> STRING,1
,<2> <3> <,2
,STRING <3> <6>,2
,<3> <6>,2
,> <3> <,2
,<4> <3> <,1
,<Hidden> <3> STRING,3
,STRING <3> <9>,1
,<3> <9>,1
,> <3> STRING,6
,1> <3> STRING,1
replayDouble:,Die replayDouble: (,4
,replayDouble: (,4
capture,when capture a,1
,capture a,1
,without capture (,1
,- capture region,1
,from capture #5,1
,capture (,7
,capture region,1
,capture #5,1
,can capture an,1
,capture an,1
,can capture again,1
,capture again,1
,second capture .,1
,capture .,3
,No capture done,1
,one capture done,1
,of capture done,1
,capture done,3
,a capture was,1
,capture was,1
,can capture INTEGER,1
,capture INTEGER,1
,always capture diagonally,1
,capture diagonally,1
,passant capture .,2
,previous capture --COMMA--,1
,a capture or,1
,to capture another's,1
,not capture Player,1
,capture --COMMA--,1
,capture or,1
,capture another's,1
,capture Player,1
,any capture (,2
,with capture (,3
,Site capture (,1
<Repetition>,STRING <Repetition> ),2
,STRING <Repetition> args:,2
,<Repetition> ),2
,<Repetition> args:,2
Indirect,= Indirect Vehicle,1
,Indirect Vehicle,1
<Start:usingHogon>,<= <Start:usingHogon> (,1
,<Start:usingHogon> (,1
Furthermore,. Furthermore the,1
,Furthermore the,1
Can,) Can play,1
,Can play,1
,) Can always,4
,Can always,5
,) Can Block,1
,Can Block,1
,STRING Can always,1
,STRING Can never,1
,Can never,1
,) Can attack,2
,Can attack,2
in:,Sites in: (,331
,in: (,669
,Stack in: (,13
,of:#1 in: (,1
,Mover in: (,49
,Pieces in: (,5
,Enemy in: (,1
,count in: (,145
,P1 in: (,1
,P2 in: (,1
,INTEGER in: (,6
,Next in: (,13
,All in: (,69
,) in: (,13
,STRING in: (,13
,#1 in: (,3
,Edge in: (,2
,Cell in: (,3
<piece1>,<numSides> <piece1> <piece2>,2
,<piece1> <piece2>,2
<carnarvon>,{ <carnarvon> },1
,<carnarvon> },1
<40,39> <40 .,1
,<40 .,1
determinations,Liberty determinations by,1
,determinations by,1
Holes,Left Holes (,2
,Holes (,2
Block,) Block a,3
,Can Block a,1
,Block a,4
<Connection:type>,<Line:size> <Connection:type> ),1
,<Connection:type> ),1
,Connected <Connection:type> Mover,1
,<Connection:type> Mover,1
<44,43> <44 .,1
,<44 .,1
Prism,hex Prism <Size>,1
,Prism <Size>,1
seems,it seems an,1
,seems an,1
after:10,before:10 after:10 at:EndOfTurn,2
,after:10 at:EndOfTurn,2
>=,( >= INTEGER,47
,>= INTEGER,47
,( >= (,130
,>= (,130
,( >= STRING,5
,>= STRING,5
<65>,STRING <65> <,2
,<65> <,2
,STRING <65> STRING,1
,<65> STRING,2
,<25> <65> STRING,1
Steps,count Steps (,40
,Steps (,40
,count Steps Vertex,3
,Steps Vertex,3
,count Steps Orthogonal,10
,Steps Orthogonal,10
<48,7> <48 .,1
,15> <48 .,1
,<48 .,2
<dog>,{ <dog> },1
,<dog> },1
passEnd,( passEnd NoEnd,4
,passEnd NoEnd,4
count:<Pieces:num>,INTEGER count:<Pieces:num> ),2
,count:<Pieces:num> ),2
<Diamond>,STRING <Diamond> STRING,1
,<Diamond> STRING,1
mul,( mul (,3
,mul (,3
<startMinotaur>,<startTheseus> <startMinotaur> <exit>,1
,<startMinotaur> <exit>,1
<4>,STRING <4> STRING,80
,<4> STRING,84
,STRING <4> <,45
,<4> <,46
,<3> <4> <5>,1
,<4> <5>,1
,<2> <4> STRING,2
,STRING <4> <8>,2
,<4> <8>,2
,STRING <4> <14>,1
,<4> <14>,1
,> <4> <,1
,> <4> <4>,1
,<4> <4> <4>,1
,<4> <4> <>,1
,<5> <4> <3>,1
,<4> <4>,2
,<4> <>,1
,<4> <3>,1
,<ThinDashed> <4> STRING,2
,STRING <4> <16>,1
,<4> <16>,1
Bear,#1 Bear off,3
,#3 Bear off,1
,Bear off,4
swaps,Mover swaps with,1
,swaps with,1
owner:,#2 owner: (,1
,owner: (,132
,STRING owner: (,131
<initTiger>,<type> <initTiger> },1
,<initTiger> },1
,<type> <initTiger> <initLeopard>,1
,<initTiger> <initLeopard>,1
Column,sites Column INTEGER,15
,Column INTEGER,36
,sites Column (,17
,Column (,17
,sites Column STRING,2
,Column STRING,2
,STRING Column INTEGER,21
,row Column column,1
,Column column,1
array,( array {,1
,array {,1
,( array (,6
,array (,6
,( array #1,1
,array #1,1
,an array different,1
,array different,1
addScore,( addScore P2,4
,( addScore P1,4
,addScore P2,4
,addScore P1,4
,( addScore Mover,63
,addScore Mover,63
,( addScore (,3
,addScore (,3
,( addScore {,3
,addScore {,3
,( addScore #1,1
,addScore #1,1
,( addScore Next,1
,addScore Next,1
<50,10> <50 .,1
,<50 .,1
column:0,) column:0 ),9
,column:0 ),11
,row:0 column:0 ),2
Remembered,values Remembered STRING,145
,Remembered STRING,145
,values Remembered ),17
,Remembered ),17
,values Remembered #1,7
,Remembered #1,7
track,( track STRING,1635
,track STRING,1635
Oware,in Oware .,1
,Oware .,1
value,( value Player,178
,value Player,178
,( value ),124
,value ),124
,the value for,1
,value for,1
,( value Piece,99
,value Piece,99
,from value is,1
,to value },1
,( value Pending,29
,lower value of,2
,value is,1
,value },1
,value Pending,29
,value of,3
,original value of,1
,pending value .,2
,value .,3
,( value Random,20
,value Random,20
,die value .,1
,) value (,2
,value (,2
<56,7> <56 .,1
,<56 .,1
<Slide:to>,) <Slide:to> (,1
,<Slide:to> (,1
origin:174,expand origin:174 steps:3,1
,origin:174 steps:3,1
Spartans,and Spartans are,1
,the Spartans happen,1
,Spartans are,1
,Spartans happen,1
RookRight2Start,> RookRight2Start <,2
,RookRight2Start <,2
<shape>,{ <shape> <rangeP1>,1
,<shape> <rangeP1>,1
,{ <shape> <cornerSetup>,2
,<shape> <cornerSetup>,2
,{ <shape> },1
,<shape> },1
Slúnax,) Slúnax (,1
,Slúnax (,1
<5>,<8> <5> STRING,1
,<5> STRING,83
,STRING <5> STRING,79
,<4> <5> <,1
,<5> <,20
,STRING <5> <,18
,STRING <5> <6>,1
,<5> <6>,1
,STRING <5> <15>,1
,<5> <15>,1
,> <5> <5>,1
,<5> <5> <5>,1
,<5> <5> <,1
,> <5> <4>,1
,<5> <5>,2
,<5> <4>,1
,STRING <5> <12>,1
,<5> <12>,1
,STRING <5> <10>,1
,<5> <10>,1
,STRING <5> <25>,1
,<5> <25>,1
,> <5> STRING,3
scale:0,) scale:0 .,36
,scale:0 .,36
<selGame>,{ <selGame> },2
,<selGame> },2
<Scenario:startingMoney>,Each <Scenario:startingMoney> ),1
,<Scenario:startingMoney> ),1
<Tiger:move>,P2 <Tiger:move> ),1
,<Tiger:move> ),1
<Board:trackDirection>,STRING <Board:trackDirection> loop:True,1
,<Board:trackDirection> loop:True,1
attacking,the attacking piece,2
,attacking piece,2
<RegionMediumPhase>,<RegionLightPhase> <RegionMediumPhase> },1
,<RegionMediumPhase> },1
<tri,STRING <tri Diamond>,3
,<tri Diamond>,3
,STRING <tri Hexagon>,1
,STRING <tri Square>,1
,STRING <tri Star>,1
,STRING <tri Limping>,1
,<tri Hexagon>,1
,<tri Square>,1
,<tri Star>,1
,<tri Limping>,1
<then>,<directions> <then> ),12
,<condition> <then> ),3
,<then> ),17
,<direction> <then> ),2
round,All round sides,1
,two round with,1
,one round with,1
,Two round with,1
,round sides,1
,round with,3
currently,are currently being,1
,currently being,1
<CCW2>,<rowSize> <CCW2> <CW1>,2
,<CCW2> <CW1>,2
,<rowSize> <CCW2> <HalfRightInnerP1>,1
,<CCW2> <HalfRightInnerP1>,1
,<size> <CCW2> },1
,<CCW2> },2
,<size> <CCW2> <leftMostP2>,1
,<CCW2> <leftMostP2>,1
,<size> <CCW2> <thirdHoleInnerP1>,1
,<CCW2> <thirdHoleInnerP1>,1
,<rowSize> <CCW2> },1
poly,( poly {,32
,poly {,32
unwanted,remove unwanted cells,1
,unwanted cells,1
<65,<34> <65 INTEGER,1
,<65 INTEGER,1
<directionsWin>,<DiagShow> <directionsWin> },2
,<directionsWin> },2
normally,move normally (,4
,normally (,4
Shah's,starting Shah's Baidaq,1
,Shah's Baidaq,1
from:,results from: (,18
,from: (,364
,Direction from: (,54
,Move from: (,58
,STRING from: (,140
,#1 from: (,2
,Mover from: (,3
,FirstSite from: (,14
,Vertex from: (,11
,Track from: (,15
,All from: (,1
,Cell from: (,27
,Between from: (,6
,Orthogonal from: (,4
,Distance from: (,4
,Group from: (,2
,) from: (,5
<6>,STRING <6> STRING,96
,<6> STRING,98
,STRING <6> <7>,1
,<6> <7>,1
,STRING <6> <,22
,<6> <,23
,STRING <6> <1>,1
,<6> <1>,2
,<5> <6> <1>,1
,STRING <6> <10>,1
,<6> <10>,1
,<3> <6> STRING,2
,STRING <6> <12>,2
,<6> <12>,2
,STRING <6> <16>,1
,<6> <16>,1
,> <6> <6>,1
,<6> <6> <6>,1
,<6> <6> <,1
,<6> <6>,2
,STRING <6> <20>,5
,<6> <20>,5
,STRING <6> <36>,1
,<6> <36>,1
allowed,Hops allowed (,1
,allowed (,1
<Board:innerInitP2>,P2 <Board:innerInitP2> ),1
,<Board:innerInitP2> ),1
<Option:start3>,) <Option:start3> },1
,<Option:start3> },1
building,the building .,1
,building .,1
,a building Attacking,1
,a building STRING,1
,a building (,1
,building Attacking,1
,building STRING,1
,building (,1
<692,STRING <692 INTEGER,1
,<692 INTEGER,1
Liberties,count Liberties Orthogonal,8
,Liberties Orthogonal,8
,count Liberties ),1
,Liberties ),1
,count Liberties at:,1
,Liberties at:,1
,2: Liberties =,1
,. Liberties at,1
,Liberties =,1
,Liberties at,1
score,( score P2,119
,( score P1,123
,score P2,119
,score P1,123
,( score #1,8
,score #1,8
,( score Mover,54
,score Mover,54
,( score P3,10
,( score P4,5
,( score P5,1
,score P3,10
,score P4,5
,score P5,1
,( score Player,1
,score Player,1
,( score Next,18
,score Next,18
<LF1>,STRING <LF1> <LB1>,2
,<LF1> <LB1>,2
Pass,move Pass ),116
,Pass ),128
,move Pass (,77
,Pass (,77
,was Pass ),12
awaiting,are awaiting .,1
,awaiting .,1
<20>,STRING <20> STRING,28
,<20> STRING,30
,<19> <20> <21>,1
,<20> <21>,1
,STRING <20> <,5
,<20> <,15
,<27> <20> STRING,1
,<10> <20> STRING,1
,<6> <20> <,5
,<8> <20> <,5
<p3_arg>,<p2_arg> <p3_arg> ),1
,<p3_arg> ),1
because,--COMMA-- because nothing,3
,because nothing,3
,die because count,1
,because count,1
,macro because it,1
,because it,1
,--COMMA-- because they,1
,because they,1
,. because the,1
,because the,1
moving,ones moving in,1
,moving in,1
,by moving one,1
,moving one,1
,Piece moving from,2
,moving from,2
terrain,( terrain purposes,1
,by terrain (,1
,terrain purposes,1
,terrain (,1
<Pieces>,STRING <Pieces> args:,1
,<Pieces> args:,1
invented,hexagons invented by,1
,invented by,1
checkmated,the checkmated player,1
,checkmated player,1
Maybe,) Maybe needs,2
,Maybe needs,2
<7>,<1> <7> <3>,1
,<7> <3>,1
,STRING <7> STRING,81
,<7> STRING,83
,<6> <7> <8>,1
,<7> <8>,1
,STRING <7> <,12
,<7> <,13
,> <7> <7>,1
,<7> <7> <7>,1
,<7> <7> <,1
,<7> <7>,2
,STRING <7> <24>,1
,<7> <24>,1
,STRING <7> <14>,1
,<7> <14>,1
,<Hidden> <7> STRING,1
,STRING <7> <49>,1
,<7> <49>,1
,1> <7> STRING,1
included:True,S included:True distance:1,1
,included:True distance:1,1
,N included:True distance:7,2
,E included:True distance:7,2
,S included:True distance:7,2
,W included:True distance:7,2
,included:True distance:7,8
,) included:True ),2
,included:True ),4
,NE included:True ),1
,NW included:True ),1
rat,A rat can,1
,rat can,1
<Ending>,<Move> <Ending> },1
,<Ending> },1
AI,the AI .,1
,AI .,1
<Option:start2>,STRING <Option:start2> ),1
,<Option:start2> ),1
stack:True,) stack:True ),36
,stack:True ),39
,count:2 stack:True ),2
,) stack:True (,20
,stack:True (,20
,Diagonal stack:True ),1
<player1_arg>,STRING <player1_arg> <player2_arg>,6
,<player1_arg> <player2_arg>,6
version,simultaneous version (,1
,version (,1
,Wellisch's version of,1
,version of,1
LightTan,colour LightTan ),1
,LightTan ),1
stop,should stop when,1
,stop when,1
<kingMove>,<start> <kingMove> },1
,<kingMove> },1
advancement,2-step advancement with,2
,non-capturing advancement in,2
,advancement with,2
,advancement in,2
selection,destination selection on,1
,destination selection in,1
,movement selection --COMMA--,1
,selection on,1
,selection in,1
,selection --COMMA--,1
<directionsUsed>,<gridType> <directionsUsed> <DiagShow>,3
,<directionsUsed> <DiagShow>,3
<numDice>,<numPieces> <numDice> <sizeHome>,1
,<numDice> <sizeHome>,1
<Play:kingHop>,STRING <Play:kingHop> ),1
,<Play:kingHop> ),1
placement,than placement of,1
,placement of,1
,in placement .,1
,piece placement cases,1
,placement .,1
,placement cases,1
Blocked,is Blocked Player,1
,Blocked Player,1
East,--COMMA-- East --COMMA--,1
,East --COMMA--,1
<Line:size>,Line <Line:size> <Connection:type>,1
,<Line:size> <Connection:type>,1
<21>,STRING <21> STRING,16
,<21> STRING,16
,<20> <21> <22>,1
,<21> <22>,1
,STRING <21> <,1
,<21> <,1
shiftPlayers,( shiftPlayers Mover,2
,shiftPlayers Mover,2
Building,= Building Damage,1
,Building Damage,1
<8>,<2> <8> <5>,1
,<8> <5>,1
,STRING <8> STRING,91
,<8> STRING,93
,<7> <8> <9>,1
,<8> <9>,1
,STRING <8> <2>,1
,<8> <2>,1
,STRING <8> <,19
,<8> <,19
,<4> <8> STRING,2
,STRING <8> <16>,1
,<8> <16>,1
,STRING <8> <20>,5
,<8> <20>,5
,STRING <8> <64>,1
,<8> <64>,1
<PlacementConditions:PlacementConditions>,) <PlacementConditions:PlacementConditions> ),2
,<PlacementConditions:PlacementConditions> ),2
<numPieces>,<size> <numPieces> <numDice>,1
,<numPieces> <numDice>,1
,<size> <numPieces> },1
,<numPieces> },1
<Board:leftMostP2>,) <Board:leftMostP2> },1
,<Board:leftMostP2> },1
<Version:removeRule>,STRING <Version:removeRule> ),1
,<Version:removeRule> ),1
least,at least INTEGER,1
,least INTEGER,1
,at least human,1
,least human,1
,at least one,1
,least one,1
BL,{ BL BR,6
,BL BR,26
,BR BL },46
,BL },55
,Forward BL BR,10
,BR BL Rightward,12
,BL Rightward,12
,BR BL FR,6
,BR BL Forward,8
,STRING BL ),1
,FL BL },2
,BL FR,6
,BL Forward,9
,BL ),1
,Backward BL BLL,1
,STRING BL (,1
,Backward BL },2
,FR BL },3
,FR BL BR,3
,BR BL FL,3
,BR BL Backward,3
,FL BL BR,7
,FL BL Forward,1
,Forward BL },1
,Leftward BL },1
,BL BLL,1
,BL (,1
,BL FL,3
,BL Backward,3
An,) An enemy,1
,An enemy,1
The,The capturing,3
,) The normal,2
,The normal,2
,) The starting,4
,The starting,4
,Each The twin,1
,The twin,1
,) The ones,1
,The ones,1
,. The enemy,1
,The enemy,1
,) The goal,2
,P2 The original,1
,The goal,2
,The original,1
,) The Rightmost,2
,The Rightmost,2
,) The rightMost,1
,The rightMost,1
,. The victory,1
,The victory,1
,. The board,2
,) The game,1
,( The Pawns,1
,see The Classified,1
,The board,2
,The game,1
,The Pawns,1
,The Classified,1
,. The latter,1
,The latter,1
BR,BL BR },11
,BR },21
,{ BR BL,50
,BR BL,78
,BL BR FL,11
,BR FL,11
,FL BR BL,11
,Forward BR BL,9
,Leftward BR BL,3
,Backward BR BL,1
,BL BR FR,1
,FR BR },4
,FL BR },3
,Forwards BR BL,2
,BR FR,1
,Backward BR },1
,STRING BR (,1
,BL BR Forward,3
,STRING BR ),1
,Backward BR BRR,1
,FR BR Forward,1
,Forward BR },1
,Leftward BR },1
,BR (,1
,BR Forward,4
,BR ),1
,BR BRR,1
,FR BR BL,2
As,. As mentioned,1
,As mentioned,1
dual,( dual (,8
,dual (,8
,( dual >,1
,dual >,1
At,) At Start,2
,At Start,2
Mini,Mini Hexchess,1
<Board:startP2>,{ <Board:startP2> },1
,<Board:startP2> },1
,STRING <Board:startP2> ),2
,<Board:startP2> ),2
<quadhex>,STRING <quadhex> STRING,1
,<quadhex> STRING,1
<Loss>,STRING <Loss> STRING,13
,<Loss> STRING,15
,STRING <Loss> <Loss>,1
,<Loss> <Loss> STRING,1
,<Loss> <Loss>,1
,STRING <Loss> <Win>,1
,<Win> <Loss> STRING,1
,<Loss> <Win>,1
<22>,STRING <22> STRING,13
,<22> STRING,13
,<21> <22> <23>,1
,<22> <23>,1
,STRING <22> <,1
,<22> <,1
Pawns,) Pawns and,1
,Pawns and,1
,and Pawns are,1
,* Pawns can,1
,. Pawns can,1
,--COMMA-- Pawns can,1
,The Pawns keep,1
,Pawns are,1
,Pawns can,3
,Pawns keep,1
Path,is Path Edge,7
,is Path Vertex,1
,Path Edge,7
,Path Vertex,1
<127>,1> <127> STRING,1
,<127> STRING,1
<9>,STRING <9> STRING,81
,<9> STRING,81
,<8> <9> <10>,1
,<9> <10>,1
,STRING <9> <,5
,<9> <,5
,STRING <9> <40>,1
,<9> <40>,1
,STRING <9> <18>,1
,<9> <18>,1
,<3> <9> <15>,1
,STRING <9> <81>,1
,<9> <15>,1
,<9> <81>,1
<Version:endScore>,byScore <Version:endScore> ),1
,<Version:endScore> ),1
<Scenario:buildingSetup>,{ <Scenario:buildingSetup> <Scenario:pieceSetup>,1
,<Scenario:buildingSetup> <Scenario:pieceSetup>,1
125%,) 125% damage,1
,125% damage,1
<Board:innerInitP1>,P1 <Board:innerInitP1> ),1
,<Board:innerInitP1> ),1
Taken,Damage Taken Multiplier,1
,Taken Multiplier,1
<buildingSetup>,<boardRegins> <buildingSetup> <pieceSetup>,1
,<buildingSetup> <pieceSetup>,1
hopping,the hopping process,1
,hopping process,1
<Board:seed>,{ <Board:seed> (,1
,<Board:seed> (,1
Jump,) Jump Diagonal,1
,Jump Diagonal,1
pushing,piece pushing .,1
,pushing .,1
<directions>,STRING <directions> <then>,12
,STRING <directions> ),12
,<directions> <then>,12
,<directions> ),12
Diamond>,<hex Diamond> STRING,2
,<square Diamond> STRING,2
,<tri Diamond> STRING,2
,<brick Diamond> STRING,2
,Diamond> STRING,8
,<hex Diamond> <,1
,<square Diamond> <,1
,<tri Diamond> <,1
,<brick Diamond> <,1
,T33434 Diamond> <,1
,T3464 Diamond> <,1
,Diamond> <,6
abs,( abs (,2
,abs (,2
<Board:startP1>,{ <Board:startP1> },1
,<Board:startP1> },1
,STRING <Board:startP1> ),2
,<Board:startP1> ),2
CW,) CW CCW,2
,) CW ),2
,CW CCW,2
,CW ),2
<Multi:capture>,<CapOption:enemyHops> <Multi:capture> ),1
,or <Multi:capture> (,1
,<Multi:capture> ),1
,<Multi:capture> (,1
flips,( flips INTEGER,6
,flips INTEGER,6
<NumOfPlayers:NumPlayers>,players <NumOfPlayers:NumPlayers> ),2
,<NumOfPlayers:NumPlayers> ),2
Hexchess,Mini Hexchess Copyright,1
,Hexchess Copyright,1
Foreground,piece Foreground P1,2
,piece Foreground P2,2
,Foreground P1,2
,Foreground P2,2
<23>,STRING <23> STRING,6
,<23> STRING,6
,<22> <23> <,1
,<23> <,2
,<14> <23> <33>,1
,<23> <33>,1
,STRING <23> <,1
,> <23> <288>,1
,<23> <288>,1
<Tag:boardSize>,square <Tag:boardSize> ),1
,<Tag:boardSize> ),1
Backwards,All Backwards ),2
,Backwards ),6
,Step Backwards (,1
,Backwards (,2
,Forward Backwards },5
,{ Backwards Forwards,17
,{ Backwards Forward,2
,{ Backwards FR,1
,Backwards },5
,Backwards Forwards,17
,Backwards Forward,2
,Backwards FR,1
,STRING Backwards ),4
,{ Backwards Rightward,2
,FL Backwards Rightward,1
,{ Backwards Rightwards,3
,Backwards Rightward,3
,Backwards Rightwards,3
,step Backwards (,1
<Rightmost:sitesP1>,sites <Rightmost:sitesP1> ),1
,<Rightmost:sitesP1> ),1
<hogon>,<size> <hogon> },1
,<hogon> },1
colour:2,to:3 colour:2 ),2
,colour:2 ),2
<25>,STRING <25> <,3
,<25> <,18
,<10> <25> <,5
,<12> <25> <,5
,<14> <25> <,5
,STRING <25> STRING,7
,<25> STRING,7
,<5> <25> <65>,1
,<25> <65>,1
<throw>,{ <throw> },1
,<throw> },1
colour:1,to:2 colour:1 ),1
,to:1 colour:1 ),1
,colour:1 ),2
moved,being moved have,1
,have moved before,1
,it moved from,1
,moved have,1
,moved before,1
,moved from,1
Pawn,) Pawn movement,6
,that Pawn cannot,1
,) Pawn movement:,5
,last-moved Pawn in,6
,) Pawn promotion,6
,Pawn movement,6
,Pawn cannot,1
,Pawn movement:,5
,Pawn in,6
,Pawn promotion,7
,) Pawn Movement:,1
,Pawn Movement:,1
,and Pawn Promotion:,1
,later Pawn promotion,1
,a Pawn reaches,3
,a Pawn is,1
,the Pawn is,3
,the Pawn remains,1
,or Pawn move,1
,Pawn Promotion:,1
,Pawn reaches,3
,Pawn is,4
,Pawn remains,1
,Pawn move,1
,Promoted Pawn (,8
,Pawn (,8
sowEffect:,) sowEffect: (,1
,sowEffect: (,2
,sow sowEffect: (,1
red,coloured red --COMMA--,1
,red --COMMA--,1
count:80,) count:80 state:1,3
,count:80 state:1,3
<murray>,{ <murray> },1
,<murray> },1
Test,STRING Test to,1
,Test to,1
count:87,STRING count:87 ),2
,count:87 ),2
<PieceSetup>,<BoardRegions> <PieceSetup> <CheckMate>,2
,<PieceSetup> <CheckMate>,2
helped,which helped a,1
,helped a,1
<24>,STRING <24> STRING,12
,<24> STRING,14
,<33> <24> STRING,1
,<7> <24> STRING,1
,STRING <24> <,1
,<24> <,1
<Boundary:cornerSetup>,rules <Boundary:cornerSetup> phases:,1
,<Boundary:cornerSetup> phases:,2
,) <Boundary:cornerSetup> phases:,1
<Player:trackP3P4>,) <Player:trackP3P4> },1
,<Player:trackP3P4> },1
add,( add (,191
,add (,191
,( add Split,2
,add Split,2
,) add a,1
,add a,1
,to add that,1
,add that,1
<Play:movePiece>,Each <Play:movePiece> ),1
,<Play:movePiece> ),1
Undefined,) Undefined ),5
,Mover Undefined ),8
,Undefined ),17
,< Undefined (,1
,Undefined (,11
,= Undefined (,10
,STRING Undefined ),4
De,De Vasa,1
<26>,STRING <26> STRING,7
,<26> STRING,7
,STRING <26> <,1
,<26> <,1
need,markers need to,1
,need to,1
<nbrMax>,{ <nbrMax> },1
,<nbrMax> },1
<Num>,STRING <Num> args:,10
,<Num> args:,10
its,with its current,1
,when its impossible,1
,its current,1
,its impossible,1
,on its first,1
,its first,1
,opposite its starting,1
,for its delayed,1
,its starting,1
,its delayed,1
,means its a,2
,its a,2
ToClear,sites ToClear ),29
,ToClear ),29
avoidStoredState,( avoidStoredState (,1
,avoidStoredState (,1
<Minotaur:threat>,then <Minotaur:threat> ),1
,<Minotaur:threat> ),1
<Rightmost:sitesP2>,sites <Rightmost:sitesP2> ),1
,<Rightmost:sitesP2> ),1
byLevel:True,INTEGER byLevel:True ),3
,byLevel:True ),3
<ExtraCapture>,STRING <ExtraCapture> args:,2
,<ExtraCapture> args:,2
<Queen2Start>,<King2Start> <Queen2Start> <RookLeft2Start>,1
,<Queen2Start> <RookLeft2Start>,1
Bridge,) Bridge Wagon,1
,) Bridge (,1
,Bridge Wagon,1
,Bridge (,1
<27>,<19> <27> <20>,1
,<27> <20>,1
,STRING <27> <,1
,<27> <,1
,STRING <27> STRING,4
,<27> STRING,4
index:,) index: (,3
,index: (,3
Hole,first Hole (,2
,Hole (,2
omnicheck,in omnicheck if,1
,into omnicheck .,1
,in omnicheck --COMMA--,1
,of omnicheck on,1
,in omnicheck and,1
,of omnicheck --COMMA--,1
,omnicheck if,1
,omnicheck .,1
,omnicheck --COMMA--,2
,omnicheck on,1
,omnicheck and,1
FL,FR FL },242
,FL },245
,{ FL FR,7
,FL FR,38
,Forward FL FR,4
,BR FL FR,11
,Leftward FL FR,12
,FR FL BR,12
,FR FL Backward,19
,FR FL Forward,16
,STRING FL ),1
,Forward FL Backward,1
,Forward FL BL,1
,FR FL Rightward,11
,FR FL BL,8
,FL BR,14
,FL Backward,20
,FL Forward,16
,FL ),1
,FL BL,10
,FL Rightward,11
,Forward FL FLL,1
,Leftward FL },2
,{ FL BR,2
,Rightward FL FR,1
,BL FL FR,3
,Forward FL Backwards,1
,{ FL BL,1
,Rightward FL },1
,FL FLL,1
,FL Backwards,1
,STRING FL NW,1
,STRING FL SE,1
,FL NW,1
,FL SE,1
En,movement: En passant,5
,En passant,6
,Movement: En passant,1
<AttackCheck>,{ <AttackCheck> <EachMove>,1
,<AttackCheck> <EachMove>,1
KingNotCheckedAndToEmpty,- KingNotCheckedAndToEmpty (,3
,KingNotCheckedAndToEmpty (,3
<Option:start1>,STRING <Option:start1> ),1
,<Option:start1> ),1
FR,{ FR FL,275
,FR FL,308
,FL FR },27
,FR },30
,Forward FR FL,8
,FL FR Forward,4
,FR Forward,5
,Leftward FR FL,8
,BL FR FL,5
,BR FR FL,1
,{ FR BR,4
,Rightward FR Leftward,1
,STRING FR ),1
,Forward FR BR,1
,Backward FR FL,9
,Backwards FR FL,1
,Rightward FR FL,1
,FR BR,7
,FR Leftward,1
,FR ),1
,{ FR BL,3
,FL FR BL,3
,FL FR Rightward,2
,Forward FR },2
,{ FR Forward,1
,Forward FR FRR,1
,BL FR },1
,Backward FR Rightward,1
,FR BL,6
,FR Rightward,3
,FR FRR,1
,STRING FR SW,1
,STRING FR NE,1
,FL FR BR,2
,FR SW,1
,FR NE,1
UNE,STRING UNE ),3
,UNE ),5
,#1 UNE ),2
prevent,to prevent selecting,1
,that prevent cycling:-,1
,prevent selecting,1
,prevent cycling:-,1
,) prevent rotational,1
,prevent rotational,1
stack:False,) stack:False (,1
,) stack:False ),2
,stack:False (,1
,stack:False ),2
count:60,) count:60 state:1,3
,count:60 state:1,3
count:65,STRING count:65 ),2
,count:65 ),2
count:66,STRING count:66 ),1
,count:66 ),1
end,( end {,306
,end {,306
,( end (,697
,end (,697
,) end or,1
,) end piece,1
,end or,1
,end piece,1
,( end <End>,2
,end <End>,2
,the end of,1
,end of,1
,( end <Version:result>,2
,end <Version:result>,2
,and end considerations:,1
,bitter end -,1
,end considerations:,1
,end -,1
Set-up/Pie,and Set-up/Pie Hex,1
,Set-up/Pie Hex,1
lines,script lines Move,1
,lines Move,1
Home,P1 Home (,66
,P2 Home (,8
,Home (,194
,P2 Home },2
,Home },5
,inner Home (,89
,outer Home (,23
,inner Home },2
,outer Home },1
,Inner Home (,6
,Outer Home (,2
,inner Home <Board:stores>,1
,Home <Board:stores>,1
<P1>,<P2> <P1> STRING,1
,STRING <P1> <P2>,1
,<P1> STRING,1
,<P1> <P2>,1
selecting,prevent selecting null,1
,selecting null,1
UNW,STRING UNW ),1
,UNW ),1
<28>,STRING <28> STRING,7
,<28> STRING,7
,STRING <28> <,1
,<28> <,1
intersect,( intersect {,1
,intersect {,1
k:4,Mover k:4 ),1
,k:4 ),1
k:3,Mover k:3 ),1
,k:3 ),1
<capture>,{ <capture> <moveCondition>,1
,<capture> <moveCondition>,1
,{ <capture> },1
,<capture> },1
,{ <capture> <suicide>,1
,<capture> <suicide>,1
<BoardDef>,{ <BoardDef> <MainWinC>,1
,<BoardDef> <MainWinC>,1
on:Cell,by:P2 on:Cell ),2
,on:Cell ),4
,Piece on:Cell (,1
,on:Cell (,1
,STRING on:Cell ),2
from:0,d:2 from:0 num:4,35
,from:0 num:4,35
,d:2 from:0 num:6,16
,from:0 num:6,16
,d:2 from:0 num:2,3
,from:0 num:2,3
,d:2 from:0 num:5,2
,from:0 num:5,2
,STRING from:0 (,2
,from:0 (,2
,d:2 from:0 num:7,4
,from:0 num:7,4
,d:2 from:0 num:<Num:dice>,1
,from:0 num:<Num:dice>,1
,d:2 from:0 num:3,8
,from:0 num:3,9
,Direction from:0 E,1
,from:0 E,1
,d:7 from:0 num:1,1
,from:0 num:1,2
,path from:0 to:2,1
,path from:0 to:1,1
,from:0 to:2,1
,from:0 to:1,1
,d:9 from:0 num:1,1
,d:4 from:0 num:3,1
,d:2 from:0 num:8,2
,from:0 num:8,2
,d:2 from:0 num:<Dice:num>,1
,from:0 num:<Dice:num>,1
from:1,path from:1 to:3,1
,from:1 to:3,1
,d:6 from:1 num:1,3
,from:1 num:1,3
,d:6 from:1 num:2,1
,from:1 num:2,1
attacker,the attacker .,3
,attacker .,3
from:2,path from:2 to:3,1
,from:2 to:3,1
,d:4 from:2 num:1,1
,from:2 num:1,1
noted,as noted General,8
,noted General,8
special,up special case,1
,) special case:,1
,special case,1
,special case:,1
<LF2>,<RB1> <LF2> <LB2>,2
,<LF2> <LB2>,2
ifAfterwards:,) ifAfterwards: (,288
,ifAfterwards: (,289
,< ifAfterwards: (,1
count:72,) count:72 ),1
,count:72 ),1
mover,( mover ),517
,mover ),517
,Swap mover with,1
,STRING mover with,1
,mover with,2
,the mover .,1
,mover .,1
,= mover (,1
,mover (,1
,no mover marker,1
,mover marker,1
,p1 mover one,1
,mover one,1
Buying,) Buying units,1
,Buying units,1
moves,INTEGER moves are,1
,moves are,1
,Then moves -,1
,moves -,1
,no moves =,1
,moves =,1
,Capture moves .,1
,Captures moves .,1
,moves .,4
,always moves to,1
,moves to,1
,INTEGER moves (,3
,moves (,3
,full moves show,1
,Add moves .,1
,moves show,1
,the moves .,1
,null moves when,1
,the moves based,1
,double moves --COMMA--,1
,moves when,1
,moves based,1
,moves --COMMA--,1
<ExtraRows>,<MainWin0> <ExtraRows> <ExtraCols>,1
,<ExtraRows> <ExtraCols>,1
count:76,INTEGER count:76 state:3,2
,count:76 state:3,2
attacked,being attacked by,1
,attacked by,1
,being attacked (,1
,being attacked #4,1
,being attacked #3,1
,attacked (,1
,attacked #4,1
,attacked #3,1
pushed,piece pushed to,1
,pushed to,1
<P2>,STRING <P2> <P1>,1
,<P1> <P2> STRING,1
,<P2> <P1>,1
,<P2> STRING,1
<Fox:rememberHopCapture>,play <Fox:rememberHopCapture> ),1
,<Fox:rememberHopCapture> ),1
<Board:size>,rectangle <Board:size> INTEGER,1
,<Board:size> INTEGER,4
,INTEGER <Board:size> ),7
,<Board:size> ),56
,square <Board:size> ),12
,STRING <Board:size> ),22
,board <Board:size> ),1
,<Tiling:type> <Board:size> ),2
,INTEGER <Board:size> store:None,3
,<Board:size> store:None,3
,rectangle <Board:size> ),3
,<Boundary:shape> <Board:size> ),1
,hex <Board:size> ),4
,- <Board:size> INTEGER,2
,^ <Board:size> INTEGER,1
,) <Board:size> ),1
,square <Board:size> diagonals:Alternating,1
,Line <Board:size> ),1
,<Board:size> diagonals:Alternating,1
,Limping <Board:size> ),1
,tri <Board:size> ),1
regionSite,( regionSite (,52
,regionSite (,52
slightly,space slightly left,1
,slightly left,1
<Meta:rule>,rules <Meta:rule> phases:,1
,<Meta:rule> phases:,1
,rules <Meta:rule> (,4
,<Meta:rule> (,4
count:49,STRING count:49 ),2
,count:49 ),2
<players>,{ <players> },1
,<players> },1
,{ <players> <board>,1
,<players> <board>,1
<29>,STRING <29> STRING,5
,<29> STRING,5
,STRING <29> <,1
,<29> <,1
<Center>,STRING <Center> args:,1
,<Center> args:,1
<255>,1> <255> STRING,1
,<255> STRING,1
turns,to turns elapsed,1
,turns elapsed,1
,Double turns and,1
,turns and,1
<SType:selScoring>,then <SType:selScoring> ),2
,( <SType:selScoring> ),1
,<SType:selScoring> ),3
number,the number of,1
,number of,3
,- number of,1
,Init number of,1
Init,) Init number,1
,Init number,1
<Board:trackTeam2>,STRING <Board:trackTeam2> P2,1
,STRING <Board:trackTeam2> P4,1
,<Board:trackTeam2> P2,1
,<Board:trackTeam2> P4,1
loops:3,) loops:3 from:1>,1
,loops:3 from:1>,1
count:40,STRING count:40 ),1
,count:40 ),1
<surround,STRING <surround (,2
,<surround (,2
<movement>,<dice> <movement> },1
,<movement> },1
<starting>,{ <starting> <pieOrNot>,1
,<starting> <pieOrNot>,1
Hidden,set Hidden Cell,2
,Hidden Cell,2
,set Hidden (,19
,set Hidden What,47
,Hidden (,19
,Hidden What,58
,is Hidden at:,1
,set Hidden at:,8
,Hidden at:,9
,sites Hidden to:Mover,3
,Hidden to:Mover,3
,is Hidden What,1
,sites Hidden What,10
,set Hidden Who,2
,set Hidden {,4
,Hidden Who,2
,Hidden {,4
,sites Hidden to:All,1
,Hidden to:All,1
,set Hidden Value,29
,Hidden Value,29
count:44,STRING count:44 ),2
,count:44 ),2
<sitesP2>,<sitesP1> <sitesP2> },1
,<sitesP2> },1
<16><21><8>,STRING <16><21><8> STRING,1
,<16><21><8> STRING,1
al-Bayadiq,Baidaq al-Bayadiq in,4
,al-Bayadiq in,4
Sides,INTEGER Sides ),3
,Sides ),3
Leftwards,Rightwards Leftwards },18
,Leftwards },19
,STRING Leftwards ),3
,Backward Leftwards },1
,Leftwards ),3
<start3>,<start2> <start3> },1
,<start3> },1
Shafran,Shafran Chess,1
nothing,because nothing is,3
,nothing is,3
size:21,Each size:21 ),1
,size:21 ),1
testing,continuity testing in,1
,testing in,1
,and testing for,1
,testing for,1
IS,THIS IS JUST,1
,IS JUST,1
Gallicus,Murus Gallicus and,1
,Murus Gallicus by,1
,Gallicus and,1
,Gallicus by,1
<Line>,STRING <Line> args:,1
,<Line> args:,1
script,the script is,1
,the script down,1
,script is,1
,script down,1
,INTEGER script lines,1
,script lines,1
<Player:startRules>,rules <Player:startRules> (,1
,<Player:startRules> (,1
Top,sites Top ),598
,Top ),601
,STRING Top STRING,2
,Top STRING,2
,STRING Top ),3
,) Top left,1
,) Top Right,1
,Top left,1
,Top Right,1
count:50,) count:50 state:1,1
,count:50 state:1,1
<Place:geese>,{ <Place:geese> (,1
,<Place:geese> (,1
copy:True,) copy:True ),8
,copy:True ),8
,) copy:True STRING,1
,copy:True STRING,1
,) copy:True (,4
,copy:True (,4
,) copy:True #1,1
,copy:True #1,1
<Tag>,STRING <Tag> args:,1
,<Tag> args:,1
IntFunction,with IntFunction .,1
,IntFunction .,1
count:55,INTEGER count:55 ),1
,count:55 ),1
<Players:end>,<Players:Play> <Players:end> ),1
,<Players:end> ),2
,) <Players:end> ),1
Bishops,no Bishops in,1
,Bishops in,1
If,) If that's,2
,If that's,2
,{ If one,1
,) If a,2
,If one,1
,If a,5
,) If has,1
,If has,1
,rule: If an,1
,If an,1
,. If a,3
,* If there,1
,If there,1
,#4 If this,1
,#3 If this,1
,If this,2
<Num:tigers>,) <Num:tigers> ),1
,<Num:tigers> ),1
88>,INTEGER 88> STRING,1
,88> STRING,1
count:29,} count:29 ),1
,count:29 ),1
<tracks>>,<team> <tracks>> },1
,<tracks>> },1
DiceEqual,all DiceEqual ),32
,DiceEqual ),32
size:16,Shared size:16 ),1
,size:16 ),1
other,any other piece,1
,other piece,1
,the other direction,1
,other direction,1
,pieces other than,1
,the other player's,1
,other than,2
,other player's,1
,the other pieces,1
,other pieces,1
,everything other than,1
count:27,STRING count:27 ),2
,count:27 ),2
<hex,STRING <hex 5>,1
,<hex 5>,1
,STRING <hex Diamond>,3
,<hex Diamond>,3
,STRING <hex Limping>,2
,<hex Limping>,2
,STRING <hex Square>,1
,STRING <hex Triangle>,1
,STRING <hex Star>,1
,<hex Square>,1
,<hex Triangle>,1
,<hex Star>,1
size:14,Shared size:14 ),1
,size:14 ),1
<SafeTeleportation:num>,STRING <SafeTeleportation:num> ),1
,<SafeTeleportation:num> ),1
In,is In (,953
,In (,953
,is In STRING,26
,In STRING,26
,is In #1,59
,In #1,59
,is In INTEGER,10
,In INTEGER,10
,is In <End:rule>,1
,In <End:rule>,1
,is In #2,138
,In #2,138
,Variations: In Wellisch's,1
,) In another,1
,In Wellisch's,1
,In another,1
,is In #3,1
,In #3,1
size:12,Each size:12 ),1
,size:12 ),1
against,INTEGER against Player,1
,against Player,1
,protect against attacks,1
,attacks against site,1
,entrenchment against attacks,1
,( against just,1
,( against cavalry,1
,against attacks,2
,against site,1
,against just,1
,against cavalry,1
,damage against humans,4
,( against ),1
,against humans,4
,against ),1
SpanningTree,is SpanningTree Mover,2
,SpanningTree Mover,2
Hops,Friendly Hops allowed,1
,Hops allowed,1
<centering>,<startP2> <centering> },1
,<centering> },1
<size>,{ <size> <track>,6
,<size> <track>,6
,{ <size> <sizeHome>,1
,<size> <sizeHome>,1
,{ <size> },80
,<size> },80
,{ <size> <home>,1
,<size> <home>,1
,{ <size> <numPieces>,2
,<size> <numPieces>,2
,{ <size> <track2>,17
,<size> <track2>,17
,{ <size> <track1>,1
,<size> <track1>,1
,{ <size> <tracks>,4
,<size> <tracks>,4
,{ <size> <CCW2>,3
,<size> <CCW2>,3
,{ <size> <trackCCW2>,1
,<size> <trackCCW2>,1
,{ <size> <trackDirection>,1
,<size> <trackDirection>,1
,{ <size> <init>,1
,<size> <init>,1
,{ <size> <hogon>,1
,<size> <hogon>,1
,{ <size> <start>,4
,<size> <start>,4
,{ <size> <placement>,1
,<size> <placement>,1
,{ <size> <regions>,1
,<size> <regions>,1
,{ <size> <dot0>,1
,<size> <dot0>,1
,{ <size> <startP1>,1
,<size> <startP1>,1
,<num> <size> <team>,5
,<size> <team>,5
,{ <size> <dice>,1
,<size> <dice>,1
,{ <size> <trackP2>,1
,<size> <trackP2>,1
,{ <size> <trackTeam2>,1
,<size> <trackTeam2>,1
,{ <size> <HomeTrack2>,1
,<size> <HomeTrack2>,1
,{ <size> <bgrd>,1
,<size> <bgrd>,1
,{ <size> <hints>,5
,<size> <hints>,5
,{ <size> <maxVal>,1
,<size> <maxVal>,1
rings:2,Square rings:2 ),3
,rings:2 ),3
<placement>,<size> <placement> },1
,<placement> },1
It,. It should,1
,It should,1
,. It is,1
,It is,1
,. It determines,1
,It determines,1
cell,'to' cell .,2
,EMPTY cell .,1
,ENEMY-OCCUPIED cell .,1
,cell .,4
,empty cell in,1
,empty cell whose,1
,cell in,1
,cell whose,1
,a cell is,1
,empty cell isolated,1
,cell is,1
,cell isolated,1
rings:4,Square rings:4 ),1
,rings:4 ),1
Direction,sites Direction from:,54
,Direction from:,54
,= Direction =,2
,Direction =,2
,sites Direction from:55,1
,sites Direction from:19,1
,sites Direction from:94,1
,sites Direction from:34,1
,sites Direction from:56,1
,sites Direction from:0,1
,sites Direction from:93,1
,sites Direction from:50,1
,Direction from:55,1
,Direction from:19,1
,Direction from:94,1
,Direction from:34,1
,Direction from:56,1
,Direction from:0,1
,Direction from:93,1
,Direction from:50,1
,forEach Direction Diagonal,1
,Direction Diagonal,1
,forEach Direction Orthogonal,8
,forEach Direction (,16
,Direction Orthogonal,8
,Direction (,16
,forEach Direction Forward,8
,Direction Forward,8
,sites Direction from:#1,1
,Direction from:#1,1
,. Direction to,1
,Direction to,1
rings:3,Square rings:3 joinCorners:True,12
,rings:3 joinCorners:True,14
,Triangle rings:3 joinCorners:True,1
,Square rings:3 ),7
,rings:3 ),7
,Triangle rings:3 joinMidpoints:False,1
,rings:3 joinMidpoints:False,1
,Hexagon rings:3 joinCorners:True,1
<Remove>,STRING <Remove> args:,2
,<Remove> args:,2
Baidaq,) Baidaq al-Bayadiq,2
,a Baidaq al-Bayadiq,2
,Shah's Baidaq .,1
,Baidaq al-Bayadiq,4
,Baidaq .,1
Axial,) Axial (,2
,Axial (,2
<Players:track3>,) <Players:track3> <Players:track4>,1
,<Players:track3> <Players:track4>,1
Target,- Target region,1
,Target region,1
,is Target {,4
,Target {,4
Slide,move Slide (,97
,Slide (,97
,move Slide Diagonal,70
,Slide Diagonal,70
,move Slide ),10
,Slide ),10
,move Slide Orthogonal,142
,Slide Orthogonal,142
,move Slide All,4
,Slide All,4
,move Slide STRING,3
,Slide STRING,3
,move Slide Forward,30
,Slide Forward,30
,move Slide Rotational,1
,Slide Rotational,1
,move Slide #1,23
,Slide #1,23
,move Slide Backward,1
,Slide Backward,1
,steps Slide Adjacent,2
,Slide Adjacent,2
/>Wikipedia</a>,STRING />Wikipedia</a> .,1
,/>Wikipedia</a> .,1
count:21,INTEGER count:21 ),1
,count:21 ),3
,) count:21 ),2
MovesThisTurn,count MovesThisTurn ),49
,MovesThisTurn ),49
<diceHand>,<start> <diceHand> <track58>,1
,<diceHand> <track58>,1
count:20,) count:20 ),4
,count:20 ),9
,STRING count:20 ),5
,INTEGER count:20 state:3,4
,count:20 state:3,4
count:25,) count:25 ),5
,count:25 ),5
3-stack,the 3-stack and,2
,3-stack and,2
T33434,tiling T33434 INTEGER,5
,T33434 INTEGER,5
,tiling T33434 (,4
,T33434 (,4
,<tiling T33434 Diamond>,1
,T33434 Diamond>,1
count:23,STRING count:23 ),2
,count:23 ),2
<DefaultAndCount,STRING <DefaultAndCount INTEGER,1
,<DefaultAndCount INTEGER,1
count:24,STRING count:24 ),4
,count:24 ),5
,) count:24 ),1
41>,. 41> <38,1
,<38 41> STRING,1
,41> <38,1
,41> STRING,1
Movement,) Movement of,3
,Movement of,3
<Tiger:playMove>,play <Tiger:playMove> ),1
,<Tiger:playMove> ),1
<Move>,STRING <Move> args:,2
,<Move> args:,2
,{ <Move> <Ending>,1
,<Move> <Ending>,1
USE,STRING USE ),2
,USE ),3
,#1 USE ),1
2nd,( 2nd edition,1
,2nd edition,1
<EnemyTrack1>,<MiddleTrack> <EnemyTrack1> <EnemyTrack2>,1
,<EnemyTrack1> <EnemyTrack2>,1
<Version:play>,<Version:start> <Version:play> (,1
,<Version:play> (,3
,play <Version:play> ),2
,<Version:play> ),2
,rules <Version:play> (,1
,Remove <Version:play> (,1
<Players:track4>,<Players:track3> <Players:track4> },1
,<Players:track4> },1
<ThinDashed>,<All> <ThinDashed> <All>,2
,<All> <ThinDashed> <Orthogonal>,2
,<ThinDashed> <All>,2
,<ThinDashed> <Orthogonal>,2
,<All> <ThinDashed> <4>,2
,<ThinDashed> <4>,2
removed,are removed .,1
,is removed .,1
,removed .,2
Playable,sites Playable ),3
,Playable ),3
<Ruleset:rules>,) <Ruleset:rules> ),1
,<Ruleset:rules> ),1
USW,STRING USW ),2
,USW ),3
,#1 USW ),1
count:30,} count:30 ),1
,count:30 ),1
,) count:30 state:1,1
,count:30 state:1,1
removes,This removes the,1
,This removes one,1
,removes the,1
,removes one,1
by:Enemy,Occupied by:Enemy ),12
,by:Enemy ),12
,Occupied by:Enemy STRING,28
,by:Enemy STRING,28
,Occupied by:Enemy top:False,6
,by:Enemy top:False,6
,) by:Enemy (,3
,by:Enemy (,3
<sitesP1>,{ <sitesP1> <sitesP2>,1
,<sitesP1> <sitesP2>,1
count:31,STRING count:31 ),2
,count:31 ),2
movement,King movement Usage:,7
,Pawn movement Note:,6
,all movement in,1
,block movement in,1
,INTEGER movement directions,2
,movement Usage:,7
,movement Note:,6
,movement in,2
,movement directions,2
,post-promotion movement of,1
,of movement .,1
,movement of,1
,movement .,2
,( movement ),2
,movement ),2
,subsequent movement .,1
,ie movement selection,1
,follow-up movement First,1
,movement selection,1
,movement First,1
count:35,STRING count:35 ),2
,count:35 ),2
LL,in LL (,4
,LL (,4
<Players:numPlayers>,players <Players:numPlayers> ),2
,<Players:numPlayers> ),2
True,) True ),23
,True ),72
,) True (,53
,True (,54
,STRING True ),2
,stack: True ),2
,stack: True (,1
,) True False,2
,True False,2
,INTEGER True ),42
,#5 True ),3
,) True to:#1,1
,True to:#1,1
<EnemyTrack2>,<EnemyTrack1> <EnemyTrack2> },1
,<EnemyTrack2> },1
Lúdkax,) Lúdkax (,1
,Lúdkax (,1
<Player:scores>,{ <Player:scores> },1
,<Player:scores> },1
<Players:board>,{ <Players:board> (,1
,<Players:board> (,1
count:2,) count:2 ),84
,count:2 ),127
,STRING count:2 ),6
,INTEGER count:2 ),35
,) count:2 state:1,4
,count:2 state:1,4
,) count:2 stack:True,2
,count:2 stack:True,2
,STRING count:2 value:2,1
,STRING count:2 value:3,1
,STRING count:2 value:4,1
,count:2 value:2,3
,count:2 value:3,3
,count:2 value:4,3
,) count:2 STRING,2
,count:2 STRING,2
,) count:2 (,1
,count:2 (,1
,sow count:2 ),1
,sow count:2 apply:,1
,count:2 apply:,1
,} count:2 value:4,2
,} count:2 value:6,2
,} count:2 value:5,2
,} count:2 value:2,2
,} count:2 value:3,2
,count:2 value:6,2
,count:2 value:5,2
,INTEGER count:2 value:8,2
,INTEGER count:2 value:7,2
,count:2 value:8,2
,count:2 value:7,2
,} count:2 ),1
mode,( mode Simultaneous,2
,mode Simultaneous,2
count:1,) count:1 ),31
,count:1 ),44
,INTEGER count:1 ),4
,STRING count:1 value:5,1
,STRING count:1 value:6,1
,count:1 value:5,1
,count:1 value:6,1
,) count:1 (,4
,count:1 (,4
,} count:1 ),4
,STRING count:1 ),5
,} count:1 value:7,2
,count:1 value:7,2
<trackTeam2>,<size> <trackTeam2> },1
,<trackTeam2> },1
<OffDiagonal>,STRING <OffDiagonal> STRING,2
,<OffDiagonal> STRING,2
<boardWidth>,<boardHeight> <boardWidth> <numTiles>,1
,<boardWidth> <numTiles>,1
count:9,STRING count:9 ),9
,count:9 ),14
,) count:9 ),5
doctrines,Player doctrines INTEGER,1
,doctrines INTEGER,1
count:8,INTEGER count:8 ),7
,count:8 ),12
,) count:8 ),4
,STRING count:8 value:1,1
,count:8 value:1,1
,) count:8 (,1
,count:8 (,1
,STRING count:8 ),1
,INTEGER count:8 value:2,2
,count:8 value:2,2
count:7,) count:7 ),8
,count:7 ),17
,INTEGER count:7 ),9
,) count:7 (,1
,count:7 (,1
Reset,) Reset the,1
,Reset the,1
count:6,) count:6 ),8
,count:6 ),13
,) count:6 (,1
,count:6 (,1
,STRING count:6 ),5
count:5,) count:5 ),420
,count:5 ),458
,INTEGER count:5 ),35
,STRING count:5 ),3
,) count:5 (,2
,count:5 (,2
,} count:5 value:1,2
,count:5 value:1,2
,INTEGER count:5 state:3,2
,count:5 state:3,2
empties,suicide empties on,1
,empties on,1
count:4,) count:4 ),84
,count:4 ),114
,STRING count:4 ),3
,INTEGER count:4 ),27
,) count:4 value:1,4
,count:4 value:1,4
,sow count:4 STRING,1
,count:4 STRING,1
,) count:4 (,12
,count:4 (,12
,INTEGER count:4 value:6,2
,INTEGER count:4 value:5,2
,INTEGER count:4 value:4,2
,INTEGER count:4 value:3,2
,count:4 value:6,2
,count:4 value:5,2
,count:4 value:4,2
,count:4 value:3,2
before:35,) before:35 (,1
,before:35 (,1
bridging,opponent's bridging markers,1
,bridging markers,1
count:3,) count:3 ),43
,count:3 ),93
,INTEGER count:3 ),22
,STRING count:3 ),27
,) count:3 (,2
,count:3 (,2
,) count:3 skipIf:,1
,count:3 skipIf:,1
,} count:3 ),1
43>,. 43> <44,1
,43> <44,1
before:34,) before:34 (,1
,before:34 (,1
all,( all Passed,59
,all Passed,59
,( all DiceUsed,92
,all DiceUsed,92
,( all DiceEqual,32
,all DiceEqual,32
,( all the,1
,all the,3
,in all the,1
,( all Sites,82
,all Sites,82
,( all Different,16
,all Different,16
,blocks all movement,1
,all movement,1
,if all the,1
,--COMMA-- all players,1
,all players,1
,attack all pieces,2
,all pieces,2
,on all sides,1
,all sides,1
,when all destinations,1
,all destinations,1
count:18,sow count:18 STRING,1
,count:18 STRING,1
,STRING count:18 ),1
,count:18 ),1
always,Can always just,4
,always just,4
,Can always capture,1
,always capture,1
,Knight always moves,1
,always moves,1
,is always yielded,1
,always yielded,1
new,a new piece,1
,new piece,1
,two new markers,1
,new markers,1
count:16,) count:16 ),7
,count:16 ),13
,STRING count:16 ),3
,} count:16 ),3
Player,value Player Mover,156
,value Player Prev,5
,Player Mover,156
,Player Prev,5
,forEach Player if:,14
,result Player Loss,42
,Player if:,14
,Player Loss,42
,value Player (,3
,Pieces Player ),10
,result Player Win,6
,Player (,8
,Player ),34
,Player Win,6
,STRING Player ),10
,value Player P3,1
,value Player P1,2
,value Player P4,1
,value Player P2,2
,Player P3,1
,Player P1,2
,Player P4,1
,Player P2,2
,Moves Player ),4
,sites Player STRING,15
,Player STRING,15
,sites Player ),5
,value Player Next,7
,forEach Player (,4
,handSite Player ),3
,Player Next,7
,score Player ),1
,value Player #1,1
,Player #1,1
,Blocked Player ),1
,result Player <Result:nonMover>,1
,Select Player index,2
,Player <Result:nonMover>,1
,Player index,2
,Score Player (,1
,if Player 1's,1
,by Player INTEGER,1
,against Player 3's,1
,then Player INTEGER,1
,capture Player 3's,1
,until Player INTEGER,1
,Player 1's,1
,Player INTEGER,3
,Player 3's,2
,) Player removal,1
,) Player doctrines,1
,) Player maps,1
,Player removal,1
,Player doctrines,1
,Player maps,1
count:17,) count:17 ),2
,count:17 ),5
,STRING count:17 ),3
already,are already there,3
,already there,3
,has already been,1
,already been,1
on:#2,STRING on:#2 ),1
,on:#2 ),1
T33336>,<tiling T33336> STRING,1
,T33336> STRING,1
<2><,STRING <2>< (,1
,<2>< (,1
positions,starting positions of,4
,positions of,4
degrees:180,P2 degrees:180 ),2
,degrees:180 ),2
Crossing,sites Crossing at:,5
,Crossing at:,5
matchScore,( matchScore P1,71
,( matchScore P2,5
,matchScore P1,71
,matchScore P2,5
,( matchScore P4,6
,( matchScore P5,8
,( matchScore P6,10
,( matchScore P7,12
,( matchScore P8,14
,( matchScore P9,16
,matchScore P4,6
,matchScore P5,8
,matchScore P6,10
,matchScore P7,12
,matchScore P8,14
,matchScore P9,16
count:<Board:initLeopard>,) count:<Board:initLeopard> ),1
,count:<Board:initLeopard> ),1
unit,the unit at,1
,unit at,1
,a unit (,1
,unit (,1
<Boundary:shape>,hex <Boundary:shape> <Board:size>,1
,<Boundary:shape> <Board:size>,1
,hex <Boundary:shape> <Board>,1
,<Boundary:shape> <Board>,1
Entrenchment,) Entrenchment sites,1
,Entrenchment sites,1
NE,{ NE SE,6
,NE SE,8
,Side NE ),27
,NE ),41
,--COMMA-- NE --COMMA--,1
,SW NE ),4
,NE --COMMA--,1
,{ NE SW,5
,NE SW,7
,) NE ),2
,STRING NE (,2
,{ NE NW,1
,SE NE },1
,NE (,2
,NE NW,2
,NE },1
,Adjacent NE ),4
,FR NE ),1
,STRING NE SW,2
,STRING NE NE,1
,NE NE ),1
,STRING NE NW,1
,STRING NE SE,2
,SE NE ),1
,NW NE ),1
,NE NE,1
,) NE included:True,1
,NE included:True,1
cells:,) cells: {,31
,cells: {,32
,} cells: {,1
count:10,) count:10 ),4
,count:10 ),4
,INTEGER count:10 state:3,4
,count:10 state:3,4
count:14,INTEGER count:14 ),4
,count:14 ),5
,STRING count:14 ),1
count:15,) count:15 ),19
,count:15 ),60
,INTEGER count:15 ),39
,STRING count:15 ),2
count:12,) count:12 ),15
,count:12 ),38
,STRING count:12 ),23
44>,. 44> STRING,1
,44> STRING,1
count:13,INTEGER count:13 ),2
,count:13 ),5
,) count:13 ),3
<rememberHopCapture>,<stepMove> <rememberHopCapture> },1
,<rememberHopCapture> },1
<start2>,<start1> <start2> <start3>,1
,<start2> <start3>,1
,<start1> <start2> },1
,<start2> },1
items:,Stack items: {,24
,items: {,24
<Move:limit>,) <Move:limit> (,1
,<Move:limit> (,1
after:9,before:9 after:9 if:,4
,after:9 if:,4
Glinski,Glinski Chess,2
,in Glinski Chess,1
<PiecePlacement:PiecePlacement>,{ <PiecePlacement:PiecePlacement> },1
,<PiecePlacement:PiecePlacement> },1
NW,SE NW SW,6
,NW SW,8
,player NW ),1
,NW ),42
,Side NW ),25
,--COMMA-- NW --COMMA--,1
,SE NW ),5
,S NW (,1
,NW --COMMA--,1
,NW (,3
,{ NW SE,5
,NW SE,6
,) NW ),2
,STRING NW (,2
,NE NW },1
,{ NW SW,1
,NW },1
,Adjacent NW ),4
,FL NW ),1
,STRING NW SE,1
,NE NW ),1
,SW NW ),2
,STRING NW NW,1
,NW NW ),1
,STRING NW NE,1
,STRING NW SW,1
,NW NW,1
,NW NE,1
,) NW included:True,1
,NW included:True,1
after:2,before:2 after:2 if:,1
,after:2 if:,1
,) after:2 ),1
,after:2 ),1
reaching,upon reaching the,1
,reaching the,1
trick,implementation trick to,1
,trick to,1
farthest,board farthest from,1
,the farthest side,1
,farthest from,1
,farthest side,1
around,somewhere around in,1
,site around but,1
,around in,1
,around but,1
,pieces around the,1
,around the,1
after:1,before:1 after:1 if:,1
,after:1 if:,3
,before:3 after:1 if:,2
<Player:end>,{ <Player:end> },1
,<Player:end> },1
,) <Player:end> ),1
,<Player:end> ),1
<Challenge:maxVal>,INTEGER <Challenge:maxVal> ),1
,<Challenge:maxVal> ),1
Expands,Expands to,1
<track>,<size> <track> },5
,<track> },8
,{ <track> },1
,<start> <track> },1
,<size> <track> <regions>,1
,<track> <regions>,2
,<num> <track> <regions>,1
,<homes> <track> <init>,1
,<track> <init>,1
,<num> <track> },1
to:P2,) to:P2 ),15
,False to:P2 ),25
,to:P2 ),40
to:P1,) to:P1 ),15
,False to:P1 ),26
,to:P1 ),41
and,( and (,2059
,and (,2059
,( and {,515
,and {,515
,hand and have,3
,and have,3
,triple and double,1
,and double,1
,( and STRING,23
,and STRING,23
,Gallicus and Advanced,1
,3-stack and the,2
,and Advanced,1
,and the,6
,level and each,1
,and each,2
,flat and two,1
,flat and one,1
,and two,1
,and one,1
,pieces and the,1
,Persians and Spartans,1
,unify and simplify,1
,equivalent and it,1
,omnicheck and cannot,1
,Pawns and Hoplites,1
,and Spartans,1
,and simplify,1
,and it,1
,and cannot,1
,and Hoplites,1
,INTEGER and each,1
,--COMMA-- and either,1
,Capture and Pawn,1
,Kings and Pawns,1
,--COMMA-- and there,1
,--COMMA-- and the,1
,completed and edited,1
,and either,1
,and Pawn,1
,and Pawns,1
,and there,1
,and edited,1
,steps and move,6
,and move,7
,cavalry and infantry,1
,and infantry,1
,learner and multi,1
,Equiversi and Hops-a-Daisy,1
,and multi,1
,and Hops-a-Daisy,1
,marker and the,1
,indecise and move,1
,Connectivity and Liberty,1
,groups and cells,1
,--COMMA-- and are,1
,connectivity and is,1
,and Liberty,1
,and cells,1
,and are,1
,and is,1
,hop and the,1
,surrounded and influence,1
,values and testing,1
,passing and end,1
,turns and pass,1
,region and then,1
,Board and Set-up/Pie,1
,> and not,1
,and influence,1
,and testing,1
,and end,1
,and pass,1
,and then,1
,and Set-up/Pie,1
,and not,1
<seed>,<type> <seed> },1
,<seed> },1
define,( define STRING,4267
,define STRING,4268
,We define STRING,1
,function define (,1
,define (,1
,the define .,1
,define .,1
<End:cond>,if <End:cond> (,1
,<End:cond> (,1
<p1_dirs>,STRING <p1_dirs> <p2_dirs>,1
,<p1_dirs> <p2_dirs>,1
row,( row of:,30
,row of:,30
,inner row (,2
,row (,2
,Row row ),1
,#2 row Column,1
,row ),1
,row Column,1
<DiagShow>,<directionsUsed> <DiagShow> <directionsWin>,2
,<DiagShow> <directionsWin>,2
,<directionsUsed> <DiagShow> <ForcedFillLevel>,1
,<DiagShow> <ForcedFillLevel>,1
supergame,whose supergame is,2
,the supergame (,1
,supergame is,2
,supergame (,1
OK,INTEGER OK --COMMA--,1
,OK --COMMA--,1
<Each>,STRING <Each> args:,1
,<Each> args:,1
Adjacent,Step Adjacent (,4
,Adjacent (,27
,Related Adjacent (,1
,STRING Adjacent (,3
,STRING Adjacent N,4
,STRING Adjacent S,4
,STRING Adjacent E,4
,STRING Adjacent W,4
,STRING Adjacent NE,4
,STRING Adjacent NW,4
,STRING Adjacent SW,4
,STRING Adjacent SE,4
,STRING Adjacent ),14
,difference Adjacent (,8
,Slide Adjacent (,2
,Hop Adjacent (,8
,difference Adjacent Forward,3
,difference Adjacent Backward,3
,difference Adjacent Forwards,1
,difference Adjacent Rightward,1
,difference Adjacent Leftward,1
,Adjacent N,4
,Adjacent S,4
,Adjacent E,4
,Adjacent W,4
,Adjacent NE,4
,Adjacent NW,4
,Adjacent SW,4
,Adjacent SE,4
,Adjacent ),14
,Adjacent Forward,3
,Adjacent Backward,3
,Adjacent Forwards,1
,Adjacent Rightward,1
,Adjacent Leftward,1
,STRING Adjacent ~,1
,Adjacent ~,1
,) Adjacent (,1
P1,STRING P1 (,482
,result P1 Win,216
,P1 (,762
,P1 Win,218
,Mover P1 ),262
,Pieces P1 ),58
,Moves P1 ),60
,P1 ),2056
,hand P1 ),23
,handSite P1 ),300
,STRING P1 STRING,78
,P1 STRING,154
,STRING P1 ),910
,nextPhase P1 (,2
,addScore P1 (,2
,score P1 ),15
,STRING P1 N,29
,P1 N,29
,of P1 ?,2
,P1 ?,2
,STRING P1 <Variant:p1Moves>,1
,P1 <Variant:p1Moves>,1
,regions P1 (,161
,sites P1 ),90
,) P1 ),27
,STRING P1 S,1
,result P1 Loss,13
,P1 S,1
,P1 Loss,13
,STRING P1 directed:True,107
,P1 directed:True,230
,pair P1 INTEGER,108
,{ P1 P3,31
,P1 INTEGER,239
,P1 P3,31
,} P1 directed:True,122
,regions P1 {,16
,) P1 Home,66
,P1 {,37
,P1 Home,66
,STRING P1 E,2
,P1 E,2
,STRING P1 {,21
,STRING P1 P2,11
,P2 P1 ),13
,P1 P2,57
,sites P1 STRING,63
,matchScore P1 ),71
,of P1 (,3
,pair P1 (,3
,{ P1 },23
,P1 },23
,Piece P1 ),7
,score P1 INTEGER,2
,Players P1 P2,8
,#1 P1 ),7
,pair P1 P2,3
,pair P1 P4,2
,P4 P1 ),2
,P1 P4,3
,( P1 --COMMA--,1
,id P1 ),13
,Pieces P1 in:,1
,P1 --COMMA--,1
,P1 in:,1
,score P1 (,104
,Prev P1 ),2
,Active P1 ),7
,of P1 .,1
,STRING P1 Win,1
,P2 P1 Win,1
,P1 .,1
,pair P1 STRING,6
,handSite P1 INTEGER,115
,Hand P1 ),6
,{ P1 P2,35
,Player P1 ),2
,Value P1 #1,1
,P1 #1,1
,loop:True P1 ),140
,hand P1 size:1,1
,P1 size:1,1
,Next P1 ),3
,) P1 inner,47
,P1 inner,47
,) P1 four,1
,P1 four,1
,) P1 outer,14
,P1 outer,14
,) P1 half,1
,P1 half,1
,) P1 home,91
,) P1 sides,1
,P1 home,92
,P1 sides,1
,) P1 LeftMost,1
,) P1 End,1
,P1 LeftMost,1
,P1 End,1
,) P1 Inner,4
,) P1 Left,2
,P1 Inner,4
,P1 Left,2
,) P1 Outer,1
,P1 Outer,1
,STRING P1 <Board:innerInitP1>,1
,P1 <Board:innerInitP1>,1
,) P1 first,1
,P1 first,1
,pair P1 FirstSite,33
,mapEntry P1 ),26
,P1 FirstSite,33
,score P1 STRING,2
,pair P1 LastSite,7
,P1 LastSite,7
,the P1 home,1
,Value P1 INTEGER,3
,) P1 right,1
,P1 right,1
,) P1 Three,2
,P1 Three,2
,addScore P1 INTEGER,2
,result P1 Draw,1
,P1 Draw,1
,Score P1 INTEGER,3
,Group P1 ),3
,All P1 ),1
,Score P1 (,4
,Territory P1 All,1
,P1 All,1
,Territory P1 ),7
,{ P1 P4,1
,Pieces P1 STRING,1
,STRING P1 W,2
,P1 W,2
,STRING P1 INTEGER,6
,- P1 or,2
,P1 or,2
,<Board:EnemyTrack1> P1 directed:True,1
,Foreground P1 STRING,2
,Colour P1 STRING,2
,set P1 Edge,8
,P1 Edge,8
,STRING P1 maxState:3,1
,STRING P1 maxState:6,1
,P1 maxState:3,1
,P1 maxState:6,1
,set P1 Vertex,1
,P1 Vertex,1
,Bet P1 (,1
,amount P1 ),1
No,No simultaneous,2
,) No capture,1
,No capture,1
,No Simultaneous,1
,) No swapping,10
,No swapping,10
,STRING No friendly,1
,No friendly,1
P2,STRING P2 STRING,31
,Pieces P2 ),70
,P2 STRING,122
,P2 ),1643
,result P2 Win,180
,P2 Win,182
,STRING P2 (,436
,Moves P2 ),43
,P2 (,721
,STRING P2 <Tiger:move>,1
,P2 <Tiger:move>,1
,hand P2 ),3
,handSite P2 ),258
,STRING P2 ),866
,nextPhase P2 (,2
,STRING P2 N,12
,P2 N,12
,addScore P2 (,2
,score P2 ),11
,STRING P2 E,1
,P2 E,1
,Mover P2 ),39
,) P2 ),23
,STRING P2 directed:True,105
,P2 directed:True,231
,pair P2 INTEGER,108
,{ P2 P4,30
,P2 INTEGER,239
,P2 P4,30
,} P2 directed:True,122
,regions P2 {,16
,) P2 Home,10
,P2 {,37
,P2 Home,10
,STRING P2 {,21
,P1 P2 ),17
,STRING P2 P1,11
,P2 P1,14
,sites P2 STRING,62
,matchScore P2 ),5
,of P2 },2
,P2 },30
,result P2 Loss,6
,P2 Loss,6
,pair P2 (,4
,{ P2 },23
,Piece P2 ),5
,score P2 INTEGER,2
,#1 P2 ),2
,regions P2 (,160
,sites P2 ),85
,pair P2 P1,3
,pair P2 P3,2
,P3 P2 ),2
,P2 P3,34
,--COMMA-- P2 ),1
,Pieces P2 in:,1
,P2 in:,1
,score P2 (,104
,Prev P2 ),2
,Active P2 ),7
,of P2 .,1
,STRING P2 Win,1
,P1 P2 Win,1
,P2 .,1
,pair P2 STRING,6
,handSite P2 INTEGER,115
,Hand P2 ),6
,of P2 The,1
,P2 The,1
,P1 P2 },5
,Player P2 ),2
,Value P2 #1,1
,P2 #1,1
,loop:True P2 ),149
,STRING P2 S,29
,P2 S,29
,) P2 home,147
,) P2 inner,47
,P2 home,148
,P2 inner,47
,) P2 four,1
,P2 four,1
,) P2 outer,10
,) P2 half,1
,P2 outer,10
,P2 half,1
,) P2 sides,1
,P2 sides,1
,) P2 LeftMost,1
,) P2 End,1
,P2 LeftMost,1
,P2 End,1
,) P2 Inner,4
,) P2 Left,2
,P2 Inner,4
,P2 Left,2
,) P2 Outer,1
,P2 Outer,1
,STRING P2 <Board:innerInitP2>,1
,P2 <Board:innerInitP2>,1
,) P2 first,1
,P2 first,1
,pair P2 LastSite,33
,mapEntry P2 ),26
,P2 LastSite,33
,score P2 STRING,2
,pair P2 FirstSite,7
,P2 FirstSite,7
,the P2 home,1
,Value P2 INTEGER,3
,) P2 right,1
,P2 right,1
,) P2 Three,2
,P2 Three,2
,addScore P2 INTEGER,2
,P1 P2 (,4
,id P2 ),8
,Score P2 INTEGER,3
,Group P2 ),3
,All P2 ),1
,Score P2 (,6
,Territory P2 All,1
,P2 All,1
,Territory P2 ),7
,{ P2 P3,2
,Pieces P2 STRING,1
,STRING P2 W,1
,P2 W,1
,STRING P2 INTEGER,6
,or P2 (,2
,Next P2 ),1
,P1 P2 P3,30
,<Board:trackP2> P2 directed:True,1
,<Board:trackTeam2> P2 directed:True,1
,<Board:HomeTrack2> P2 directed:True,1
,<Board:EnemyTrack2> P2 directed:True,1
,ExtendName P2 STRING,16
,Foreground P2 STRING,2
,Colour P2 STRING,2
,Rotate P2 degrees:180,2
,P2 degrees:180,2
,set P2 Edge,6
,P2 Edge,6
,STRING P2 maxState:3,1
,STRING P2 maxState:6,1
,P2 maxState:3,1
,P2 maxState:6,1
,set P2 Vertex,1
,P2 Vertex,1
,Bet P2 (,1
,amount P2 ),1
<start1>,<board> <start1> <start2>,1
,<start1> <start2>,2
,<walls> <start1> <start2>,1
P3,STRING P3 directed:True,34
,pair P3 INTEGER,22
,P1 P3 },19
,P3 directed:True,98
,P3 INTEGER,41
,P3 },28
,) P3 ),2
,Mover P3 ),19
,P3 ),280
,} P3 directed:True,64
,STRING P3 {,1
,STRING P3 (,27
,handSite P3 ),77
,P3 {,2
,P3 (,49
,{ P3 },3
,Piece P3 ),4
,P1 P3 P5,12
,P3 P5,12
,#1 P3 ),2
,STRING P3 ),110
,P2 P3 ),2
,pair P3 P2,2
,sites P3 ),9
,P3 P2,2
,Prev P3 ),2
,Active P3 ),7
,result P3 Win,10
,P3 Win,10
,pair P3 STRING,2
,P3 STRING,5
,hand P3 ),2
,{ P3 P4,2
,P3 P4,28
,sites P3 STRING,1
,Player P3 ),1
,Value P3 #1,1
,P3 #1,1
,regions P3 (,13
,loop:True P3 ),29
,score P3 (,8
,Moves P3 ),5
,regions P3 {,1
,Group P3 ),2
,score P3 ),2
,P2 P3 },6
,STRING P3 E,1
,STRING P3 S,1
,P3 E,1
,P3 S,1
,STRING P3 INTEGER,6
,handSite P3 INTEGER,13
,P2 P3 P4,26
,Pieces P3 ),4
,result P3 Loss,2
,P3 Loss,2
,ExtendName P3 STRING,2
,Bet P3 (,1
,amount P3 ),1
<priority>,STRING <priority> STRING,1
,<priority> STRING,1
P4,STRING P4 directed:True,27
,pair P4 INTEGER,20
,P2 P4 },18
,P4 directed:True,91
,P4 INTEGER,39
,P4 },29
,Mover P4 ),5
,) P4 ),2
,P4 ),221
,} P4 directed:True,63
,STRING P4 {,1
,STRING P4 (,24
,handSite P4 ),71
,P4 {,1
,P4 (,39
,Piece P4 ),2
,P2 P4 P6,12
,P4 P6,12
,STRING P4 ),103
,P1 P4 ),2
,pair P4 P1,2
,sites P4 ),8
,P4 P1,2
,Active P4 ),7
,result P4 Win,9
,P4 Win,9
,pair P4 STRING,2
,P4 STRING,5
,P3 P4 },8
,sites P4 STRING,1
,Player P4 ),1
,Value P4 #1,1
,P4 #1,1
,regions P4 (,11
,loop:True P4 ),8
,score P4 (,4
,Moves P4 ),2
,Group P4 ),1
,score P4 ),1
,P1 P4 },1
,STRING P4 E,1
,STRING P4 N,1
,P4 E,1
,P4 N,1
,STRING P4 INTEGER,6
,handSite P4 INTEGER,13
,{ P4 P5,5
,P3 P4 P5,20
,P4 P5,25
,matchScore P4 ),6
,<Board:trackTeam2> P4 directed:True,1
,{ P4 },2
,ExtendName P4 STRING,2
,Pieces P4 ),2
,result P4 Loss,1
,P4 Loss,1
P5,STRING P5 directed:True,3
,pair P5 INTEGER,4
,STRING P5 (,6
,P3 P5 },4
,handSite P5 ),52
,Mover P5 ),4
,Piece P5 ),1
,P5 directed:True,60
,P5 INTEGER,6
,P5 (,8
,P5 },9
,P5 ),78
,sites P5 ),2
,} P5 directed:True,57
,regions P5 (,1
,score P5 (,1
,STRING P5 ),5
,STRING P5 INTEGER,2
,P4 P5 P6,20
,{ P5 P6,5
,P4 P5 },5
,P5 P6,25
,loop:True P5 ),6
,P3 P5 P7,8
,P5 P7,8
,result P5 Win,6
,matchScore P5 ),8
,P5 Win,6
P6,STRING P6 directed:True,3
,pair P6 INTEGER,4
,STRING P6 (,6
,P4 P6 },4
,handSite P6 ),51
,Piece P6 ),1
,P6 directed:True,60
,P6 INTEGER,6
,P6 (,6
,P6 },14
,P6 ),76
,sites P6 ),1
,Mover P6 ),3
,} P6 directed:True,57
,STRING P6 INTEGER,2
,STRING P6 ),4
,P5 P6 },10
,P5 P6 P7,15
,{ P6 P7,5
,P6 P7,20
,loop:True P6 ),6
,P4 P6 P8,8
,P6 P8,8
,result P6 Win,6
,matchScore P6 ),10
,P6 Win,6
P7,Mover P7 ),4
,P7 ),68
,handSite P7 ),43
,STRING P7 directed:True,2
,P7 directed:True,49
,pair P7 INTEGER,2
,} P7 directed:True,47
,P7 INTEGER,4
,STRING P7 (,2
,STRING P7 INTEGER,2
,P7 (,2
,STRING P7 ),4
,P6 P7 P8,15
,{ P7 P8,5
,P6 P7 },5
,P7 P8,20
,P7 },7
,P5 P7 },2
,loop:True P7 ),5
,P5 P7 P9,6
,P7 P9,6
,result P7 Win,5
,matchScore P7 ),12
,P7 Win,5
P8,handSite P8 ),42
,STRING P8 directed:True,2
,P8 ),61
,P8 directed:True,49
,pair P8 INTEGER,2
,} P8 directed:True,47
,P8 INTEGER,4
,STRING P8 (,2
,STRING P8 INTEGER,2
,P8 (,2
,P7 P8 },10
,P7 P8 P9,10
,{ P8 P9,5
,P8 },12
,P8 P9,15
,P6 P8 },2
,loop:True P8 ),5
,P6 P8 P10,6
,P8 P10,6
,result P8 Win,5
,matchScore P8 ),14
,P8 Win,5
P9,handSite P9 ),34
,STRING P9 directed:True,1
,P9 ),54
,P9 directed:True,38
,pair P9 INTEGER,1
,} P9 directed:True,37
,P9 INTEGER,1
,P8 P9 P10,15
,{ P9 P10,5
,P9 P10,20
,P7 P9 },2
,loop:True P9 ),4
,P7 P9 P11,4
,P9 },2
,P9 P11,4
,result P9 Win,4
,matchScore P9 ),16
,P9 Win,4
adjacent,an adjacent enemy,1
,adjacent enemy,1
,not adjacent to,1
,adjacent to,1
,INTEGER adjacent direction,1
,six adjacent directions,1
,an adjacent space,1
,adjacent direction,1
,adjacent directions,1
,adjacent space,1
Source:,functions Source: Chess,7
,) Source: Chess,24
,Castling Source: Chess,1
,setup Source: Derived,1
,Source: Chess,33
,Source: Derived,5
,. Source: Derived,3
,) Source: Derived,1
,. Source: Chess,1
Specific,) Specific attacks,1
,Specific attacks,1
any,in any direction,1
,any direction,1
,to any other,1
,any other,1
,at any empty,2
,any empty,2
,Hop any piece,3
,any piece,3
,oer any intervening,1
,any intervening,1
,in any of,2
,to any of,1
,make any move,1
,without any captured,1
,any of,3
,any move,1
,any captured,1
,without any capture,2
,any capture,2
,after any previous,1
,any previous,1
<leftMostP2>,<CCW2> <leftMostP2> },1
,<leftMostP2> },1
<Move:leopard>,play <Move:leopard> ),1
,<Move:leopard> ),1
28-29,Squares 28-29 (,1
,28-29 (,1
Of,Fog Of War,1
,Of War,1
Find,) Find lists,1
,Find lists,1
<playRules>,{ <playRules> },1
,<playRules> },3
,<numPlayers> <playRules> },2
until,) until a,1
,position until a,1
,King until Player,1
,until a,2
,until Player,1
<Doctrine4:doctrine>,mapEntry <Doctrine4:doctrine> #2,1
,<Doctrine4:doctrine> #2,1
nextPhase,( nextPhase Mover,217
,nextPhase Mover,217
,( nextPhase STRING,47
,nextPhase STRING,47
,( nextPhase (,204
,nextPhase (,204
,( nextPhase P1,2
,( nextPhase P2,2
,nextPhase P1,2
,nextPhase P2,2
,( nextPhase ),2
,nextPhase ),2
Attacks,) Attacks (,1
,Attacks (,1
strategy,for strategy game,1
,standard strategy about,1
,strategy game,1
,strategy about,1
46>,<31 46> <,1
,46> <,1
Main,) Main routine,8
,Main routine,8
,) Main move,1
,Main move,1
shift,( shift INTEGER,404
,shift INTEGER,404
,( shift -1,31
,shift -1,31
,( shift -5,3
,shift -5,3
,( shift -4,4
,( shift -2,10
,shift -4,4
,shift -2,10
,( shift -7,2
,( shift -6,1
,shift -7,2
,shift -6,1
,( shift -3,5
,shift -3,5
,( shift .,1
,shift .,1
,( shift -0,3
,shift -0,3
,( shift (,2
,shift (,2
,( shift STRING,2
,shift STRING,2
,( shift -,1
,shift -,1
<stepMove>,<hopCapture> <stepMove> <rememberHopCapture>,1
,<stepMove> <rememberHopCapture>,1
<Tiling:piece1>,place <Tiling:piece1> (,2
,<Tiling:piece1> (,2
<numSides>,<tile> <numSides> <piece1>,2
,<numSides> <piece1>,2
Inner,P1 Inner Home,4
,P2 Inner Home,2
,Inner Home,6
,) Inner holes,2
,Inner holes,2
,P2 Inner home,2
,Inner home,2
,sites Inner ),1
,Inner ),1
facesByDie:,d:2 facesByDie: {,6
,facesByDie: {,6
<Dual:end>,) <Dual:end> ),1
,<Dual:end> ),1
Note:,movement Note: Counter,6
,. Note: INTEGER,2
,. Note: Counter,6
,Note: Counter,13
,Note: INTEGER,2
,setup Note: <back_dir>,1
,Note: <back_dir>,1
,) Note: Counter,1
,( Note: Currently,1
,( Note: A,1
,Note: Currently,1
,Note: A,1
if:#4,) if:#4 ),27
,if:#4 ),27
builds,that builds an,1
,builds an,1
Move:,individual Move: ie,1
,Move: ie,1
if:#5,) if:#5 ),1
,if:#5 ),1
if:#2,) if:#2 (,1
,if:#2 (,1
if:#1,) if:#1 (,2
,if:#1 (,10
,replayDouble:True if:#1 (,8
,) if:#1 ),1
,if:#1 ),3
,from if:#1 ),2
SidesMatch,is SidesMatch ),1
,SidesMatch ),1
fully,cases: fully surrounded,1
,fully surrounded,1
non-capturing,double-step non-capturing advancement,1
,non-capturing advancement,2
,Double-step non-capturing advancement,1
,( non-capturing ),1
,non-capturing ),1
<ThinDotted>,<All> <ThinDotted> <All>,4
,<ThinDotted> <All>,4
,<All> <ThinDotted> <Orthogonal>,1
,<ThinDotted> <Orthogonal>,1
<ludus>,{ <ludus> },1
,<ludus> },1
<Scenario:pieceSetup>,<Scenario:buildingSetup> <Scenario:pieceSetup> <Scenario:teams>,1
,<Scenario:pieceSetup> <Scenario:teams>,1
by:All,Occupied by:All STRING,27
,by:All STRING,27
,Occupied by:All ),26
,by:All ),26
,Occupied by:All top:False,1
,by:All top:False,1
,Occupied by:All components:,1
,by:All components:,1
,Occupied by:All component:#3,1
,by:All component:#3,1
,Occupied by:All on:Edge,1
,by:All on:Edge,1
<usingHogon>,<numSeeds> <usingHogon> },1
,<usingHogon> },1
Make,Board Make a,1
,Make a,1
completed,--COMMA-- completed and,1
,completed and,1
Two,) Two flat,2
,or Two round,1
,Two flat,2
,Two round,1
,) Two or,1
,Two or,1
,STRING Two cases:,1
,Two cases:,1
Handle,) Handle double-step,1
,Handle double-step,1
<result>,{ <result> },5
,<result> },6
,<type> <result> },1
<exact:True>,STRING <exact:True> STRING,1
,<exact:True> STRING,1
Pot,set Pot (,6
,Pot (,6
<Board:init>,Count <Board:init> to:,1
,<= <Board:init> (,2
,<Board:init> to:,1
,<Board:init> (,2
<armSize>,{ <armSize> <numPiece>,1
,<armSize> <numPiece>,1
NotEmpty,) NotEmpty Orthogonal,2
,NotEmpty Orthogonal,2
,) NotEmpty ),2
,NotEmpty ),2
choices,move choices (,1
,choices (,1
diretion,forward diretion .,1
,diretion .,1
if:True,) if:True (,13
,if:True (,40
,) if:True ),28
,if:True ),70
,apply if:True (,5
,) if:True STRING,1
,if:True STRING,1
,) if:True apply:,1
,if:True apply:,5
,sow if:True apply:,4
,between if:True (,1
,between if:True ),37
,to if:True ),1
,to if:True (,21
,#4 if:True ),3
,#2 if:True ),1
<Variant:movement>,play <Variant:movement> ),1
,<Variant:movement> ),1
<startTheseus>,<type> <startTheseus> <startMinotaur>,1
,<startTheseus> <startMinotaur>,1
Shahzada,) Shahzada (,1
,Shahzada (,1
<Player:option>,STRING <Player:option> next:1,1
,STRING <Player:option> next:2,1
,STRING <Player:option> next:3,1
,STRING <Player:option> next:4,1
,STRING <Player:option> ),1
,<Player:option> next:1,1
,<Player:option> next:2,1
,<Player:option> next:3,1
,<Player:option> next:4,1
,<Player:option> ),1
Kendall------------------------------------------,for Kendall------------------------------------------ (,1
,Kendall------------------------------------------ (,1
maybe,. maybe this,1
,maybe this,1
Knights,* Knights move,1
,Knights move,1
<influence>,<suicide> <influence> },1
,<influence> },1
another,to another .,1
,another .,1
,In another variant,1
,another variant,1
simultaneous,No simultaneous version,1
,simultaneous version,1
,No simultaneous move,1
,simultaneous move,2
,without simultaneous move,1
,the simultaneous play,1
,simultaneous play,1
,the simultaneous phase,1
,simultaneous phase,1
Hexagon>,<tri Hexagon> STRING,1
,Hexagon> STRING,1
as:,STRING as: A,1
,as: A,1
<Doctrine3:doctrine>,mapEntry <Doctrine3:doctrine> #2,1
,<Doctrine3:doctrine> #2,1
enemy,the enemy we,1
,an enemy it,1
,enemy we,1
,enemy it,1
,an enemy is,1
,An enemy piece,1
,enemy is,1
,enemy piece,9
,hopped enemy pieces,1
,an enemy to,1
,The enemy piece,1
,enemy pieces,1
,enemy to,1
,adjacent enemy wall/singleton,1
,only enemy piece,1
,two enemy stones,1
,one enemy piece,1
,enemy wall/singleton,1
,enemy stones,1
,blocked enemy piece,3
,contain enemy units,1
,the enemy ),1
,enemy units,1
,enemy ),1
,an enemy piece,2
<PlacementConditions>,STRING <PlacementConditions> args:,1
,{ <PlacementConditions> },1
,<PlacementConditions> args:,1
,<PlacementConditions> },1
skipped-over,Save skipped-over spaces,6
,skipped-over spaces,6
<trackCCW2>,<size> <trackCCW2> <trackCW1>,1
,<trackCCW2> <trackCW1>,1
SE,NE SE NW,6
,SE NW,11
,player SE ),1
,SE ),38
,Side SE ),26
,--COMMA-- SE --COMMA--,1
,STRING SE NW,5
,SE --COMMA--,1
,NW SE },5
,SE },6
,) SE ),2
,STRING SE (,2
,SW SE },1
,{ SE NE,1
,SE (,2
,SE NE,2
,Adjacent SE ),4
,FL SE ),1
,NW SE ),1
,NE SE ),1
,STRING SE SE,1
,SE SE ),1
,STRING SE NE,1
,STRING SE SW,1
,SW SE ),1
,SE SE,1
,SE SW,2
,NE SE SW,1
<Play>,STRING <Play> args:,15
,<Play> args:,15
,<init> <Play> <end>,1
,<Play> <end>,1
,) <Play> ),1
,<Play> ),3
,Each <Play> ),1
,rules <Play> (,1
,<Play> (,4
,) <Play> (,3
,play <Play> ),1
Urdabegini,) Urdabegini (,1
,Urdabegini (,1
Canon,) Canon (,6
,Canon (,6
default,**** default INTEGER,1
,**** default Equi,1
,) default Hops-a-Daisy,1
,**** default Equiversi,2
,- default for,1
,) default Equiversi,2
,**** default Originals,1
,default INTEGER,1
,default Equi,1
,default Hops-a-Daisy,1
,default Equiversi,4
,default for,1
,default Originals,1
gray,either gray or,1
,gray or,1
Star,regular Star INTEGER,14
,Star INTEGER,15
,hex Star (,1
,Star (,1
,hex Star INTEGER,1
are,pieces are already,3
,are already,3
,moves are awaiting,1
,are awaiting,1
,pieces are removed,1
,are removed,1
,cells are empty,1
,are empty,1
,we are thinking,1
,are thinking,1
,Spartans are different,1
,time are in,1
,are different,1
,are in,1
,spaces are traditionally,1
,Pawns are captured,1
,they are set,1
,there are pieces,1
,there are no,1
,There are no,1
,are traditionally,1
,are captured,1
,are set,1
,are pieces,1
,are no,2
,that are facing,1
,that are currently,1
,are facing,1
,are currently,1
,Planes are never,1
,are never,1
,and are rarely,1
,are rarely,1
,These are to,1
,destinations are blocked,1
,produced are unpredictable,1
,bugs are fixed,1
,are to,1
,are blocked,1
,are unpredictable,1
,are fixed,1
Groups,count Groups if:,14
,Groups if:,14
,count Groups Orthogonal,10
,Groups Orthogonal,10
,count Groups ),4
,Groups ),4
,count Groups STRING,14
,Groups STRING,14
,count Groups Edge,1
,Groups Edge,1
<Scenario:boardRegins>,) <Scenario:boardRegins> (,1
,<Scenario:boardRegins> (,1
Non-capturing,) Non-capturing 2-step,2
,Non-capturing 2-step,2
49>,. 49> STRING,1
,49> STRING,1
where,( where STRING,213
,where STRING,213
,( where Level,29
,where Level,29
,site where it,1
,where it,2
,( where (,27
,where (,27
,remains where it,1
,turn where the,1
,where the,1
,( where #1,1
,where #1,1
,argument where from,3
,where from,3
,case where piece,1
,where piece,1
,determines where to,1
,where to,1
Courier,) Courier (,1
,Courier (,1
takes,promotion takes place,1
,visually takes place,1
,King takes possession,1
,takes place,2
,takes possession,1
<Player:size>,INTEGER <Player:size> ),5
,<Player:size> ),5
<doctrine>,{ <doctrine> },4
,<doctrine> },4
<Play:choice>,) <Play:choice> ),1
,<Play:choice> ),1
broken,for broken markers,1
,broken markers,1
SW,NW SW },7
,SW },12
,Side SW ),26
,SW ),39
,--COMMA-- SW ),1
,STRING SW NE,4
,N SW (,1
,SW NE,4
,SW (,3
,NE SW },5
,) SW ),2
,STRING SW (,2
,{ SW SE,1
,SW SE,2
,Adjacent SW ),4
,FR SW ),1
,NE SW ),2
,SE SW ),1
,STRING SW SW,1
,SW SW ),1
,STRING SW NW,1
,STRING SW SE,1
,NW SW ),1
,SW SW,1
,SW NW,2
,SE SW NW,1
at:,who at: (,1615
,at: (,4667
,what at: (,485
,state at: (,392
,State at: (,179
,Cell at: (,224
,topLevel at: (,59
,Stack at: (,80
,count at: (,1217
,Value at: (,62
,Piece at: (,106
,Count at: (,8
,Neutral at: (,16
,Farthest at: (,4
,Mover at: (,24
,Hidden at: (,9
,INTEGER at: (,7
,Group at: (,26
,of:Cell at: (,28
,LineOfSight at: (,8
,of:Vertex at: (,19
,What at: (,38
,Threatened at: (,1
,STRING at: (,18
,Who at: (,2
,LargePiece at: (,1
,Edge at: (,9
,of:Edge at: (,5
,Vertex at: (,3
,rotation at: (,4
,Empty at: (,3
,by:Mover at: (,2
,by:Neutral at: (,1
,} at: (,2
,Liberties at: (,1
,Crossing at: (,5
,) at: (,4
black,or black .,1
,black .,1
TreeCentre,is TreeCentre Shared,2
,TreeCentre Shared,2
-------------------------------------------,) ------------------------------------------- Functional,1
,------------------------------------------- Functional,1
<Players:removeP3>,) <Players:removeP3> },1
,<Players:removeP3> },1
<End>,STRING <End> args:,11
,<End> args:,11
,end <End> ),2
,<End> ),2
Queens,* Queens can,1
,Queens can,1
RightMost,Three RightMost (,2
,RightMost (,2
Fire,) Fire (,1
,Fire (,1
<Default,STRING <Default INTEGER,1
,<Default INTEGER,1
variants:,7-8 variants: <,1
,variants: <,1
<centreMove>,<regions> <centreMove> },1
,<centreMove> },1
<playingTeamPieces>,<startRules> <playingTeamPieces> },1
,<playingTeamPieces> },1
Healing,) Healing (,1
,Healing (,1
<Start:play>,<Start:start> <Start:play> ),1
,<Start:play> ),1
TO,Each TO ADD,1
,TO ADD,1
of:All,} of:All ),13
,of:All ),15
,Control of:All by:Mover,2
,Control of:All by:Neutral,1
,of:All by:Mover,2
,of:All by:Neutral,1
,Forward of:All ),1
,Forwards of:All ),1
<Player:start>,{ <Player:start> },1
,<Player:start> },2
,rules <Player:start> (,5
,<Player:start> (,5
,) <Player:start> },1
castle,They castle by,1
,castle by,1
remains,Pawn remains where,1
,it remains in,1
,remains where,1
,remains in,1
<Board:openingRegions>,) <Board:openingRegions> (,1
,<Board:openingRegions> (,1
<Result>,Next <Result> ),1
,STRING <Result> args:,15
,<Result> ),11
,<Result> args:,15
,Mover <Result> ),10
,result <Result> Win,2
,<Result> Win,2
<mover>,{ <mover> <next>,1
,<mover> <next>,1
,<nonMover> <mover> },1
,<mover> },1
<kingHop>,{ <kingHop> <numKings>,1
,<kingHop> <numKings>,1
either,in either forward,1
,either forward,1
,and either gray,1
,off either of,1
,either gray,1
,either of,1
****,) **** default,5
,) **** standard,1
,) **** second,1
,) **** Equi,1
,**** default,5
,**** standard,1
,**** second,1
,**** Equi,1
use:Cell,) use:Cell ),18
,use:Cell ),20
,<BoardSize:gridType> use:Cell ),1
,STRING use:Cell ),1
neighbors,many neighbors (,1
,friendly neighbors <PlaceBy:qtyMax>,1
,neighbors (,1
,neighbors <PlaceBy:qtyMax>,1
<Variant:end>,if <Variant:end> (,1
,<Variant:end> (,1
<p1_directions>,STRING <p1_directions> <p2_directions>,6
,<p1_directions> <p2_directions>,6
subgame,( subgame STRING,12
,subgame STRING,12
,designated subgame whose,1
,subgame whose,1
Guard,) Guard (,5
,Guard (,5
To,last To ),1794
,To ),1794
,sites To (,14
,To (,14
,Ruleset To Reconstruct,9
,To Reconstruct,9
,= To site,1
,To site,1
,last To afterConsequence:True,92
,To afterConsequence:True,92
,) To know,1
,To know,1
,) To promote,20
,move To move,2
,To promote,20
,To move,2
<Players:homes>,) <Players:homes> <Players:store>,1
,<Players:homes> <Players:store>,1
03>,. 03> STRING,3
,03> STRING,3
<numCounters>,<doneSoFar> <numCounters> <ruleSecondCapture>,1
,<numCounters> <ruleSecondCapture>,1
results,( results from:,18
,results from:,18
,( results from:#1,1
,results from:#1,1
those,of those .,1
,those .,1
,including those without,1
,those without,1
palace,the palace (,1
,palace (,1
applyAfterAllMoves:True,) applyAfterAllMoves:True ),1
,applyAfterAllMoves:True ),1
<Row:track2>,STRING <Row:track2> loop:True,12
,<Row:track2> loop:True,12
whatever,can whatever the,1
,whatever the,1
SameDirection,) SameDirection ),8
,) SameDirection (,9
,SameDirection ),8
,SameDirection (,9
vertices:,} vertices: {,2
,vertices: {,110
,) vertices: {,35
,graph vertices: {,73
<moves>,{ <moves> },1
,<moves> },1
Score,set Score #1,3
,Score #1,3
,set Score Mover,27
,Score Mover,27
,set Score P1,7
,set Score P2,9
,Score P1,7
,Score P2,9
,set Score Each,14
,Score Each,14
,set Score Player,1
,Score Player,1
,set Score Next,13
,Score Next,13
pawns,normal pawns .,2
,pawns .,2
,the pawns (,1
,pawns (,1
leads,grid leads to,1
,leads to,1
Defines,) Defines a,1
,Defines a,2
,) Defines for,5
,Defines for,10
,/----------------------------------------- Defines for,1
,Options Defines for,1
spaces,skipped-over spaces in,6
,spaces in,6
,two spaces diagonally,1
,spaces diagonally,1
,of spaces to,1
,spaces to,1
,INTEGER spaces .,1
,board spaces are,1
,nearest spaces of,1
,spaces .,1
,spaces are,1
,spaces of,1
of:#2,#4 of:#2 ),1
,#3 of:#2 ),3
,of:#2 ),4
of:#1,Pieces of:#1 in:,1
,of:#1 in:,1
,#4 of:#1 ),1
,#3 of:#1 ),3
,of:#1 ),4
<regions>,<num> <regions> <start>,1
,<regions> <start>,1
,<track> <regions> },1
,<regions> },2
,<track> <regions> <scores>,1
,<regions> <scores>,1
,<tracks> <regions> <centreMove>,1
,<regions> <centreMove>,1
,<size> <regions> },1
next,( next ),91
,next ),91
,the next move,1
,next move,1
,the next hole,2
,next hole,2
,the next state,1
,next state,1
,their next turn,1
,next turn,4
,player's next turn,2
,eg next to,1
,next to,5
,or next to,1
,not next to,2
,nor next to,1
,the next turn,1
listiong,the listiong for,1
,listiong for,1
distance,at distance INTEGER,1
,distance INTEGER,1
,total distance equal,1
,distance equal,1
<Play:play>,rules <Play:play> (,1
,<Play:play> (,1
Forwards,Rightward Forwards Leftward,3
,Forwards Leftward,3
,{ Forwards Rightward,14
,Forwards Rightward,14
,Step Forwards (,5
,Forwards (,8
,difference Forwards Diagonal,1
,Forwards Diagonal,1
,Hop Forwards (,1
,{ Forwards Backward,9
,STRING Forwards ),14
,Adjacent Forwards ),1
,Backwards Forwards },17
,{ Forwards BR,2
,Forwards Backward,9
,Forwards ),16
,Forwards },20
,Forwards BR,2
,{ Forwards Rightwards,7
,STRING Forwards ~,2
,STRING Forwards STRING,1
,Backward Forwards },1
,Leftward Forwards },2
,STRING Forwards (,1
,Forwards Rightwards,7
,Forwards ~,2
,Forwards STRING,1
,directions Forwards of:All,1
,Forwards of:All,1
,directions Forwards ),1
,step Forwards (,1
attract,( attract (,2
,attract (,2
<Draw>,STRING <Draw> STRING,1
,<Draw> STRING,1
<MainWin1>,<MainWinC> <MainWin1> <MainWin0>,1
,<MainWin1> <MainWin0>,1
show,( show Symbol,64
,show Symbol,64
,moves show that,1
,show that,1
edition,2nd edition --COMMA--,1
,edition --COMMA--,1
Step,move Step (,315
,Step (,315
,move Step #1,51
,Step #1,51
,move Step Orthogonal,60
,Step Orthogonal,60
,move Step Adjacent,4
,Step Adjacent,4
,move Step Forwards,5
,Step Forwards,5
,move Step Forward,9
,Step Forward,9
,move Step <Army>,1
,move Step <Tower>,1
,Step <Army>,1
,Step <Tower>,1
,move Step Backwards,1
,Step Backwards,1
,move Step All,3
,Step All,3
,move Step Diagonal,34
,Step Diagonal,34
Places,) Places neutral,1
,Places neutral,1
hexagons,of hexagons invented,1
,hexagons invented,1
Mover,is Mover P1,262
,Mover P1,262
,STRING Mover ),690
,nextPhase Mover (,164
,Mover ),2335
,Mover (,314
,handSite Mover ),623
,result Mover Draw,67
,Mover Draw,67
,nextPhase Mover STRING,52
,Mover STRING,518
,is Mover P2,39
,Mover P2,39
,Player Mover ),156
,Value Mover INTEGER,65
,Value Mover (,44
,Mover INTEGER,136
,Pieces Mover ),120
,result Mover Win,573
,Mover Win,573
,sites Mover ),239
,is Mover #1,10
,STRING Mover (,21
,Mover #1,15
,sites Mover STRING,446
,Value Mover Undefined,8
,Mover Undefined,8
,is Mover P3,19
,is Mover P4,5
,Mover P3,19
,Mover P4,5
,Pieces Mover in:,48
,Hand Mover ),14
,Mover in:,49
,Moves Mover ),87
,result Mover Loss,46
,Mover Loss,46
,score Mover ),53
,addScore Mover INTEGER,48
,Score Mover INTEGER,2
,Value Mover -1,1
,Value Mover -2,1
,Mover -1,2
,Mover -2,1
,id Mover ),13
,is Mover P5,4
,Mover P5,4
,score Mover (,1
,) Mover ),188
,handSite Mover INTEGER,21
,is Mover (,33
,Next Mover ),29
,mapEntry Mover ),85
,STRING Mover state:,1
,Mover state:,1
,Pieces Mover STRING,10
,is Mover P6,3
,is Mover P7,4
,STRING Mover at:,24
,Mover P6,3
,Mover P7,4
,Mover at:,24
,Prev Mover ),6
,Track Mover STRING,4
,Track Mover #1,2
,Track Mover from:,3
,Mover from:,3
,addScore Mover (,11
,is Mover Prev,193
,Mover Prev,194
,FirstSite Mover STRING,1
,sites Mover #1,3
,Value Mover Off,1
,Mover Off,1
,Connected Mover ),7
,result Mover <Result:mover>,2
,Mover <Result:mover>,2
,All Mover ),1
,result Mover <Result>,10
,Mover <Result>,10
,Orthogonal Mover ),3
,Players Mover Prev,1
,) Mover swaps,1
,than Mover index,2
,Players Mover (,1
,shiftPlayers Mover (,2
,) Mover ''shift-swaps'',1
,Mover swaps,1
,Mover index,2
,Mover ''shift-swaps'',1
,result Mover <End:result>,1
,Mover <End:result>,1
,Score Mover (,25
,Winning Mover (,4
,INTEGER Mover ),1
,) Mover (,5
,Bet Mover (,1
,nextPhase Mover ),1
,#1 Mover ),8
,STRING Mover in:,1
,STRING Mover Next,14
,Mover Next,23
,is Mover Next,5
,#3 Mover ),1
,Value Mover STRING,1
,EndSite Mover STRING,2
,Track Mover #2,2
,Mover #2,2
,addScore Mover -1,1
,<Connection:type> Mover ),1
,) Mover top:True,1
,Mover top:True,1
,<BoardShape:directionsUsed> Mover ),2
,RegularGraph Mover ),2
,RegularGraph Mover k:3,1
,Mover k:3,1
,RegularGraph Mover k:4,1
,Mover k:4,1
,SpanningTree Mover ),2
,CaterpillarTree Mover ),2
,#4 Mover ),1
,addScore Mover #6,1
,addScore Mover STRING,2
,Mover #6,1
,) Mover Next,4
,Next Mover (,2
,Edge Mover length:,7
,Vertex Mover length:,1
,Mover length:,8
nor,King nor the,1
,nor the,1
,) nor next,1
,nor next,1
not,( not (,1522
,not (,1522
,( not STRING,83
,not STRING,83
,hop not in,1
,not in,2
,but not the,1
,not the,1
,is not in,1
,) not adjacent,1
,not adjacent,1
,was not a,1
,not a,1
,does not work,1
,not work,1
,that's not possible,1
,not possible,1
,does not block,1
,not block,1
,player not being,1
,does not result,1
,may not capture,1
,not being,1
,not result,1
,not capture,1
,is not slowed,1
,incase not entered,1
,not slowed,1
,not entered,1
,( not #2,1
,not #2,1
,but not next,2
,not next,2
,then not be,2
,and not as,1
,not be,2
,not as,1
Moves,no Moves P1,60
,Moves P1,60
,no Moves P2,43
,Moves P2,43
,count Moves ),55
,Moves ),55
,max Moves (,45
,Moves (,47
,no Moves Mover,87
,Moves Mover,87
,no Moves Next,126
,Moves Next,126
,no Moves Player,4
,Moves Player,4
,no Moves P3,5
,no Moves P4,2
,Moves P3,5
,Moves P4,2
,no Moves <Players:player1>,1
,Moves <Players:player1>,1
,max Moves withValue:True,3
,Moves withValue:True,3
,Infantry Moves that,1
,Moves that,1
,Attack Moves (,1
central,the central site,2
,central site,2
<70>,STRING <70> <,3
,<70> <,3
,STRING <70> STRING,1
,<70> STRING,1
King2Start,> King2Start STRING,2
,King2Start STRING,2
result:,STRING result: (,3
,result: (,6
,next:1 result: (,1
,next:2 result: (,1
,next:0 result: (,1
concentric,( concentric {,34
,concentric {,34
,( concentric Square,23
,concentric Square,23
,( concentric Triangle,2
,concentric Triangle,2
,( concentric Hexagon,1
,concentric Hexagon,1
numPerHole:,sow numPerHole: (,1
,numPerHole: (,1
<BoardRegions>,<BoardShape> <BoardRegions> <PieceSetup>,2
,<BoardRegions> <PieceSetup>,2
<sites>,<site6> <sites> },1
,<sites> },1
components:,STRING components: {,87
,components: {,96
,) components: {,3
,#4 components: {,3
,by:All components: {,1
,by:#1 components: {,1
,by:Mover components: {,1
Loop,is Loop ),2
,Loop ),2
,is Loop (,2
,Loop (,2
,is Loop surround:Next,1
,Loop surround:Next,1
<Version:order>,{ <Version:order> },2
,<Version:order> },2
<Board:dot0>,STRING <Board:dot0> ),1
,<Board:dot0> ),1
was,( was Pass,12
,was Pass,12
,capture was made,1
,was made,1
,move was not,1
,was not,1
numSides:4,} numSides:4 ),4
,numSides:4 ),4
,STRING numSides:4 {,2
,numSides:4 {,2
,Each numSides:4 (,6
,numSides:4 (,6
<Tiling:piece2>,place <Tiling:piece2> (,2
,<Tiling:piece2> (,2
continuity,STRING continuity testing,1
,continuity testing,1
<MainWin0>,<MainWin1> <MainWin0> <ExtraRows>,1
,<MainWin0> <ExtraRows>,1
We,apply We store,1
,We store,3
,) We store,2
,) We indicate,1
,We indicate,1
,) We update,1
,We update,1
,) We check,1
,We check,1
,. We define,1
,We define,1
,) We remove,1
,We remove,1
<Challenge:start>,start <Challenge:start> ),1
,<Challenge:start> ),1
,{ <Challenge:start> },1
,<Challenge:start> },1
target,the target zone,1
,target zone,1
,the target EMPTY,1
,the target ENEMY-OCCUPIED,1
,target EMPTY,1
,target ENEMY-OCCUPIED,1
closed:True,) closed:True ),4
,closed:True ),4
<NumberPlayers>,STRING <NumberPlayers> args:,1
,<NumberPlayers> args:,1
what,( what at:,485
,what at:,485
,( what STRING,5
,what STRING,5
,( what at:12,3
,( what at:25,2
,what at:12,3
,what at:25,2
,( what at:32,1
,( what at:33,1
,what at:32,1
,what at:33,1
,of what is,2
,what is,2
,( what Cell,1
,what Cell,1
,( what ),1
,what ),1
,( what at:#1,7
,what at:#1,7
,( what at:1,10
,( what at:2,1
,( what at:3,1
,( what at:4,2
,( what at:5,1
,( what at:6,1
,( what at:7,1
,( what at:8,1
,( what at:9,1
,( what at:10,1
,( what at:11,1
,( what at:22,1
,( what at:21,1
,( what at:20,1
,( what at:19,1
,( what at:18,1
,( what at:17,1
,( what at:16,1
,( what at:15,1
,( what at:14,1
,( what at:13,1
,what at:1,10
,what at:2,1
,what at:3,1
,what at:4,2
,what at:5,1
,what at:6,1
,what at:7,1
,what at:8,1
,what at:9,1
,what at:10,1
,what at:11,1
,what at:22,1
,what at:21,1
,what at:20,1
,what at:19,1
,what at:18,1
,what at:17,1
,what at:16,1
,what at:15,1
,what at:14,1
,what at:13,1
,( what at:#3,1
,what at:#3,1
,( what at:0,9
,what at:0,9
,( what at:60,1
,what at:60,1
learner,) learner and,1
,learner and,1
Within,is Within (,14
,Within (,14
<Capture>,STRING <Capture> args:,4
,<Capture> args:,4
<InitOneSeed>,<LeftInnerHolesP2> <InitOneSeed> <InitTwoSeeds>,1
,<InitOneSeed> <InitTwoSeeds>,1
Hex,Set-up/Pie Hex 7-8,1
,Hex 7-8,1
<Variant:noPieceSite>,sites <Variant:noPieceSite> ),1
,<Variant:noPieceSite> ),1
play,( play (,1410
,play (,1410
,( play <Tiger:playMove>,1
,play <Tiger:playMove>,1
,( play <Move:leopard>,1
,play <Move:leopard>,1
,( play <Fox:rememberHopCapture>,1
,play <Fox:rememberHopCapture>,1
,Can play again,1
,play again,1
,to play in,2
,play in,2
,simultaneous play .,1
,play .,1
,( play <Swap:playRules>,1
,play <Swap:playRules>,1
,( play STRING,2
,play STRING,2
,to play for,1
,play for,3
,( play <Play>,1
,play <Play>,1
,( play <Variant:movement>,1
,play <Variant:movement>,1
,people play with,1
,play with,1
,( play <CheckmateRule:Move>,1
,play <CheckmateRule:Move>,1
,( play <GType:selGame>,2
,play <GType:selGame>,2
,( play <Version:play>,2
,play <Version:play>,2
,( play <Play:move>,1
,play <Play:move>,1
,( play <ChosenHop:prioritySetting>,1
,play <ChosenHop:prioritySetting>,1
,human play is,1
,play is,1
,in play option,1
,play option,1
,of play for,2
,symmetrical play on,1
,play on,1
leftHole,) leftHole of,1
,leftHole of,1
<Row:num>,rectangle <Row:num> INTEGER,1
,<Row:num> INTEGER,1
<initP3>,<sumFingers> <initP3> <betP3>,1
,<initP3> <betP3>,1
count:<Goat:num>,) count:<Goat:num> ),1
,count:<Goat:num> ),1
Shared,STRING Shared ),226
,hand Shared ),5
,Shared ),264
,STRING Shared (,9
,Shared (,9
,Hand Shared ),8
,handSite Shared ),17
,hand Shared size:2,5
,handSite Shared INTEGER,43
,Shared size:2,5
,Shared INTEGER,43
,hand Shared size:16,1
,Shared size:16,1
,) Shared ),5
,Piece Shared ),1
,hand Shared size:14,1
,Shared size:14,1
,set Shared Edge,14
,Shared Edge,14
,TreeCentre Shared ),2
,hand Shared size:8,1
,Shared size:8,1
when,pieces when capture,1
,pieces when goes,1
,when capture,1
,when goes,1
,stop when its,1
,when its,1
,colour when a,1
,place when neither,1
,ends when a,1
,when a,2
,when neither,1
,moves when all,1
,fail when the,1
,when all,1
,when the,1
Capture,- Capture region,1
,Capture region,1
,< Capture method,4
,) Capture a,1
,Capture method,4
,Capture a,1
,{ Capture moves,1
,Capture moves,1
,. Capture and,1
,Capture and,1
<random>,<pieces> <random> <order>,1
,<random> <order>,1
Queen2Start,> Queen2Start STRING,2
,Queen2Start STRING,2
<Dice:move>,Each <Dice:move> ),1
,<Dice:move> ),1
connectivity,affects connectivity and,1
,connectivity and,1
far,so far (,1
,so far .,2
,so far for,1
,far (,1
,far .,2
,far for,1
,the far side,1
,far side,1
07>,. 07> STRING,1
,07> STRING,1
container:1,Piece container:1 ),1
,container:1 ),1
,by:Neutral container:1 #1,1
,container:1 #1,1
<version>,{ <version> },2
,<version> },2
Sacrifice,) Sacrifice a,2
,Sacrifice a,2
spirale,the spirale .,1
,spirale .,1
<map>,<start> <map> },1
,<map> },1
case,special case where,1
,case where,1
item,( item STRING,2694
,item STRING,2694
<limit>,{ <limit> },2
,<limit> },5
,<start> <limit> },2
,<order> <limit> },1
double,to double .,4
,double .,5
,and double .,1
,does double damage,1
,double damage,1
,the double moves,1
,own double pass,1
,double moves,1
,double pass,1
level:,) level: (,359
,level: (,359
Rukh,) Rukh (,1
,Rukh (,1
suicide,to suicide list,1
,to suicide empties,1
,remembered suicide locations,1
,suicide list,1
,suicide empties,1
,suicide locations,1
<numSeeds>,{ <numSeeds> },1
,<numSeeds> },1
,{ <numSeeds> <usingHogon>,1
,<numSeeds> <usingHogon>,1
Local,) Local state,2
,Local state,2
<Board:south>,<Board:north> <Board:south> <Board:east>,1
,<Board:north> <Board:south> },1
,<Board:south> <Board:east>,1
,<Board:south> },1
Cycle,is Cycle ),7
,Cycle ),7
Twin,the Twin (,1
,Twin (,1
another's,capture another's King,1
,another's King,1
Originals,default Originals (,1
,Originals (,1
<boardShape>,<numPlayers> <boardShape> <boardRegins>,1
,<boardShape> <boardRegins>,1
slide,a slide .,1
,slide .,1
,( slide (,12
,slide (,12
,during slide #5,1
,slide #5,1
,They slide in,1
,slide in,1
,Diagonal slide only,1
,slide only,1
state:11,) state:11 ),2
,state:11 ),2
state:10,) state:10 ),2
,state:10 ),2
reset,is reset in,13
,reset in,13
,rarely reset during,1
,reset during,1
state:12,) state:12 ),2
,state:12 ),2
<Board:east>,<Board:south> <Board:east> <Board:west>,1
,{ <Board:east> <Board:west>,1
,<Board:east> <Board:west>,2
steps:,Move steps: (,44
,steps: (,213
,from:#1 steps: (,26
,) steps: (,83
,STRING steps: (,49
,#1 steps: (,10
,#2 steps: (,1
Kotwal,) Kotwal (,1
,Kotwal (,1
skipIf:,) skipIf: (,16
,skipIf: (,19
,count:3 skipIf: (,1
,sow skipIf: (,1
,< skipIf: (,1
damage,double damage against,1
,150% damage against,1
,250% damage against,1
,200% damage against,1
,75% damage to,1
,125% damage to,1
,100% damage to,1
,Doctrine damage #1,1
,damage against,4
,damage to,3
,damage #1,1
explicitly,specified explicitly #2,1
,explicitly #2,1
PowerLeft,concept: PowerLeft is,1
,PowerLeft is,1
Shape,{ Shape line,1
,Shape line,1
NoEnd,passEnd NoEnd ),4
,NoEnd ),4
Rotate,piece Rotate P2,2
,Rotate P2,2
<BoardShape:directionScored>,STRING <BoardShape:directionScored> ),2
,<BoardShape:directionScored> ),2
what:,) what: (,5
,what: (,9
,INTEGER what: (,4
<pieceFlip>,<teams> <pieceFlip> <terrainScale>,1
,<pieceFlip> <terrainScale>,1
fromTo,( fromTo (,613
,fromTo (,613
index/value,( index/value ),1
,index/value ),1
<Version>,STRING <Version> args:,23
,<Version> args:,23
,) <Version> ),2
,<Version> ),2
<noPieceSite>,<board> <noPieceSite> <end>,1
,<noPieceSite> <end>,1
Friend,is Friend (,535
,Friend (,536
,STRING Friend (,1
,players Friend of:,5
,Friend of:,5
<Board:north>,{ <Board:north> <Board:south>,2
,<Board:north> <Board:south>,2
<Players:entries>,) <Players:entries> (,1
,<Players:entries> (,1
,) <Players:entries> },2
,<Players:entries> },2
protect,that protect against,1
,protect against,1
<511>,1> <511> STRING,1
,<511> STRING,1
more,or more captures,1
,more captures,1
,advance more than,1
,more than,1
<Version:type>,board <Version:type> use:Edge,1
,<Version:type> use:Edge,1
Loss,STRING Loss ),49
,Loss ),175
,P1 Loss ),13
,Mover Loss ),46
,P2 Loss ),6
,Player Loss ),42
,Next Loss ),14
,#1 Loss ),1
,P3 Loss ),2
,P4 Loss ),1
,All Loss ),1
<Rules:start>,start <Rules:start> ),1
,<Rules:start> ),1
,rules <Rules:start> phases:,2
,<Rules:start> phases:,2
Beasley,John Beasley --COMMA--,1
,Beasley --COMMA--,1
<moveCondition>,<capture> <moveCondition> <goal>,1
,<moveCondition> <goal>,1
count:<Board:numPieces>,STRING count:<Board:numPieces> ),1
,count:<Board:numPieces> ),1
Férsix,) Férsix (,1
,Férsix (,1
container:,Piece container: (,41
,container: (,53
,by:Mover container: (,10
,by:Neutral container: (,2
<Jarl>,STRING <Jarl> args:,1
,<Jarl> args:,1
<Row>,STRING <Row> args:,17
,<Row> args:,17
grid,tri grid bugs,1
,grid bugs,1
,diagonal grid leads,1
,grid leads,1
<75>,STRING <75> <,2
,<75> <,2
,STRING <75> STRING,1
,<75> STRING,1
sides,flat sides up,1
,round sides up,1
,sides up,2
,P1 sides holes,1
,P2 sides holes,1
,sides holes,2
,- sides (,1
,sides (,1
,all sides ),1
,sides ),1
of:1,) of:1 (,3
,of:1 (,3
,) of:1 <Size>,1
,of:1 <Size>,1
board,( board (,765
,board (,765
,( board <Board:type>,22
,board <Board:type>,22
,( board <Board:size>,1
,board <Board:size>,1
,( board <Board:board>,1
,board <Board:board>,1
,( board <Board>,16
,board <Board>,16
,the board .,1
,board .,2
,( board <Board:BoardDef>,1
,board <Board:BoardDef>,1
,( board <BoardConfig:BoardLayout>,1
,board <BoardConfig:BoardLayout>,1
,( board <NumOfPlayers:BoardShape>,2
,board <NumOfPlayers:BoardShape>,2
,the board at,1
,board at,1
,from board to,1
,a board made,1
,hexagonal board with,1
,The board has,1
,The board spaces,1
,the board opposite,1
,the board farthest,1
,board to,1
,board made,1
,board with,1
,board has,1
,board spaces,1
,board opposite,1
,board farthest,1
,spiral board .,1
,( board <Scenario:boardShape>,1
,board <Scenario:boardShape>,1
,times board order,1
,board order,1
,( board <BoardSize:gridType>,1
,board <BoardSize:gridType>,1
,( board <Version:type>,1
,board <Version:type>,1
,( board STRING,1
,board STRING,1
,( board <Dual:begin>,1
,board <Dual:begin>,1
levels,four levels of,1
,levels of,1
<Players:betP3>,) <Players:betP3> },1
,<Players:betP3> },1
T3464,tiling T3464 INTEGER,5
,T3464 INTEGER,5
,<tiling T3464 Diamond>,1
,T3464 Diamond>,1
Hops-a-Daisy,) Hops-a-Daisy (,1
,default Hops-a-Daisy ?,1
,and Hops-a-Daisy },1
,New Hops-a-Daisy (,1
,Eqiversi Hops-a-Daisy (,1
,Hops-a-Daisy (,3
,Hops-a-Daisy ?,1
,Hops-a-Daisy },1
steps:<Board:sizeHome>,) steps:<Board:sizeHome> Orthogonal,2
,steps:<Board:sizeHome> Orthogonal,2
<thirdHoleInnerP1>,<CCW2> <thirdHoleInnerP1> <rightMostInnerHoleP1>,1
,<thirdHoleInnerP1> <rightMostInnerHoleP1>,1
<piece_type>,STRING <piece_type> ),1
,<piece_type> ),1
dice,( dice d:2,78
,dice d:2,78
,( dice num:2,13
,dice num:2,13
,( dice d:6,40
,dice d:6,40
,( dice d:4,11
,dice d:4,11
,( dice d:7,4
,dice d:7,4
,( dice num:3,6
,dice num:3,6
,( dice num:<Board:numDice>,1
,dice num:<Board:numDice>,1
,( dice num:1,2
,dice num:1,2
,( dice d:8,2
,dice d:8,2
,( dice d:9,1
,dice d:9,1
,the dice ),1
,dice ),1
,the dice pieces,1
,dice pieces,1
at:<End:site5>,Stack at:<End:site5> ),1
,at:<End:site5> ),1
used,is used to,1
,used to,1
,is used idintify,1
,used idintify,1
influence,and influence of,1
,remaining influence (,1
,influence of,1
,influence (,1
<initHorse>,<num> <initHorse> },1
,<initHorse> },1
<Variant:p1Moves>,P1 <Variant:p1Moves> ),1
,<Variant:p1Moves> ),1
<Scenario:teams>,<Scenario:pieceSetup> <Scenario:teams> (,1
,<Scenario:teams> (,1
Maximum,Damage Maximum (,1
,Maximum (,1
'to',the 'to' cell,2
,'to' cell,2
few,a few seconds,1
,few seconds,1
double-step,Handle double-step non-capturing,1
,double-step non-capturing,1
<start>,{ <start> <play>,7
,<start> <play>,8
,<tracks> <start> },1
,<start> },37
,<home> <start> },3
,<numPlayers> <start> <map>,1
,<start> <map>,1
,<sizeHome> <start> },1
,<num> <start> },6
,<num> <start> <diceHand>,1
,<start> <diceHand>,1
,<num> <start> <center>,1
,<start> <center>,1
,<regions> <start> <pathRule>,1
,<start> <pathRule>,1
,<num> <start> <tracks>,2
,<start> <tracks>,2
,<num> <start> <track>,1
,<start> <track>,1
,<board> <start> },1
,<stores> <start> },1
,<size> <start> <homeTracks>,1
,<start> <homeTracks>,1
,<hand> <start> <play>,1
,<type> <start> },13
,<size> <start> <kingMove>,1
,<start> <kingMove>,1
,<size> <start> },2
,<num> <start> <removeLastPiece>,1
,<start> <removeLastPiece>,1
,<removeRule> <start> <consequence>,1
,<start> <consequence>,1
,{ <start> <move>,1
,<start> <move>,1
,{ <start> },8
,<hints> <start> },1
,{ <start> <limit>,2
,<start> <limit>,2
,<pieces> <start> <order>,1
,<start> <order>,1
<Board:trackP2>,STRING <Board:trackP2> P2,1
,<Board:trackP2> P2,1
Chariot,) Chariot (,6
,Chariot (,6
LevelTo,last LevelTo ),18
,LevelTo ),18
connections,stepwise connections (,1
,connections (,1
Turns,count Turns ),26
,Turns ),26
<thirdHoleInnerP2>,<rightMostInnerHoleP1> <thirdHoleInnerP2> <rightMostInnerHoleP2>,1
,<thirdHoleInnerP2> <rightMostInnerHoleP2>,1
<Model:rules>,rules <Model:rules> ),1
,<Model:rules> ),1
king,the king },1
,king },1
Suicidal,) Suicidal site,1
,Suicidal site,1
<piece_name_key>,STRING <piece_name_key> ),3
,<piece_name_key> ),3
at:<End:site6>,Stack at:<End:site6> ),1
,at:<End:site6> ),1
inner,P1 inner Home,46
,P2 inner Home,46
,inner Home,92
,left inner holes,2
,inner holes,2
,right inner row,2
,inner row,2
,P1 inner home,1
,P2 inner home,1
,inner home,2
both,assumes both players,1
,both players,1
produced,regions produced are,1
,produced are,1
suicidal,idintify suicidal groups,1
,determination suicidal sites,1
,suicidal groups,1
,suicidal sites,1
marker,edge marker and,1
,mover marker (,1
,each marker (,1
,marker and,1
,marker (,2
keep,( keep (,3
,keep (,3
,Pawns keep their,1
,keep their,1
effect,Capture/Release effect (,3
,effect (,3
maxState:85,) maxState:85 ),1
,maxState:85 ),1
option,( option STRING,514
,option STRING,514
,STRING option .,1
,option .,1
,play option to,1
,option to,1
,the option for,1
,option for,1
who,( who at:,1615
,who at:,1615
,( who STRING,36
,who STRING,36
,( who at:#1,12
,who at:#1,12
,( who at:3,1
,( who at:4,1
,( who at:5,1
,( who at:16,1
,( who at:17,2
,( who at:18,2
,who at:3,1
,who at:4,1
,who at:5,1
,who at:16,1
,who at:17,2
,who at:18,2
,( who at:10,3
,( who at:11,3
,( who at:12,4
,( who at:13,4
,( who at:14,3
,( who at:15,3
,( who at:8,1
,( who at:9,1
,who at:10,3
,who at:11,3
,who at:12,4
,who at:13,4
,who at:14,3
,who at:15,3
,who at:8,1
,who at:9,1
,( who ),1
,who ),1
,( who Edge,2
,( who Vertex,2
,( who Cell,1
,who Edge,2
,who Vertex,2
,who Cell,1
RememberValue,set RememberValue STRING,39
,RememberValue STRING,39
,set RememberValue (,1
,RememberValue (,1
game,( game STRING,943
,game STRING,943
,That game is,1
,the game should,1
,game is,1
,game should,1
,the game without,1
,game without,1
,The game ends,1
,the game ends,2
,the game --COMMA--,2
,game ends,3
,game --COMMA--,2
,strategy game (,1
,game (,1
,the game ),1
,game ),1
,the game may,1
,game may,1
determines,It determines where,1
,determines where,1
<Players:initP3>,) <Players:initP3> },1
,<Players:initP3> },1
at:<End:site3>,Stack at:<End:site3> ),1
,at:<End:site3> ),1
why,That's why we,1
,why we,1
<Players:arc4>,<Players:arc3> <Players:arc4> (,1
,<Players:arc4> (,1
player's,the player's next,2
,other player's pieces,1
,player's next,2
,player's pieces,1
diagonals:Alternating,INTEGER diagonals:Alternating ),58
,diagonals:Alternating ),60
,<Board:size> diagonals:Alternating ),1
,STRING diagonals:Alternating ),1
<startRules>,<endTracks> <startRules> <playingTeamPieces>,1
,<startRules> <playingTeamPieces>,1
,<num> <startRules> },1
,<startRules> },1
AllDirections,{ AllDirections },1
,AllDirections },1
along,--COMMA-- along an,1
,along an,1
Multiplier,Cost Multiplier INTEGER,1
,Taken Multiplier INTEGER,1
,Attack Multiplier INTEGER,2
,Multiplier INTEGER,4
<30>,STRING <30> <,4
,<30> <,9
,<16> <30> <,5
,STRING <30> STRING,7
,<30> STRING,7
visually,promotion visually takes,1
,visually takes,1
<endScore>,<numPlayers> <endScore> },1
,<endScore> },1
mentioned,As mentioned above,1
,mentioned above,1
<opening>,{ <opening> },2
,<opening> },2
win,for win (,1
,win (,1
,player win by,1
,win by,1
Release,) Release a,3
,Release a,3
adds,bug adds INTEGER,1
,adds INTEGER,1
Brusky,. Brusky blocking,1
,Brusky Chess,1
,Brusky blocking,1
move,( move Hop,202
,( move (,785
,( move Pass,193
,move Hop,202
,move (,788
,move Pass,193
,( move Step,484
,move Step,484
,( move Slide,381
,move Slide,381
,( move Add,194
,move Add,194
,( move Remove,183
,move Remove,183
,( move Select,386
,move Select,386
,( move Swap,9
,move Swap,9
,( move Leap,112
,move Leap,112
,to move it,1
,move it,1
,( move standard,1
,standard move without,1
,( move Vote,18
,( move Propose,14
,move standard,1
,move without,1
,move Vote,18
,move Propose,14
,next move .,1
,move .,7
,hop move in,2
,move in,3
,Forfeit move (,1
,simultaneous move .,2
,Simultaneous move .,1
,( move Shoot,3
,move Shoot,3
,this move was,1
,move was,1
,( move Set,8
,move Set,8
,just move normally,4
,a move },2
,move normally,4
,move },2
,( move STRING,2
,move STRING,2
,( move <Board:kingMove>,1
,move <Board:kingMove>,1
,( move Promote,122
,move Promote,122
,promoted move here,1
,move here,1
,( move To,2
,To move a,2
,move To,2
,move a,2
,( move Bet,4
,move Bet,4
,cannot move in,1
,never move e,1
,move e,1
,first move oer,1
,move oer,1
,initial move at,1
,move at,1
,to move into,1
,must move out,1
,cannot move out,1
,piece move of,1
,to move #4,1
,move into,1
,move out,2
,move of,1
,move #4,1
,Rooks move as,1
,can move one,1
,Knights move one,1
,any move that,1
,Pawn move .,1
,current move --COMMA--,1
,1's move exposes,1
,to move .,1
,move as,1
,move one,2
,move that,1
,move --COMMA--,3
,move exposes,1
,( move three,2
,( move jump,11
,and move to,6
,move three,2
,move jump,11
,move to,6
,Mountain move --COMMA--,1
,water move --COMMA--,1
,( move Claim,4
,move Claim,4
,and move markers,1
,the move is,1
,up move processing,1
,after move (,1
,Main move (,1
,move markers,1
,move is,1
,move processing,1
,a move .,1
,individual move choices,1
,to move -,1
,for move restrictions,1
,move choices,1
,move -,1
,move restrictions,1
num:<Board:numDice>,dice num:<Board:numDice> ),1
,num:<Board:numDice> ),1
amount,( amount Next,3
,amount Next,3
,( amount #1,1
,( amount P1,1
,( amount P2,1
,( amount P3,1
,amount #1,1
,amount P1,1
,amount P2,1
,amount P3,1
original,The original value,1
,original value,1
by:#4,Occupied by:#4 STRING,1
,by:#4 STRING,1
<Movement:type>,or <Movement:type> (,1
,<Movement:type> (,1
by:#5,Occupied by:#5 STRING,1
,by:#5 STRING,1
<seleucid>,{ <seleucid> },2
,<seleucid> },2
at:<End:site4>,Stack at:<End:site4> ),1
,at:<End:site4> ),1
also,is also slowing,1
,also slowing,1
,numbers also will,1
,also will,1
From,sites From (,7
,last From ),452
,From (,7
,From ),452
,STRING From Section,1
,) From Section,11
,From Section,12
,last From afterConsequence:True,1
,From afterConsequence:True,1
terminal,a terminal state,1
,terminal state,1
enough,large enough region,1
,enough region,1
by:#1,Occupied by:#1 ),24
,by:#1 ),24
,Occupied by:#1 STRING,39
,by:#1 STRING,39
,Occupied by:#1 top:False,8
,by:#1 top:False,8
,Occupied by:#1 components:,1
,by:#1 components:,1
<Players:arc3>,) <Players:arc3> <Players:arc4>,1
,<Players:arc3> <Players:arc4>,1
by:#2,Occupied by:#2 ),6
,by:#2 ),6
hopped,--COMMA-- hopped enemy,1
,hopped enemy,1
,type hopped --COMMA--,1
,hopped --COMMA--,1
<boardSize>,{ <boardSize> <pieceNumber>,1
,<boardSize> <pieceNumber>,1
,{ <boardSize> <pieces>,1
,<boardSize> <pieces>,1
Selects,STRING Selects the,1
,Selects the,1
<31>,STRING <31> STRING,1
,<31> STRING,2
,1> <31> STRING,1
latter,The latter is,1
,latter is,1
Pending,set Pending (,35
,sites Pending ),11
,is Pending ),66
,Pending (,35
,Pending ),149
,set Pending ),43
,value Pending ),29
,set Pending STRING,2
,Pending STRING,2
,set Pending INTEGER,2
,Pending INTEGER,2
,in Pending -,6
,Pending -,6
Claim,move Claim (,4
,Claim (,4
<Start:rules>,rules <Start:rules> (,3
,<Start:rules> (,3
,rules <Start:rules> phases:,3
,<Start:rules> phases:,3
,{ <Start:rules> },1
,<Start:rules> },1
equivalent,logically equivalent and,1
,equivalent and,1
<Doctrine3>,STRING <Doctrine3> args:,1
,<Doctrine3> args:,1
wedge,( wedge INTEGER,108
,wedge INTEGER,108
promoted,the promoted move,1
,promoted move,1
,is promoted to,1
,is promoted .,1
,be promoted upon,1
,be promoted to,1
,promoted to,2
,promoted .,1
,promoted upon,1
moveAgain,( moveAgain ),857
,moveAgain ),857
<exit>,<walls> <exit> },1
,<exit> },1
,<startMinotaur> <exit> <walls>,1
,<exit> <walls>,1
<Board:shape>,( <Board:shape> ),1
,<Board:shape> ),1
<Players:startRules>,rules <Players:startRules> (,1
,<Players:startRules> (,1
<Pawn1>,{ <Pawn1> <Pawn2>,1
,<Pawn1> <Pawn2>,1
<track3>,<arc4> <track3> <track4>,1
,<track3> <track4>,1
<32>,STRING <32> STRING,1
,<32> STRING,1
<Doctrine2>,STRING <Doctrine2> args:,1
,<Doctrine2> args:,1
sure,make sure that,1
,sure that,1
<Board:exit>,{ <Board:exit> },2
,<Board:exit> },2
<bean>,{ <bean> },1
,<bean> },1
<Board:HomeTrack2>,STRING <Board:HomeTrack2> P2,1
,<Board:HomeTrack2> P2,1
Hop,move Hop #1,42
,Hop #1,42
,move Hop (,96
,Hop (,98
,move Hop STRING,1
,Hop STRING,1
,move Hop hop,1
,Hop hop,1
,move Hop Orthogonal,22
,Hop Orthogonal,22
,) Hop any,3
,Hop any,3
,move Hop Diagonal,33
,Hop Diagonal,33
,move Hop All,3
,Hop All,3
,move Hop Forward,3
,Hop Forward,4
,move Hop Forwards,1
,Hop Forwards,1
,. Hop Adjacent,8
,. Hop (,2
,. Hop Forward,1
,Hop Adjacent,8
<back_dir>,<fwd_dir> <back_dir> ),5
,<back_dir> ),5
,Note: <back_dir> is,1
,<back_dir> is,1
Regions,) Regions (,1
,Regions (,1
an,jump an enemy,1
,an enemy,5
,--COMMA-- an enemy,1
,over an enemy,1
,to an empty,1
,an empty,1
,capture an elephant,1
,an elephant,1
,remove an adjacent,1
,an adjacent,2
,If an Enemy,1
,But an Enemy,1
,an Enemy,2
,seems an obvious,1
,an obvious,1
,along an edge,1
,to an adjacent,1
,For an overview,1
,an edge,2
,an overview,1
,by an entrenchment,1
,builds an entrenchment,1
,behind an entrenchment,1
,an entrenchment,3
,at an opponent's,1
,an opponent's,1
,on an edge,1
,to an enemy,2
,difference an array,1
,an array,1
as,--COMMA-- as noted,8
,as noted,8
,stated as follows:,1
,as follows:,1
,--COMMA-- as the,3
,move as in,1
,colour as the,1
,as the,4
,as in,1
,calculated as (,1
,as (,1
,listing as a,1
,--COMMA-- as it,1
,shows as a,1
,not as good,1
,as a,2
,as it,1
,as good,1
at,seeds at the,2
,at the,6
,Move at any,2
,at any,2
,move at distance,1
,at distance,1
,board at the,1
,unit at site,1
,checked at the,1
,entrenchment at the,1
,at site,1
,limit at least,1
,at least,3
,But at least,1
,Liberties at an,1
,at an,1
,Influence at the,1
,turn at least,1
<Board:ExtraRows>,) <Board:ExtraRows> (,1
,<Board:ExtraRows> (,1
indecise,the indecise and,1
,indecise and,1
<Num:dogs>,) <Num:dogs> ),1
,<Num:dogs> ),1
<Pawn2>,<Pawn1> <Pawn2> },1
,<Pawn2> },1
<order>,<random> <order> },1
,<order> },1
,<start> <order> <limit>,1
,<order> <limit>,1
<track2>,<size> <track2> },15
,<track2> },16
,<size> <track2> <specialHoles>,1
,<track2> <specialHoles>,1
,<track1> <track2> },1
,<size> <track2> <innerInitP1>,1
,<track2> <innerInitP1>,1
<33>,<23> <33> <24>,1
,<33> <24>,1
,STRING <33> STRING,1
,<33> STRING,1
optimizations,complicated optimizations (,1
,optimizations (,1
deal,( deal Dominoes,1
,deal Dominoes,1
be,should be impossible,1
,be impossible,1
,should be the,1
,be the,1
,can be stated,1
,be stated,1
,would be available,1
,can be promoted,1
,only be promoted,1
,be available,1
,be promoted,2
,to be calculated,1
,cannot be added,1
,to be counted,1
,be calculated,1
,be added,1
,be counted,1
,not be executed,2
,may be played,1
,be executed,2
,be played,1
facing,are facing away,1
,facing away,1
<End:event>,) <End:event> },1
,<End:event> },1
<Players:player2>,result <Players:player2> Win,1
,<Players:player2> Win,1
trackSite,( trackSite Move,326
,trackSite Move,326
,( trackSite EndSite,4
,trackSite EndSite,4
,( trackSite FirstSite,25
,trackSite FirstSite,25
<Board:CCW2>,STRING <Board:CCW2> loop:True,7
,<Board:CCW2> loop:True,7
see,--COMMA-- see <a,1
,--COMMA-- see The,1
,see <a,1
,see The,1
,STRING see Chosen:nonMoverCaptures,1
,see Chosen:nonMoverCaptures,1
num:<Num:dice>,from:0 num:<Num:dice> ),1
,num:<Num:dice> ),1
by,Gallicus by Phil,1
,by Phil,1
,enclosed by your,1
,by your,1
,invented by Siegmund,1
,castle by swapping,1
,capturing by moving,1
,threat by Player,1
,--COMMA-- by D,1
,edited by John,1
,--COMMA-- by Eric,1
,by Siegmund,1
,by swapping,1
,by moving,1
,by Player,1
,by D,1
,by John,1
,by Eric,1
,attacked by #1,1
,protected by an,1
,by #1,1
,by an,1
,affected by terrain,1
,by terrain,1
,determinations by site,1
,by site,1
,start by defining,1
,followed by a,1
,by defining,1
,by a,1
,win by diagonals,1
,by diagonals,1
min:<Group>,) min:<Group> ),4
,min:<Group> ),4
<Jump>,STRING <Jump> args:,3
,<Jump> args:,3
subsequent,without subsequent movement,1
,subsequent movement,1
indicate,We indicate we,1
,indicate we,1
<34>,STRING <34> STRING,1
,<34> STRING,2
,<16> <34> STRING,1
,> <34> <65,1
,<34> <65,1
Players,swap Players P1,6
,Players P1,8
,count Players ),19
,Players ),19
,Swap Players P1,2
,swap Players Mover,2
,Players Mover,2
,swap Players INTEGER,1
,Players INTEGER,1
Die,forEach Die if:,57
,Die if:,57
,forEach Die replayDouble:True,25
,Die replayDouble:True,25
,forEach Die combined:True,6
,Die combined:True,6
,forEach Die replayDouble:,4
,Die replayDouble:,4
,forEach Die (,6
,Die (,6
<Doctrine4>,STRING <Doctrine4> args:,1
,<Doctrine4> args:,1
scoring,Opponent scoring on,1
,scoring on,1
<Challenge:hints>,{ <Challenge:hints> },4
,<Challenge:hints> },4
,) <Challenge:hints> (,1
,<Challenge:hints> (,1
set,( set State,232
,set State,232
,( set Pending,82
,( set Value,174
,set Pending,82
,set Value,174
,( set Team,179
,set Team,179
,( set Score,74
,set Score,74
,( set Var,342
,set Var,342
,( set NextPlayer,42
,set NextPlayer,42
,( set Count,271
,set Count,271
,( set Hidden,111
,set Hidden,111
,( set RememberValue,40
,set RememberValue,40
,( set Counter,58
,set Counter,58
,( set Pot,6
,set Pot,6
,are set aside,1
,set aside,1
,( set Rotation,2
,set Rotation,2
,( set Neutral,10
,( set Cost,338
,set Neutral,10
,set Cost,338
,( set Shared,14
,( set P1,9
,( set P2,7
,set Shared,14
,set P1,9
,set P2,7
,a set difference,1
,set difference,1
,( set {,11
,set {,11
contain,or contain a,1
,contain a,1
,that contain enemy,1
,contain enemy,1
<36>,STRING <36> STRING,1
,<36> STRING,1
,<6> <36> <111>,1
,<36> <111>,1
<Players:sumFingers>,STRING <Players:sumFingers> ),1
,<Players:sumFingers> ),1
except:3,) except:3 ),1
,except:3 ),1
except:1,) except:1 ),2
,except:1 ),2
Definitions,) Definitions of,1
,Definitions of,1
column,( column of:,85
,column of:,85
,#2 column Row,1
,Column column ),1
,column Row,1
,column ),1
entered,not entered to,1
,entered to,1
<Track>,{ <Track> },2
,STRING <Track> args:,3
,<Track> },2
,<Track> args:,3
<play>,<start> <play> },8
,<play> },10
,{ <play> },2
<Player:track58>,) <Player:track58> <Player:track916>,1
,<Player:track58> <Player:track916>,1
from:93,Direction from:93 S,1
,from:93 S,1
from:94,Direction from:94 S,1
,from:94 S,1
except:0,Different except:0 ),1
,except:0 ),1
river,to river (,1
,river (,1
<35>,STRING <35> <,2
,<35> <,2
,STRING <35> STRING,3
,<35> STRING,3
<track4>,<track3> <track4> },1
,<track4> },1
essential,but essential for,1
,essential for,1
ADD,TO ADD may,1
,ADD may,1
<Version:numPlayers>,players <Version:numPlayers> ),11
,<Version:numPlayers> ),11
Boards,different Boards the,1
,Boards the,1
<Player:regions>,) <Player:regions> },1
,<Player:regions> },1
count:<Tiger:num>,) count:<Tiger:num> ),1
,count:<Tiger:num> ),1
PieceHasMoved,- PieceHasMoved (,3
,PieceHasMoved (,3
sites,( sites Top,598
,( sites {,1374
,sites Top,598
,sites {,1374
,( sites From,7
,( sites Right,138
,( sites Left,138
,( sites Bottom,627
,( sites (,89
,( sites Occupied,684
,sites From,7
,sites Right,138
,sites Left,138
,sites Bottom,627
,sites (,89
,sites Occupied,684
,( sites Empty,561
,sites Empty,561
,( sites Corners,47
,sites Corners,47
,( sites Centre,77
,sites Centre,77
,( sites Row,302
,sites Row,302
,( sites Phase,126
,sites Phase,126
,( sites Outer,46
,sites Outer,46
,( sites P1,153
,sites P1,153
,( sites Board,389
,sites Board,389
,( sites Direction,63
,sites Direction,63
,( sites To,14
,( sites Pending,11
,( sites ToClear,29
,sites To,14
,sites Pending,11
,sites ToClear,29
,( sites STRING,1062
,sites STRING,1062
,( sites Column,34
,sites Column,34
,Connected sites .,1
,sites .,1
,( sites Mover,688
,sites Mover,688
,( sites Hand,38
,sites Hand,38
,( sites #1,146
,sites #1,146
,( sites P2,147
,sites P2,147
,( sites <End:sites>,1
,sites <End:sites>,1
,( sites Track,377
,sites Track,377
,( sites Next,141
,sites Next,141
,( sites P3,10
,( sites P4,9
,sites P3,10
,sites P4,9
,( sites #2,2
,sites #2,2
,( sites P5,2
,( sites P6,1
,sites P5,2
,sites P6,1
,( sites Around,227
,( sites Random,104
,( sites #3,8
,sites Around,227
,sites Random,104
,sites #3,8
,( sites Side,146
,sites Side,146
,( sites LineOfSight,23
,sites LineOfSight,23
,( sites Incident,65
,sites Incident,65
,( sites Player,20
,sites Player,20
,( sites <Rightmost:sitesP1>,1
,( sites <Rightmost:sitesP2>,1
,sites <Rightmost:sitesP1>,1
,sites <Rightmost:sitesP2>,1
,( sites Playable,3
,sites Playable,3
,( sites Group,15
,sites Group,15
,( sites Inner,1
,sites Inner,1
,( sites ),8
,sites ),8
,( sites Distance,16
,sites Distance,16
,( sites LastTo,4
,sites LastTo,4
,( sites Winning,8
,sites Winning,8
,( sites Cell,7
,sites Cell,7
,place sites enclosed,1
,sites enclosed,1
,( sites State,10
,sites State,10
,( sites Hidden,14
,sites Hidden,14
,( sites Between,8
,sites Between,8
,( sites Start,43
,sites Start,43
,( sites LargePiece,1
,sites LargePiece,1
,Entrenchment sites that,1
,sites that,1
,( sites LineOfPlay,1
,sites LineOfPlay,1
,( sites Crossing,5
,sites Crossing,5
,who's sites --COMMA--,1
,sites --COMMA--,1
,suicidal sites cannot,1
,of sites to,1
,sites cannot,1
,sites to,1
,( sites <Variant:noPieceSite>,1
,sites <Variant:noPieceSite>,1
do,( do (,586
,do (,586
,) do the,1
,do the,1
,to do this,1
,do this,1
nearest,two nearest cells,1
,nearest cells,1
,six nearest spaces,1
,nearest spaces,1
Pritchard,. Pritchard (,1
,Pritchard (,1
<GType>,STRING <GType> args:,2
,<GType> args:,2
<Size:boardWidth>,+ <Size:boardWidth> <OuterRing:extraBoardSize>,1
,<Size:boardWidth> <OuterRing:extraBoardSize>,1
swapping,No swapping for,4
,No swapping after,4
,No swapping if,2
,swapping for,4
,swapping after,4
,swapping if,2
,by swapping locations,1
,swapping locations,1
Version,Version of,1
<Variant:dice>,) <Variant:dice> (,1
,<Variant:dice> (,1
attacks,against attacks against,1
,against attacks from,1
,attacks against,1
,attacks from,1
,Counter attacks (,1
,Specific attacks (,1
,attacks (,2
Enemy,is Enemy (,976
,Enemy (,977
,Pieces Enemy in:,1
,Enemy in:,1
,) Enemy ),4
,Enemy ),17
,STRING Enemy (,1
,) Enemy Orthogonal,5
,Enemy Orthogonal,5
,an Enemy piece,2
,Enemy piece,2
,Pieces Enemy ),9
,STRING Enemy ),4
Knight,to Knight .,2
,Knight .,2
,a Knight always,1
,a Knight on,1
,or Knight ),1
,Knight always,1
,Knight on,1
,Knight ),1
,) Knight (,6
,Promoted Knight (,5
,Knight (,11
Simultaneous,No Simultaneous move,1
,Simultaneous move,1
,mode Simultaneous ),2
,Simultaneous ),2
<CapOption:friendHops>,STRING <CapOption:friendHops> STRING,1
,<CapOption:friendHops> STRING,1
maxState:10,Neutral maxState:10 ),1
,maxState:10 ),1
needs,Maybe needs a,2
,needs a,2
which,pieces which have,3
,which have,3
,record which Cells,1
,which Cells,1
,( which helped,1
,which helped,1
<Player:num>,players <Player:num> ),27
,<Player:num> ),28
,{ <Player:num> <Player:num>,1
,<Player:num> <Player:num> <Player:num>,8
,<Player:num> <Player:num> },1
,<Player:num> <Player:num>,9
,<Player:num> },1
,STRING <Player:num> ),1
<square>,STRING <square> STRING,5
,<square> STRING,5
,STRING <square> <,1
,<square> <,1
eg,Options: eg .,1
,eg .,1
,- eg next,1
,eg next,1
,) eg the,1
,eg the,1
from:34,Direction from:34 W,1
,from:34 W,1
count:<Num>,) count:<Num> ),1
,count:<Num> ),1
unpredictable,are unpredictable don't,1
,unpredictable don't,1
en,with en passant,2
,INTEGER en passant,2
,en passant,6
,trigger en passant,1
,no en passant,1
checkmating,the checkmating player,1
,checkmating player,1
P1/P2,- P1/P2 (,1
,P1/P2 (,1
never,Can never move,1
,never move,1
,can never advance,1
,never advance,1
,are never affected,1
,never affected,1
Silver,) Silver General,8
,Promoted Silver (,7
,Silver General,8
,Silver (,7
<Hexagonal>,STRING <Hexagonal> STRING,2
,<Hexagonal> STRING,2
<Challenge:size>,square <Challenge:size> ),5
,<Challenge:size> ),8
,INTEGER <Challenge:size> ),1
,rectangle <Challenge:size> ),2
piece,( piece STRING,2651
,piece STRING,2651
,capturing piece goes,3
,piece goes,3
,( piece (,193
,piece (,212
,a piece (,7
,captured piece (,1
,new piece (,1
,twin piece (,1
,our piece is,1
,a piece can,2
,piece is,2
,piece can,2
,of piece #2,1
,( piece #1,4
,end piece ),1
,of piece (,1
,( piece Rename,2
,piece #2,3
,piece #1,4
,piece ),2
,piece Rename,2
,the piece pushed,1
,the piece pushing,1
,enemy piece .,1
,piece pushed,1
,piece pushing,1
,piece .,3
,enemy piece is,1
,each piece (,1
,tower piece in,1
,wall/singleton piece .,1
,enemy piece in,2
,tower piece or,1
,piece in,11
,piece or,1
,each piece to,1
,piece to,2
,other piece except,1
,piece except,1
,a piece in,7
,any piece (,3
,enemy piece (,4
,( piece {,36
,piece {,36
,Enemy piece blocks,1
,Enemy piece two,1
,piece blocks,1
,piece two,1
,one piece move,1
,piece move,1
,a piece from,1
,a piece of,1
,a piece becomes,1
,piece from,1
,piece of,1
,piece becomes,1
,( piece #3,1
,piece #3,1
,attacking piece #2,2
,the piece being,2
,( piece ExtendName,20
,piece being,2
,piece ExtendName,20
,( piece Foreground,4
,( piece Colour,4
,( piece Rotate,2
,piece Foreground,4
,piece Colour,4
,piece Rotate,2
,--COMMA-- piece type,1
,--COMMA-- piece typ,1
,piece type,1
,piece typ,1
,a piece on,1
,where piece lies,1
,piece on,1
,piece lies,1
,p2 piece in,1
,friendly piece ),1
,enemy piece },1
,piece },1
,Remaining piece placement,1
,Opponent piece captures,1
,the piece to,1
,a piece .,1
,piece placement,1
,piece captures,1
<Board:west>,<Board:east> <Board:west> },2
,<Board:west> },2
Square>,<hex Square> STRING,1
,<tri Square> STRING,1
,Square> STRING,2
allCombinations,( allCombinations (,3
,allCombinations (,3
bySite:True,} bySite:True ),2
,bySite:True ),2
Corners,sites Corners ),47
,Corners ),48
,INTEGER Corners ),1
<Players:start>,{ <Players:start> },2
,<Players:start> },3
,rules <Players:start> phases:,2
,<Players:start> phases:,2
,rules <Players:start> (,4
,<Players:start> (,4
,) <Players:start> },1
elephant,an elephant if,1
,elephant if,1
ENE,WNW ENE },6
,ENE },7
,S ENE WSW,1
,WSW ENE ),1
,N ENE },1
,ENE WSW,2
,ENE ),2
,STRING ENE INTEGER,4
,ENE INTEGER,4
,WNW ENE WSW,1
,#2 ENE ),1
<BoardConfig:Knight2Start>,STRING <BoardConfig:Knight2Start> ),1
,<BoardConfig:Knight2Start> ),1
<Board:centreMove>,) <Board:centreMove> },1
,<Board:centreMove> },1
however,; however that's,1
,however that's,1
DiceUsed,all DiceUsed ),92
,DiceUsed ),92
Squares,) Squares 28-29,1
,rule Squares INTEGER,1
,) Squares INTEGER,1
,Squares 28-29,1
,Squares INTEGER,2
<Doctrine1>,STRING <Doctrine1> args:,1
,<Doctrine1> args:,1
<setupRules>,<numPlayers> <setupRules> },1
,<setupRules> },1
for,condition for the,2
,for the,9
,specified for capturing,3
,for capturing,3
,value for triple,1
,for triple,1
,specifically for Kendall------------------------------------------,1
,for Kendall------------------------------------------,1
,far for that,1
,for that,1
,Defines for Options,7
,for Options,7
,swapping for first,4
,for first,4
,play for the,3
,update for the,1
,( for castling,3
,for castling,3
,conditions for the,1
,aside for later,1
,eligible for promotion,2
,available for its,1
,for later,1
,for promotion,2
,for its,1
,Defines for Calculation,1
,for Calculation,1
,) for Booleans:,1
,) for Integers,1
,INTEGER for strategy,1
,default for INTEGER,1
,for Booleans:,1
,for Integers,2
,for strategy,1
,for INTEGER,1
,essential for the,1
,work for broken,1
,checking for win,1
,for broken,1
,for win,1
,Defines for Integers,1
,NonMover for this,1
,Defines for Booleans,1
,for this,1
,for Booleans,1
,is for efficiency,1
,listiong for consistancy,1
,testing for move,1
,control for the,1
,option for a,1
,Options for Board,1
,for efficiency,1
,for consistancy,1
,for move,1
,for a,1
,for Board,1
JUST,IS JUST FOR,1
,JUST FOR,1
num:14,) num:14 ),2
,num:14 ),2
<Start:misoroPhase>,{ <Start:misoroPhase> (,2
,<Start:misoroPhase> (,2
envoked,) envoked (,1
,envoked (,1
captured,a captured piece,1
,captured piece,1
,has captured we,1
,captured we,1
,are captured --COMMA--,1
,the captured pieces,1
,unless captured ),1
,is captured .,1
,been captured .,1
,any captured pieces,1
,is captured --COMMA--,1
,captured --COMMA--,2
,captured pieces,2
,captured ),1
,captured .,2
<event>,{ <event> },1
,<event> },1
ge,( ge (,1
,ge (,1
,( ge with,1
,ge with,1
over,directions over an,1
,over an,1
from:55,Direction from:55 N,1
,from:55 N,1
from:56,Direction from:56 N,1
,from:56 N,1
six,the six adjacent,1
,the six nearest,1
,six adjacent,1
,six nearest,1
captures,Special captures from,1
,captures from,1
,more captures done,1
,captures done,1
,piece captures --COMMA--,1
,captures --COMMA--,1
top:True,Piece top:True ),43
,top:True ),76
,) top:True ),26
,Piece top:True (,6
,top:True (,12
,) top:True (,6
,Neutral top:True ),1
,Mover top:True ),1
,Next top:True ),2
,by:Mover top:True ),1
,by:P1 top:True ),1
,by:P2 top:True ),1
go,to go back,3
,go back,3
<singleHoles>,<specialHoles> <singleHoles> },1
,<singleHoles> },1
<north>,<type> <north> <south>,1
,<north> <south>,1
Diamond,hex Diamond <Board>,3
,Diamond <Board>,3
,hex Diamond INTEGER,4
,Diamond INTEGER,4
,square Diamond <Size>,1
,Diamond <Size>,1
num:20,) num:20 ),2
,num:20 ),2
counter,a counter (,1
,counter (,1
,( counter ),35
,counter ),35
,a counter Attack,2
,counter Attack,2
LastTo,is LastTo Cell,1
,LastTo Cell,1
,sites LastTo ),4
,LastTo ),4
gt,( gt (,8
,gt (,8
,( gt INTEGER,2
,gt INTEGER,2
Middle,) Middle Row,1
,Middle Row,1
,) Middle square,1
,Middle square,1
<challenge:start>,{ <challenge:start> },2
,<challenge:start> },2
<Elephant>,Each <Elephant> ),1
,STRING <Elephant> args:,1
,<Elephant> ),1
,<Elephant> args:,1
<Board:ExtraCols>,) <Board:ExtraCols> },1
,<Board:ExtraCols> },1
from:50,Direction from:50 W,1
,from:50 W,1
setup,passant setup Source:,1
,setup Source:,1
,passant setup Note:,1
,setup Note:,1
counted,be counted explicity,1
,counted explicity,1
<square,STRING <square 8>,2
,<square 8>,2
,STRING <square Diamond>,3
,<square Diamond>,3
avoid,to avoid steps,2
,avoid steps,2
humans,against humans ),1
,against humans in,2
,against humans on,1
,humans ),1
,humans in,2
,humans on,1
<pieceNumber>,<boardSize> <pieceNumber> },1
,<pieceNumber> },1
promotion,the promotion line,1
,second promotion to,1
,promotion line,1
,promotion to,1
,Pawn promotion Usage:,6
,promotion Usage:,6
,Pawn promotion .,1
,for promotion .,1
,for promotion --COMMA--,1
,delayed promotion --COMMA--,1
,delayed promotion takes,1
,the promotion visually,1
,promotion .,2
,promotion --COMMA--,2
,promotion takes,1
,promotion visually,1
,no promotion here,1
,promotion here,1
<leopard>,{ <leopard> },1
,<leopard> },1
very,still very heavy,1
,very heavy,1
<begin>,{ <begin> <end>,1
,<begin> <end>,1
placed,one placed .,1
,placed .,1
select,( select (,6
,select (,6
count:144,) count:144 ),2
,count:144 ),4
,STRING count:144 ),2
<LeftInnerHolesP1>,<CW2> <LeftInnerHolesP1> <LeftInnerHolesP2>,1
,<LeftInnerHolesP1> <LeftInnerHolesP2>,1
<Swap>,STRING <Swap> args:,1
,<Swap> args:,1
<Rules>,STRING <Rules> args:,4
,<Rules> args:,4
,STRING <Rules> (,1
,<Rules> (,1
<Dice:throwValues>,) <Dice:throwValues> (,1
,<Dice:throwValues> (,1
advanced,) advanced multiplayer,1
,advanced multiplayer,1
delayed,its delayed promotion,1
,the delayed promotion,1
,delayed promotion,2
False,) False to:P1,26
,) False to:P2,25
,False to:P1,26
,False to:P2,25
,) False to:Next,12
,) False to:Mover,10
,False to:Next,12
,False to:Mover,10
,) False ),8
,False ),10
,True False ),2
,) False to:All,1
,False to:All,1
,) False to:#1,1
,False to:#1,1
thanks,Move thanks to,4
,thanks to,4
<Board:regions>,) <Board:regions> },2
,<Board:regions> },2
,home <Board:regions> (,1
,<Board:regions> (,1
Board,sites Board ),353
,Board ),353
,sites Board Vertex,9
,Board Vertex,9
,sites Board Edge,27
,Board Edge,27
,Perforated Board Make,1
,for Board and,1
,Board Make,1
,Board and,1
four,P1 four left,1
,P2 four left,1
,four left,2
,the four levels,1
,four levels,1
symmetrical,rotational symmetrical play,1
,symmetrical play,1
<NumOfPlayers:BoardRegions>,) <NumOfPlayers:BoardRegions> },2
,<NumOfPlayers:BoardRegions> },2
Calculation,for Calculation (,1
,Calculation (,1
<12><14><4>,STRING <12><14><4> STRING,1
,<12><14><4> STRING,1
id,( id STRING,1988
,id STRING,1988
,( id Mover,13
,id Mover,13
,( id P1,13
,id P1,13
,( id #1,15
,id #1,15
,( id P2,8
,id P2,8
,( id #3,1
,id #3,1
,( id #2,1
,id #2,1
,( id #4,1
,id #4,1
ie,Move: ie movement,1
,ie movement,1
if,( if (,5797
,if (,5797
,( if STRING,348
,if STRING,348
,point if opponent,3
,if opponent,3
,Not if the,1
,) if on,1
,Only if the,1
,if the,3
,if on,1
,( if #1,2
,if #1,2
,elephant if it,1
,if it,1
,cells if the,1
,( if <Variant:goal>,1
,if <Variant:goal>,1
,( if <End:cond>,1
,if <End:cond>,1
,only if a,1
,if a,1
,swapping if we,2
,if we,2
,omnicheck if all,1
,if all,1
,that if Player,1
,if Player,1
,check if no,1
,if no,1
,Checks if site,1
,pieces if behind,1
,if site,1
,if behind,1
,( if #3,1
,if #3,1
,( if want,1
,that if p1,1
,if want,1
,if p1,1
,( if <Variant:end>,1
,if <Variant:end>,1
1's,Player 1's move,1
,1's move,1
<NeighborsOf:nbrMax>,le <NeighborsOf:nbrMax> (,1
,<NeighborsOf:nbrMax> (,1
<cornerSetup>,<shape> <cornerSetup> },2
,<cornerSetup> },2
<trackP3P4>,<startP3P4> <trackP3P4> <end>,1
,<trackP3P4> <end>,1
large,a large enough,1
,large enough,1
in,Not in the,2
,in the,23
,it in INTEGER,2
,in INTEGER,2
,not in the,2
,around in the,1
,pieces in the,2
,moving in pair,1
,in pair,1
,move in the,1
,move in all,1
,in all,1
,) in any,1
,piece in order,1
,piece in the,3
,two in order,1
,in any,3
,in order,2
,play in the,2
,again in pending,1
,in pending,1
,like in Oware,1
,in Oware,1
,player in first,4
,in first,4
,work in the,1
,cell in the,1
,built in following,1
,describing in the,1
,in following,1
,method in LL,4
,piece in capturing,3
,piece in going,3
,in LL,4
,in capturing,3
,in going,3
,al-Bayadiq in the,4
,reset in (,13
,movement in one,1
,move in either,1
,movement in the,1
,advancement in two,2
,spaces in Pending,6
,Pawn in Var,6
,in (,13
,in one,1
,in either,1
,in two,2
,in Pending,6
,in Var,6
,is in omnicheck,3
,are in check,1
,in omnicheck,3
,in check,1
,as in Glinski,1
,slide in any,1
,Bishops in Wellisch,1
,space in any,1
,remains in that,1
,ends in checkmate,1
,ends in stalemate,1
,result in a,1
,in Glinski,1
,in Wellisch,1
,in that,1
,in checkmate,1
,in stalemate,1
,in a,1
,specified in #1,1
,in #1,1
,humans in forests,1
,humans in water,1
,units in forests,1
,units in water,1
,in forests,2
,in water,2
,test in NotBlockedBy,1
,testing in stepwise,1
,in NotBlockedBy,1
,in stepwise,1
,piece in play,1
,in play,1
,consumed in placement,1
,efficiency in handling,1
,shows in the,1
,selection in the,1
,in placement,1
,in handling,1
count:152,STRING count:152 ),2
,count:152 ),2
lower,a lower value,2
,lower value,2
,index lower than,2
,INTEGER lower than,1
,lower than,3
index,Player index lower,2
,Mover index (,2
,selected index ),2
,with index INTEGER,1
,index lower,2
,index (,4
,index ),2
,index INTEGER,1
,- index (,2
is,( is Mover,577
,( is In,1188
,is Mover,577
,is In,1188
,( is Enemy,976
,( is Empty,987
,is Enemy,976
,is Empty,987
,( is Pending,66
,is Pending,66
,( is Even,38
,is Even,38
,( is Friend,535
,is Friend,535
,( is Line,188
,is Line,188
,nothing is specified,3
,is specified,3
,( is AnyDie,7
,is AnyDie,7
,( is Triggered,31
,is Triggered,31
,( is Occupied,301
,is Occupied,301
,( is Visited,14
,piece is on,1
,is Visited,14
,is on,1
,( is Odd,24
,( is Decided,8
,( is Proposed,16
,is Odd,24
,is Decided,8
,is Proposed,16
,( is Prev,13
,( is Active,46
,is Prev,13
,is Active,46
,location is orthogonally,1
,enemy is there,1
,value is higher,1
,( is Next,38
,is orthogonally,1
,is there,1
,is higher,1
,is Next,38
,piece is removed,1
,is removed,1
,it is not,1
,is not,2
,what is between,2
,is between,2
,( is Flat,13
,( is Pattern,3
,is Flat,13
,is Pattern,3
,( is LastTo,1
,is LastTo,1
,( is Hidden,2
,is Hidden,2
,INTEGER is the,1
,is the,1
,( is Cycle,7
,is Cycle,7
,( is Related,5
,is Related,5
,( is #1,2
,is #1,2
,( is Connected,32
,is Connected,32
,( is Within,14
,( is Full,8
,( is Loop,5
,is Within,14
,is Full,8
,is Loop,5
,( is Blocked,1
,is Blocked,1
,( is SidesMatch,1
,is SidesMatch,1
,supergame is undecided,2
,is undecided,2
,game is built,1
,is built,1
,Counter is reset,13
,is reset,13
,<back_dir> is used,1
,is used,2
,player is in,3
,It is illegal,1
,( is Threatened,7
,is in,3
,is illegal,1
,is Threatened,7
,Chess is played,1
,it is eligible,1
,Pawn is eligible,1
,Pawn is promoted,2
,it is (,1
,colour is captured,1
,There is no,1
,Pawn is displayed,1
,King is captured,1
,there is a,1
,is played,1
,is eligible,2
,is promoted,2
,is (,1
,is captured,2
,is no,1
,is displayed,2
,is a,4
,#1 is protected,1
,is protected,1
,that is being,1
,this is a,2
,is being,1
,( is PipsMatch,1
,is PipsMatch,1
,( is RegularGraph,7
,is RegularGraph,7
,( is TreeCentre,2
,is TreeCentre,2
,( is Tree,2
,is Tree,2
,( is SpanningTree,2
,( is CaterpillarTree,2
,is SpanningTree,2
,is CaterpillarTree,2
,script is still,1
,play is not,1
,cell is done,1
,this is also,1
,move is displayed,1
,INTEGER is used,1
,and is needed,1
,is still,1
,is done,1
,is also,1
,is needed,3
,Move is a,1
,Care is needed,2
,something is always,1
,PowerLeft is Influence,1
,latter is for,1
,it is followed,1
,is always,1
,is Influence,1
,is for,1
,is followed,1
,) is difference,1
,is difference,1
,( is Path,8
,is Path,8
,( is Solved,19
,is Solved,19
,( is Count,7
,is Count,7
,( is Sum,6
,is Sum,6
,( is Unique,1
,is Unique,1
,( is Target,4
,is Target,4
it,Split it in,2
,it in,2
,move it .,1
,enemy it has,1
,it .,1
,it has,1
,place it somewhere,1
,it somewhere,1
,if it is,1
,it is,4
,because it does,1
,it does,1
,thinking it should,1
,it should,1
,where it can,1
,it can,2
,--COMMA-- it can,1
,and it seems,1
,it seems,1
,--COMMA-- it is,1
,where it is,1
,space it moved,1
,then it remains,1
,it moved,1
,it remains,1
,destinations it yields,1
,as it is,1
,it yields,1
resulting,the resulting destinations,1
,resulting destinations,1
odd,on odd square,1
,odd square,1
Sites,count Sites in:,331
,Sites in:,331
,all Sites (,79
,Sites (,80
,all Sites <Board:3dSites>,1
,Sites <Board:3dSites>,1
,count Sites STRING,7
,Sites STRING,7
,Generic Sites that,1
,) Sites that,2
,Sites that,3
,) Sites (,1
,all Sites #1,2
,Sites #1,2
,count Sites Cell,3
,Sites Cell,3
boardless,( boardless Square,4
,boardless Square,4
,( boardless <Tiling:type>,2
,boardless <Tiling:type>,2
<Option:players>,players <Option:players> ),1
,<Option:players> ),1
ifAfterwards:<Players:pathRule>,) ifAfterwards:<Players:pathRule> ),1
,ifAfterwards:<Players:pathRule> ),1
<BoardConfig:RookRight2Start>,INTEGER <BoardConfig:RookRight2Start> ),1
,<BoardConfig:RookLeft2Start> <BoardConfig:RookRight2Start> },1
,<BoardConfig:RookRight2Start> ),1
,<BoardConfig:RookRight2Start> },1
<Board:dice>,) <Board:dice> (,1
,<Board:dice> (,1
<Row:trackCCW2>,STRING <Row:trackCCW2> loop:True,1
,<Row:trackCCW2> loop:True,1
<RegionLightPhase>,<RegionDarkPhase> <RegionLightPhase> <RegionMediumPhase>,1
,<RegionLightPhase> <RegionMediumPhase>,1
<east>,<south> <east> <west>,1
,<east> <west>,1
Map,) Map between,1
,Map between,1
begin,to begin the,1
,begin the,1
SubGrids,Rows SubGrids },4
,SubGrids },4
of:,row of: (,30
,of: (,151
,Pieces of: (,1
,column of: (,85
,layer of: (,6
,phase of: (,20
,Friend of: (,5
,#3 of: (,4
<CheckmateRule:Move>,play <CheckmateRule:Move> ),1
,<CheckmateRule:Move> ),1
<piece>,{ <piece> },3
,<piece> },3
,{ <piece> <rules>,1
,<piece> <rules>,1
variations:,} variations: {,105
,variations: {,105
<Army>,Step <Army> (,1
,STRING <Army> args:,1
,<Army> (,1
,<Army> args:,1
thinking,are thinking it,1
,thinking it,1
<Jarl:captureType>,) <Jarl:captureType> },1
,<Jarl:captureType> },1
<Start>,STRING <Start> args:,15
,<Start> args:,15
,{ <Start> },3
,<Start> },3
<Board:rightMostInnerHoleP1>,<Board:thirdHoleInnerP1> <Board:rightMostInnerHoleP1> },1
,<Board:rightMostInnerHoleP1> },1
ESE,) ESE ),2
,ESE ),2
,WSW ESE },7
,ESE },7
,STRING ESE INTEGER,8
,ESE INTEGER,8
<Variant:goal>,if <Variant:goal> (,1
,<Variant:goal> (,1
everything,that everything other,1
,from everything },1
,everything other,1
,everything },1
Structure,) Structure of,2
,Structure of,2
oer,move oer any,1
,oer any,1
side,each side having,1
,the side of,2
,starting side --COMMA--,2
,far side --COMMA--,1
,farthest side without,1
,side having,1
,side of,2
,side --COMMA--,3
,side without,1
includeSelf:True,) includeSelf:True ),5
,Orthogonal includeSelf:True ),6
,includeSelf:True ),12
,STRING includeSelf:True ),1
<Group>,STRING <Group> args:,1
,<Group> args:,1
Surround,) Surround on,2
,Surround on,2
<LeftInnerHolesP2>,<LeftInnerHolesP1> <LeftInnerHolesP2> <InitOneSeed>,1
,<LeftInnerHolesP2> <InitOneSeed>,1
<Shape>,hex <Shape> <Size>,1
,STRING <Shape> args:,1
,<Shape> <Size>,1
,<Shape> args:,1
edgeColour:,) edgeColour: (,1
,edgeColour: (,1
draw,= draw (,1
,draw (,1
,players draw .,1
,draw .,1
off,Bear off rule,4
,off rule,4
,degrees off either,1
,off either,1
clearing,utilities: clearing the,1
,clearing the,1
<Stars>,STRING <Stars> ),1
,STRING <Stars> args:,1
,<Stars> ),1
,<Stars> args:,1
traditionally,are traditionally coloured,1
,traditionally coloured,1
<Row:specialHoles>,{ <Row:specialHoles> },1
,<Row:specialHoles> },1
<NumPlayers>,{ <NumPlayers> <BoardShape>,2
,<NumPlayers> <BoardShape>,2
Defining,) Defining the,2
,Defining the,2
le,( le (,3
,le (,3
,( le #2,1
,le #2,1
,( le <NeighborsOf:nbrMax>,1
,le <NeighborsOf:nbrMax>,1
,( le INTEGER,2
,le INTEGER,2
complete,( complete (,8
,complete (,8
<Player:startPos>,) <Player:startPos> (,1
,<Player:startPos> (,1
54>,. 54> STRING,1
,54> STRING,1
Boat,) Boat (,1
,= Boat Damage,1
,Boat (,1
,Boat Damage,1
origin:,expand origin: (,94
,origin: (,98
,) origin: (,4
<Scoring:updateOption>,then <Scoring:updateOption> ),1
,<Scoring:updateOption> ),1
<Fox:hopCapture>,or <Fox:hopCapture> <Fox:stepMove>,1
,<Fox:hopCapture> <Fox:stepMove>,1
count:100,) count:100 state:1,4
,count:100 state:1,4
lt,( lt (,8
,lt (,8
,( lt INTEGER,3
,lt INTEGER,3
<FogOfWar>,STRING <FogOfWar> args:,1
,<FogOfWar> args:,1
while,( while (,1
,while (,1
secone,the secone edge,1
,secone edge,1
<Board:leopardGoal>,) <Board:leopardGoal> ),1
,<Board:leopardGoal> ),1
second,) second capture,1
,second capture,1
,the second promotion,1
,second promotion,1
,**** second choice,1
,second choice,1
that,for that player,1
,that player,1
,then that Pawn,1
,that Pawn,1
,of that colour,1
,Note that a,1
,move that would,1
,colour that has,1
,in that position,1
,rule that if,1
,that colour,1
,that a,2
,that would,1
,that has,1
,that position,1
,that if,2
,Sites that contain,1
,units that are,1
,Sites that a,1
,Sites that are,1
,sites that protect,1
,Move that builds,1
,Moves that infantry,1
,that contain,1
,that are,2
,that protect,1
,that builds,1
,that infantry,1
,site that is,1
,that is,1
,show that everything,1
,that everything,1
,add that if,1
,sure that something,1
,restrictions that prevent,1
,that something,1
,that prevent,1
edge,an edge --COMMA--,1
,edge --COMMA--,1
,secone edge marker,1
,edge marker,1
,an edge (,1
,edge (,1
<Dual:begin>,board <Dual:begin> (,1
,<Dual:begin> (,1
than,lower than Mover,2
,lower than his,1
,than Mover,2
,than his,1
,other than Kings,1
,more than one,1
,than Kings,1
,than one,1
,other than placement,1
,than placement,1
limit,upper limit at,1
,limit at,1
,a limit on,1
,limit on,1
claim,( claim (,6
,claim (,6
Team2,STRING Team2 STRING,1
,players Team2 ),1
,STRING Team2 ),5
,result Team2 Win,4
,Team2 STRING,1
,Team2 ),6
,Team2 Win,4
sow,( sow #2,3
,sow #2,3
,( sow STRING,136
,sow STRING,136
,( sow ),7
,sow ),7
,( sow (,25
,sow (,25
,( sow numPerHole:2,1
,sow numPerHole:2,1
,( sow numPerHole:,1
,sow numPerHole:,1
,( sow sowEffect:,1
,sow sowEffect:,1
,( sow count:4,1
,( sow count:,8
,sow count:4,1
,sow count:,8
,( sow apply:,60
,sow apply:,60
,we sow only,1
,sow only,1
,( sow if:,22
,sow if:,22
,( sow origin:True,3
,sow origin:True,3
,( sow #1,1
,sow #1,1
,( sow numPerHole:4,4
,sow numPerHole:4,4
,( sow skipIf:,1
,sow skipIf:,1
,( sow count:2,2
,sow count:2,2
,( sow if:True,4
,sow if:True,4
,( sow count:18,1
,sow count:18,1
Team1,players Team1 ),4
,STRING Team1 STRING,1
,STRING Team1 ),5
,result Team1 Win,4
,Team1 ),9
,Team1 STRING,1
,Team1 Win,4
-------------------------------------------------------,Kings ------------------------------------------------------- #1,1
,Castling ------------------------------------------------------- (,1
,Pieces ------------------------------------------------------- (,1
,Hoplites ------------------------------------------------------- #1,1
,Core ------------------------------------------------------- (,1
,------------------------------------------------------- #1,2
,------------------------------------------------------- (,3
different,are different .,1
,different .,1
,of different Boards,1
,different Boards,1
,array different or,1
,different or,1
Cell,count Cell at:,204
,Cell at:,224
,to Cell (,15
,Hidden Cell at:,2
,from Cell (,13
,remove Cell (,6
,Cell (,73
,LastTo Cell ),1
,Cell ),17
,what Cell at:,1
,Occupied Cell (,7
,Incident Cell of:Cell,5
,Cell of:Cell,5
,Incident Cell of:Vertex,3
,sites Cell STRING,7
,Cell of:Vertex,3
,Cell STRING,7
,directions Cell from:,27
,Cell from:,27
,Around Cell (,8
,Empty Cell (,2
,from Cell ),6
,to Cell if:,1
,STRING Cell {,1
,Cell if:,1
,Cell {,1
,Start Cell (,3
,directions Cell from:#1,4
,Cell from:#1,4
,renumber Cell (,1
,Empty Cell ),7
,Incident Cell of:Edge,2
,who Cell at:,1
,Pieces Cell #1,1
,#1 Cell ),1
,STRING Cell INTEGER,5
,Cell of:Edge,2
,Cell #1,2
,Cell INTEGER,5
,ahead Cell #2,10
,Around Cell #1,1
,Around Cell #2,1
,Sites Cell in:,3
,) Cell at:,12
,State Cell at:,1
,Cell #2,11
,Cell in:,3
,values Cell (,16
,} Cell ),2
,forAll Cell (,2
,hint Cell at:,3
<p2_directions>,<p1_directions> <p2_directions> ),6
,<p2_directions> ),6
55>,. 55> STRING,1
,55> STRING,1
Rightwards,{ Rightwards Leftwards,8
,Rightwards Leftwards,18
,Forwards Rightwards Leftwards,7
,STRING Rightwards ),3
,Backwards Rightwards Leftwards,3
,Backward Rightwards },1
,Rightwards ),3
,Rightwards },1
value:7,STRING value:7 ),1
,value:7 ),5
,count:1 value:7 ),2
,count:2 value:7 ),2
value:8,STRING value:8 ),1
,value:8 ),3
,count:2 value:8 ),2
value:5,count:1 value:5 ),1
,value:5 ),14
,STRING value:5 ),9
,count:2 value:5 ),2
,count:4 value:5 ),2
cycling:-,prevent cycling:- After,1
,cycling:- After,1
value:6,count:1 value:6 ),1
,value:6 ),6
,STRING value:6 ),1
,count:2 value:6 ),2
,count:4 value:6 ),2
<phases:,> <phases: {,1
,<phases: {,1
value:3,count:2 value:3 ),3
,value:3 ),31
,STRING value:3 ),9
,state:2 value:3 ),17
,count:4 value:3 ),2
level,( level ),316
,level ),316
,between level and,1
,level and,1
value:4,count:2 value:4 ),3
,value:4 ),14
,STRING value:4 ),9
,count:4 value:4 ),2
3rd,optional 3rd region,1
,3rd region,1
value:1,count:4 value:1 ),4
,value:1 ),38
,count:8 value:1 ),1
,state:3 value:1 ),4
,state:1 value:1 ),8
,state:2 value:1 ),2
,) value:1 ),4
,STRING value:1 ),3
,count:5 value:1 ),2
,} value:1 ),8
,INTEGER value:1 ),2
value:2,count:2 value:2 ),3
,value:2 ),16
,STRING value:2 ),11
,count:8 value:2 ),2
value:0,rotation:2 value:0 ),1
,rotation:4 value:0 ),1
,rotation:6 value:0 ),1
,rotation:0 value:0 ),1
,value:0 ),4
Dominoes,deal Dominoes INTEGER,1
,Dominoes INTEGER,1
restrictions,move restrictions that,1
,restrictions that,1
<End:sites>,sites <End:sites> ),1
,<End:sites> ),1
Double,game: Double turns,1
,Double turns,1
plus,--COMMA-- plus handling,1
,plus handling,1
entry,the entry of,1
,entry of,1
expand,( expand (,577
,expand (,577
,( expand origin:,94
,expand origin:,94
,( expand origin:1,1
,( expand origin:0,2
,( expand origin:2,1
,( expand origin:3,1
,( expand origin:4,1
,( expand origin:5,1
,( expand origin:6,1
,( expand origin:7,1
,( expand origin:8,1
,( expand origin:9,1
,( expand origin:10,1
,( expand origin:11,1
,expand origin:1,1
,expand origin:0,2
,expand origin:2,1
,expand origin:3,1
,expand origin:4,1
,expand origin:5,1
,expand origin:6,1
,expand origin:7,1
,expand origin:8,1
,expand origin:9,1
,expand origin:10,1
,expand origin:11,1
,( expand origin:181,1
,( expand origin:191,1
,( expand origin:174,1
,expand origin:181,1
,expand origin:191,1
,expand origin:174,1
use:Vertex>,) use:Vertex> STRING,1
,use:Vertex> STRING,1
<geese>,{ <geese> },1
,<geese> },1
<Board:rightMostInnerHoleP2>,<Board:thirdHoleInnerP2> <Board:rightMostInnerHoleP2> },1
,<Board:rightMostInnerHoleP2> },1
CaptureToPieceAndResetCounter,- CaptureToPieceAndResetCounter (,7
,CaptureToPieceAndResetCounter (,7
<Challenge>,start <Challenge> ),7
,STRING <Challenge> args:,15
,<Challenge> ),7
,<Challenge> args:,15
,) <Challenge> (,1
,<Challenge> (,1
diagonals,by diagonals only,1
,diagonals only,1
value:9,STRING value:9 ),1
,value:9 ),3
,INTEGER value:9 ),2
consumed,INTEGER consumed in,1
,consumed in,1
no,( no Pieces,376
,( no Moves,328
,no Pieces,376
,no Moves,328
,with no notches,2
,no notches,2
,) no moves,1
,no moves,1
,are no pieces,1
,are no Bishops,1
,is no en,1
,no pieces,1
,no Bishops,1
,no en,1
,if no promotion,1
,no promotion,1
,) no mover,1
,no mover,1
behind,if behind an,1
,behind an,1
count:120,) count:120 state:1,2
,count:120 state:1,2
p1,if p1 mover,1
,p1 mover,1
<Board:MainWinC>,<= <Board:MainWinC> (,10
,<Board:MainWinC> (,10
p2,one p2 piece,1
,p2 piece,1
Phase,sites Phase INTEGER,123
,Phase INTEGER,123
,sites Phase <BoardConfig:RegionDarkPhase>,1
,sites Phase <BoardConfig:RegionLightPhase>,1
,sites Phase <BoardConfig:RegionMediumPhase>,1
,Phase <BoardConfig:RegionDarkPhase>,1
,Phase <BoardConfig:RegionLightPhase>,1
,Phase <BoardConfig:RegionMediumPhase>,1
<Diagonal>,STRING <Diagonal> STRING,2
,<Diagonal> STRING,2
ROUND,ONE ROUND FOR,1
,ROUND FOR,1
EndSite,trackSite EndSite ),2
,EndSite ),2
,trackSite EndSite Mover,2
,EndSite Mover,2
<Board:stores>,Home <Board:stores> },1
,<Board:stores> },1
storage,( storage pits,41
,storage pits,41
<High:value>,INTEGER <High:value> ),2
,<High:value> ),2
elapsed,turns elapsed without,1
,elapsed without,1
by:Mover,Occupied by:Mover ),154
,by:Mover ),158
,Occupied by:Mover top:False,5
,by:Mover top:False,5
,Occupied by:Mover container:,10
,by:Mover container:,10
,Occupied by:Mover STRING,76
,by:Mover STRING,76
,) by:Mover {,3
,of:All by:Mover at:,2
,Occupied by:Mover components:,1
,by:Mover {,3
,by:Mover at:,2
,by:Mover components:,1
,of:P1 by:Mover ),1
,of:P2 by:Mover ),1
,of:P3 by:Mover ),1
,of:P4 by:Mover ),1
,Occupied by:Mover on:Edge,2
,by:Mover on:Edge,2
,Occupied by:Mover top:True,1
,by:Mover top:True,1
total,a total distance,1
,total distance,1
of,winning of P1,2
,of P1,6
,positions of each,4
,of each,10
,Quadrant of P1,2
,Quadrant of P2,2
,of P2,4
,Charge of the,1
,one of our,1
,goal of the,1
,of the,35
,of our,1
,Name of piece,2
,of piece,2
,position of the,1
,value of mine,2
,hand of P1,1
,hand of P2,1
,of mine,2
,goal of P1,1
,goal of P2,1
,value of each,1
,regardless of what,2
,of what,2
,leftHole of each,1
,number of capture,1
,of capture,1
,holes of the,2
,levels of the,1
,State of pieces,3
,Movement of the,3
,of pieces,3
,Version of the,1
,location of last-moved,6
,of last-moved,6
,opposite of <fwd_dir>,1
,of <fwd_dir>,1
,INTEGER of the,1
,out of omnicheck,2
,move of a,1
,number of spaces,1
,of omnicheck,2
,of a,4
,of spaces,1
,made of hexagons,1
,side of the,2
,pieces of that,1
,one of the,2
,pieces of the,1
,piece of the,1
,any of the,3
,either of those,1
,spaces of the,1
,space of the,1
,right of forward,1
,) of the,1
,movement of the,1
,version of the,1
,possession of the,1
,direction of movement,1
,Encyclopedia of Chess,1
,of hexagons,1
,of that,1
,of those,1
,of forward,1
,of movement,1
,of Chess,1
,entry of the,1
,sense of the,1
,owner of each,1
,end of each,1
,location of the,4
,Site of player,1
,of player,1
,placement of a,1
,size of the,1
,lists of sites,1
,INTEGER of each,1
,of sites,1
,series of hops,1
,hops of a,1
,Influence of the,1
,position of a,1
,influence of INTEGER,1
,Continuation of the,1
,structure of each,1
,Structure of play,2
,Definitions of different,1
,of hops,1
,of INTEGER,1
,of play,2
,of different,1
,number of try,1
,of try,1
loses,player loses --COMMA--,1
,loses --COMMA--,1
og,locations og the,1
,og the,1
Opponent,STRING Opponent piece,1
,Opponent piece,1
,Notes: Opponent scoring,1
,Opponent scoring,1
<track1>,<size> <track1> <track2>,1
,<track1> <track2>,1
Winning,sites Winning Mover,4
,sites Winning Next,4
,Winning Mover,4
,Winning Next,4
<piece_key>,STRING <piece_key> <slide_dir>,3
,<piece_key> <slide_dir>,3
on,rule on water,1
,on water,1
,is on the,1
,on the,11
,if on the,1
,Surround on corners,2
,on corners,2
,diagonally on its,1
,on its,1
,depend on how,1
,have on the,1
,omnicheck on their,1
,on how,1
,on their,1
,played on a,2
,--COMMA-- on the,2
,Knight on the,1
,--COMMA-- on a,1
,on a,4
,) on step,2
,on step,2
,only on the,1
,Diagonal on the,1
,pieces on the,1
,stand on (,1
,entrenchment on ),1
,on (,2
,on ),1
,humans on land,1
,units on land,1
,on land,2
,heavy on the,1
,piece on a,1
,empties on all,1
,on all,1
,place on an,1
,place on empty,1
,limit on friendly,1
,on an,1
,on empty,1
,on friendly,1
,selection on the,1
,based on remaining,1
,played on (,1
,on remaining,1
,play on even,1
,scoring on odd,1
,on even,1
,on odd,1
macro,STRING macro because,1
,macro because,1
,This macro defines,1
,macro defines,1
Hexagon,tri Hexagon INTEGER,4
,Hexagon INTEGER,4
,concentric Hexagon rings:3,1
,Hexagon rings:3,1
,hex Hexagon <BoardSize:smallSide>,6
,Hexagon <BoardSize:smallSide>,8
,tri Hexagon <BoardSize:smallSide>,2
,tri Hexagon <Board>,1
,Hexagon <Board>,1
or,( or STRING,69
,or STRING,69
,( or (,1435
,or (,1435
,( or <Jump:hare>,1
,or <Jump:hare>,1
,( or <Jump:coyote>,1
,or <Jump:coyote>,1
,( or {,455
,or {,455
,( or <Jump:bean>,1
,or <Jump:bean>,1
,( or <Fox:hopCapture>,1
,or <Fox:hopCapture>,1
,) or blank,2
,end or ),1
,or blank,2
,or ),1
,empty or contain,1
,piece or two,1
,one or two,1
,--COMMA-- or right,2
,two or three,2
,or contain,1
,or two,2
,or right,3
,or three,2
,flat or Two,1
,or Two,1
,Two or more,1
,or more,1
,INTEGER or INTEGER,1
,or INTEGER,2
,P1 or P2,2
,E or W,1
,or P2,2
,or W,1
,gray or black,1
,--COMMA-- or INTEGER,1
,Rook or a,1
,with or without,1
,left or right,1
,--COMMA-- or Knight,1
,--COMMA-- or there,1
,capture or Pawn,1
,or black,1
,or a,2
,or without,1
,or Knight,1
,or there,1
,or Pawn,1
,( or Add,1
,or Add,1
,( or <CheckmateRule:Ending>,1
,or <CheckmateRule:Ending>,1
,( or <Movement:type>,1
,or <Movement:type>,1
,STRING or <Multi:capture>,1
,or <Multi:capture>,1
,) or next,1
,or next,1
,different or a,1
,( or <Play:type>,1
,or <Play:type>,1
chance,a chance to,1
,chance to,1
Leduc,Phil Leduc Move,1
,Leduc Move,1
considerably,processing considerably .,1
,considerably .,1
moveagain,( moveagain ),1
,moveagain ),1
control,Flow control for,1
,control for,1
coloured,traditionally coloured red,1
,coloured red,1
loops:3>,) loops:3> <,1
,loops:3> <,1
Variants,Chess Variants --COMMA--,1
,Variants --COMMA--,1
count:<Board:init>,) count:<Board:init> (,1
,count:<Board:init> (,1
diagonal,square diagonal grid,1
,diagonal grid,1
<Tiger>,STRING <Tiger> args:,2
,<Tiger> args:,2
10>,. 10> <50,1
,10> <50,1
,. 10> <17,1
,10> <17,1
,<5 10> STRING,1
,10> STRING,1
,<12 10> <,1
,10> <,1
<p3_dirs>,<p2_dirs> <p3_dirs> ),1
,<p3_dirs> ),1
Currently,Note: Currently --COMMA--,1
,Currently --COMMA--,1
<BoardConfig>,STRING <BoardConfig> args:,1
,<BoardConfig> args:,1
upper,) upper limit,1
,upper limit,1
stopIncluded:True,) stopIncluded:True ),7
,stopIncluded:True ),7
,) stopIncluded:True distance:,1
,stopIncluded:True distance:,1
determination,site determination suicidal,1
,determination suicidal,1
<sum>,<maxVal> <sum> },1
,<sum> },1
somewhere,it somewhere around,1
,somewhere around,1
<Board:track1>,STRING <Board:track1> loop:True,1
,<Board:track1> loop:True,1
Farthest,LineOfSight Farthest at:,4
,Farthest at:,4
draws,player draws .,1
,draws .,1
<CapThreshold>,) <CapThreshold> ),1
,STRING <CapThreshold> args:,1
,<CapThreshold> ),1
,<CapThreshold> args:,1
drawn,functions drawn from,9
,drawn from,9
Damage,Attacker Damage #1,1
,Human Damage INTEGER,1
,Vehicle Damage INTEGER,2
,Aircraft Damage INTEGER,1
,Boat Damage INTEGER,1
,Building Damage (,1
,= Damage Taken,1
,Random Damage Minimum,1
,Random Damage Maximum,1
,Damage #1,1
,Damage INTEGER,5
,Damage (,1
,Damage Taken,1
,Damage Minimum,1
,Damage Maximum,1
11>,. 11> <20,1
,11> <20,1
they,Kings they happen,1
,--COMMA-- they must,1
,--COMMA-- they have,1
,because they have,1
,they happen,1
,they must,1
,they have,2
,--COMMA-- they are,1
,they are,1
<Board:track2>,STRING <Board:track2> loop:True,5
,<Board:track2> loop:True,5
,) <Board:track2> },1
,<Board:track2> },1
<walls>,{ <walls> <start1>,1
,<walls> <start1>,1
,{ <walls> <exit>,1
,<walls> <exit>,1
,<exit> <walls> },1
,<walls> },1
Spartan,out Spartan castling,1
,Spartan castling,1
Ghora,) Ghora (,1
,Ghora (,1
value:100,state:1 value:100 ),3
,state:8 value:100 ),150
,value:100 ),153
Comment:,Comment: That,1
them,simplify them into,1
,them into,1
,remembering them speeds,1
,them speeds,1
then,( then (,1817
,then (,1817
,( then STRING,27
,then STRING,27
,--COMMA-- then that,1
,then that,1
,( then <NumOfPlayers:CheckMate>,2
,then <NumOfPlayers:CheckMate>,2
,- then clause,2
,then clause,2
,--COMMA-- then the,2
,--COMMA-- then it,1
,--COMMA-- then Player,1
,then the,2
,then it,1
,then Player,1
,( then #2,1
,then #2,1
,( then <SType:selScoring>,2
,then <SType:selScoring>,2
,( then <Scoring:updateOption>,1
,then <Scoring:updateOption>,1
,would then not,2
,included then conditions,1
,and then remove,1
,then not,2
,then conditions,1
,then remove,1
,( then <Minotaur:threat>,1
,then <Minotaur:threat>,1
<init>,<number> <init> },3
,<init> },6
,<num> <init> },1
,<startPos> <init> },1
,<size> <init> },1
,<track> <init> <Play>,1
,<init> <Play>,1
<directionScored>,<diagShow> <directionScored> },3
,<directionScored> },3
Transit,- Transit zone,1
,Transit zone,1
Rooks,* Rooks move,1
,the Rooks belonging,1
,Rooks move,1
,Rooks belonging,1
remaining,the remaining player,1
,remaining player,1
,the remaining steps,1
,the remaining step,1
,on remaining influence,1
,remaining steps,1
,remaining step,1
,remaining influence,1
NextPlayer,set NextPlayer (,42
,NextPlayer (,45
,Set NextPlayer (,3
Wellisch,STRING Wellisch STRING,1
,Siegmund Wellisch .,1
,STRING Wellisch Chess,1
,in Wellisch Chess,1
,STRING Wellisch Chess_ai"     ) ),1
,Wellisch Chess,3
,Wellisch STRING,1
,Wellisch .,1
,Wellisch Chess_ai"     ) ),1
<suicideOption>,<location> <suicideOption> },1
,<suicideOption> },1
bridge,Add bridge to,2
,to bridge wagon,1
,bridge to,2
,bridge wagon,1
starting,the starting point,3
,starting point,3
,The starting positions,4
,starting positions,4
,the starting Shah's,1
,starting Shah's,1
,its starting side,1
,their starting side,1
,starting side,2
,the starting location,1
,the starting position,1
,starting location,1
,starting position,1
Split,add Split it,2
,Split it,2
conditions,victory conditions for,1
,victory conditions depend,1
,conditions for,1
,conditions depend,1
,then conditions (,1
,pass conditions (,1
,conditions (,2
12>,. 12> <23,1
,12> <23,1
,<14 12> <,1
,12> <,1
checking,before checking for,1
,checking for,1
<dot0>,<size> <dot0> <3dSites>,1
,<dot0> <3dSites>,1
<Scenario>,STRING <Scenario> args:,1
,<Scenario> args:,1
<controlType>,{ <controlType> },2
,<controlType> },2
<Board:LeftInnerHolesP1>,{ <Board:LeftInnerHolesP1> },1
,<Board:LeftInnerHolesP1> },1
seed,one seed .,1
,seed .,1
<Throw>,<Dice> <Throw> (,1
,STRING <Throw> args:,1
,<Throw> (,1
,<Throw> args:,1
count:,) count: (,451
,count: (,466
,sow count: (,8
,STRING count: (,6
,} count: (,1
executed,be executed .,2
,executed .,2
<fwd_dir>,STRING <fwd_dir> <back_dir>,5
,<fwd_dir> <back_dir>,5
,of <fwd_dir> .,1
,<fwd_dir> .,1
workaround,bug workaround (,2
,bug workaround },1
,workaround (,2
,workaround },1
current,our current role,2
,current role,2
,its current implementation,1
,current implementation,1
,their current space---West,1
,the current space,1
,the current move,1
,current space---West,1
,current space,1
,current move,1
<Version:limit>,) <Version:limit> ),1
,<Version:limit> ),1
Piece,forEach Piece ),532
,Piece ),532
,forEach Piece STRING,215
,Piece STRING,215
,forEach Piece top:True,49
,Piece top:True,49
,forEach Piece (,97
,Piece (,97
,forEach Piece container:,41
,Piece container:,41
,forEach Piece P1,7
,forEach Piece P2,5
,forEach Piece P3,4
,forEach Piece P4,2
,forEach Piece P5,1
,forEach Piece P6,1
,Piece P1,7
,Piece P2,5
,Piece P3,4
,Piece P4,2
,Piece P5,1
,Piece P6,1
,value Piece at:,98
,Piece at:,106
,forEach Piece {,32
,Piece {,32
,forEach Piece container:1,1
,Piece container:1,1
,value Piece at:#1,1
,Piece at:#1,1
,forEach Piece Next,96
,Piece Next,96
,forEach Piece #1,5
,Piece #1,5
,. Piece Movement:,1
,Piece Movement:,1
,Large Piece Name,1
,Small Piece Name,1
,Piece Name,2
,Each Piece moving,2
,Piece moving,2
,forEach Piece Shared,1
,Piece Shared,1
,forEach Piece on:Vertex,1
,forEach Piece on:Edge,1
,forEach Piece on:Cell,1
,Piece on:Vertex,1
,Piece on:Edge,1
,Piece on:Cell,1
,LineOfSight Piece at:,8
,forEach Piece <Version:consequence>,1
,Piece <Version:consequence>,1
Limping,tri Limping INTEGER,5
,Limping INTEGER,11
,hex Limping <Board:size>,1
,Limping <Board:size>,1
,hex Limping (,5
,Limping (,7
,tri Limping (,2
,hex Limping INTEGER,6
Options:,STRING Options: eg,1
,Options: eg,1
before:10,STRING before:10 after:10,2
,before:10 after:10,2
<ScoreOption:discVal>,STRING <ScoreOption:discVal> ),1
,<ScoreOption:discVal> ),1
<hare>,{ <hare> },1
,<hare> },1
13>,. 13> <26,1
,13> <26,1
so,done so far,4
,so far,4
,--COMMA-- so remembering,1
,so remembering,1
<Step,> <Step (,1
,<Step (,1
counts:,) counts: {,27
,counts: {,27
<showHandP3>,<betP3> <showHandP3> <removeP3>,1
,<showHandP3> <removeP3>,1
<Board:LeftInnerHolesP2>,{ <Board:LeftInnerHolesP2> },1
,<Board:LeftInnerHolesP2> },1
one,If one of,1
,one of,3
,remove one or,1
,removes one enemy,1
,one or,1
,one enemy,1
,and one round,1
,one round,1
,only one seed,1
,one seed,1
,Only one capture,1
,one capture,1
,last one placed,1
,one placed,1
,in one forward,1
,one forward,1
,defines one piece,1
,one piece,1
,to one of,1
,move one space,2
,with one of,1
,moving one space,1
,than one space,1
,one space,4
,mover one p2,1
,one p2,1
,least one player,1
,one player,1
<Board:EnemyTrack1>,STRING <Board:EnemyTrack1> P1,1
,<Board:EnemyTrack1> P1,1
store,We store the,3
,store the,3
Pawn2Start,> Pawn2Start <0>,1
,> Pawn2Start <2>,1
,Pawn2Start <0>,1
,Pawn2Start <2>,1
Section,From Section INTEGER,12
,Section INTEGER,12
diagonals:Solid,INTEGER diagonals:Solid ),18
,diagonals:Solid ),18
bug,STRING bug adds,1
,bug adds,1
,) bug workaround,3
,bug workaround,3
<Remove:rule>,STRING <Remove:rule> (,4
,<Remove:rule> (,4
<Board:EnemyTrack2>,STRING <Board:EnemyTrack2> P2,1
,<Board:EnemyTrack2> P2,1
makeFaces,( makeFaces (,1
,makeFaces (,1
<coyote>,{ <coyote> },1
,<coyote> },1
stones,enemy stones from,1
,stones from,1
to,( to if:,1175
,( to ),4489
,( to (,1657
,to if:,1175
,to ),4489
,to (,1658
,site to another,1
,( to INTEGER,16
,to another,1
,to INTEGER,18
,( to STRING,107
,to STRING,107
,goes to the,4
,have to enter,3
,have to go,3
,back to the,3
,( to #1,11
,to the,13
,to enter,3
,to go,3
,to #1,11
,thanks to double,4
,to double,4
,INTEGER to INTEGER,2
,have to move,1
,has to .,1
,to move,5
,to .,1
,- to region,2
,to region,2
,( to Cell,16
,to Cell,16
,the to location,2
,higher to the,1
,the to value,1
,pushed to place,1
,to location,2
,to value,1
,to place,3
,enemy to an,1
,to an,4
,order to remove,2
,to remove,2
,( to Edge,19
,to Edge,19
,piece to build,1
,to build,1
,( to #2,4
,to #2,4
,hole to play,2
,to play,3
,hole to a,1
,to a,6
,adjacent to any,1
,to any,2
,( to <Edge:target_zone>,1
,to <Edge:target_zone>,1
,dots to separate,1
,to separate,1
,( to <To>,1
,to <To>,1
,possible to reach,1
,impossible to place,1
,impossible to play,1
,to reach,1
,( to Vertex,5
,to Vertex,5
,) to update,1
,to update,2
,promote to Wazir,2
,promote to Knight_rotated,2
,promote to Elephant,2
,promote to Queen,2
,promote to King_noCross,2
,promote to Amazon,2
,promote to Giraffe,2
,promote to Bishop_noCross,2
,promote to Knight,2
,promote to Rook,2
,line to a,1
,promotion to the,1
,to Wazir,2
,to Knight_rotated,2
,to Elephant,2
,to Queen,2
,to King_noCross,2
,to Amazon,2
,to Giraffe,2
,to Bishop_noCross,2
,to Knight,2
,to Rook,2
,( to if:True,22
,to if:True,22
,pawn to begin,1
,to begin,1
,used to record,1
,to record,1
,happen to have,2
,trick to do,1
,illegal to move,1
,spaces to move,1
,condition to check,1
,to have,2
,to do,1
,to check,2
,board to Hand,1
,promoted to one,1
,belonging to the,1
,--COMMA-- to any,1
,moves to a,1
,available to a,1
,forward to an,1
,promoted to a,1
,due to turns,1
,able to escape,1
,player to capture,1
,chance to move,1
,to Hand,1
,to one,1
,to turns,1
,to escape,1
,to capture,1
,jump to three,2
,jump to two,9
,move to step,6
,to three,2
,to two,9
,to step,6
,Eric to check,1
,Todo: to improve,1
,to improve,1
,hand to the,1
,site to the,1
,( to if:False,3
,bridge to river,1
,bridge to bridge,1
,to if:False,3
,to river,1
,to bridge,1
,damage to units,3
,to units,3
,) to place,1
,player to consider,1
,to consider,1
,Direction to integer,1
,--COMMA-- to (,1
,players to understand,1
,state to be,1
,cells to filter,1
,added to --COMMA--,1
,need to be,1
,sites to update,1
,) to allow,1
,) to restrict,1
,All to pick,1
,entered to suicide,1
,next to suicide,1
,to integer,1
,to understand,1
,to be,2
,to filter,1
,to --COMMA--,1
,to allow,1
,to restrict,1
,to pick,1
,to suicide,2
,want to add,1
,option to swap,1
,next to a,1
,next to an,2
,next to pieces,1
,to add,1
,to swap,1
,to pieces,1
,Expands to about,1
,equal to the,1
,needed to avoid,2
,are to make,1
,where to start,1
,Test to prevent,1
,characters to restore,1
,piece to move,1
,to about,1
,to avoid,2
,to make,1
,to start,1
,to prevent,1
,to restore,1
,leads to 1st,1
,to 1st,1
fourth,) fourth hole,1
,fourth hole,1
<method>,{ <method> },1
,<method> },1
intervene,( intervene (,4
,intervene (,4
<Multi>,STRING <Multi> args:,1
,<Multi> args:,1
but,around but not,1
,but not,3
,) but specified,1
,but specified,1
,--COMMA-- but can,1
,but can,1
,--COMMA-- but essential,1
,but essential,1
,) but not,2
separate,to separate the,1
,separate the,1
,two separate directions,2
,separate directions,2
NNE,NNW NNE ),1
,SSE NNE SSW,1
,SSW NNE SSE,1
,NNW NNE },6
,NNE ),6
,NNE SSW,3
,NNE SSE,1
,NNE },6
,player NNE ),1
,STRING NNE ),3
,STRING NNE SSW,2
,#2 NNE ),1
after:,) after: (,57
,after: (,57
available,Only available from,1
,available from,2
,colour available from,1
,be available to,1
,pieces available --COMMA--,1
,becomes available for,1
,available to,1
,available --COMMA--,1
,available for,1
rules,( rules (,927
,rules (,928
,( rules <Start:start>,1
,rules <Start:start>,1
,( rules <Start:rules>,6
,rules <Start:rules>,6
,( rules <Players:startRules>,1
,rules <Players:startRules>,1
,( rules #1,1
,Starting rules phases:,1
,rules #1,1
,rules phases:,16
,( rules <Players:start>,6
,rules <Players:start>,6
,( rules <Version:start>,2
,rules <Version:start>,2
,( rules <Player:start>,5
,rules <Player:start>,5
,( rules <Player:startRules>,1
,rules <Player:startRules>,1
,( rules <Board:start>,4
,rules <Board:start>,4
,( rules phases:,15
,( rules <Boundary:cornerSetup>,1
,rules <Boundary:cornerSetup>,1
,( rules <Meta:rule>,5
,rules <Meta:rule>,5
,( rules <Model:rules>,1
,rules <Model:rules>,1
,( rules <Play>,1
,rules <Play>,1
,( rules <Version:playRules>,1
,rules <Version:playRules>,1
,the rules describing,1
,rules describing,1
,( rules <Rules:start>,2
,rules <Rules:start>,2
,last rules (,1
,the rules .,2
,rules .,2
,the rules can,1
,rules can,1
,( rules <Play:play>,1
,rules <Play:play>,1
,( rules <Version:play>,1
,rules <Version:play>,1
1-stack,( 1-stack ),1
,1-stack ),1
with:,) with: (,2
,with: (,2
<sizeHome>,<size> <sizeHome> },1
,<sizeHome> },1
,<numDice> <sizeHome> <start>,1
,<sizeHome> <start>,1
Name,- Name of,2
,Name of,2
,Piece Name #2,1
,Piece Name (,1
,Name #2,1
,Name (,1
enclosed,sites enclosed by,1
,enclosed by,1
<BoardConfig:RookLeft2Start>,INTEGER <BoardConfig:RookLeft2Start> ),1
,{ <BoardConfig:RookLeft2Start> <BoardConfig:RookRight2Start>,1
,<BoardConfig:RookLeft2Start> ),1
,<BoardConfig:RookLeft2Start> <BoardConfig:RookRight2Start>,1
HintRegions,regions HintRegions ),2
,HintRegions ),3
,STRING HintRegions ),1
<Row:trackCW1>,STRING <Row:trackCW1> loop:True,1
,<Row:trackCW1> loop:True,1
<choice>,{ <choice> },1
,<choice> },1
<80>,STRING <80> <,3
,<80> <,3
,STRING <80> STRING,1
,<80> STRING,1
NNW,STRING NNW NNE,1
,STRING NNW SSE,3
,SSE NNW ),1
,{ NNW NNE,6
,NNW NNE,7
,NNW SSE,3
,NNW ),5
,{ NNW E,2
,NNW E,2
,STRING NNW ),3
,#2 NNW ),1
components:#3,#2 components:#3 ),1
,components:#3 ),1
capturing,The capturing piece,3
,for capturing pieces,3
,capturing piece,3
,capturing pieces,3
,in capturing the,3
,capturing the,4
,without capturing by,1
,capturing by,1
,Lion capturing the,1
variant,chess variant played,1
,another variant --COMMA--,1
,variant played,1
,variant --COMMA--,1
15>,. 15> <48,1
,15> <48,1
details,For details --COMMA--,1
,details --COMMA--,1
up,sides up (,2
,notches up },1
,up (,2
,up },1
,speeds up move,1
,pick up special,1
,up move,1
,up special,1
Attacking,building Attacking a,1
,STRING Attacking a,1
,Attacking a,2
d:2,dice d:2 from:0,72
,d:2 from:0,72
,dice d:2 facesByDie:,6
,d:2 facesByDie:,6
<SType>,STRING <SType> args:,2
,<SType> args:,2
d:4,dice d:4 faces:,5
,d:4 faces:,5
,dice d:4 num:2,3
,d:4 num:2,3
,dice d:4 num:1,1
,d:4 num:1,1
,dice d:4 from:2,1
,d:4 from:2,1
,dice d:4 from:0,1
,d:4 from:0,1
d:7,dice d:7 num:3,2
,d:7 num:3,2
,dice d:7 num:1,1
,d:7 num:1,1
,dice d:7 from:0,1
,d:7 from:0,1
<Play:doubleStep>,) <Play:doubleStep> STRING,1
,<Play:doubleStep> STRING,1
d:6,dice d:6 num:3,6
,d:6 num:3,6
,dice d:6 num:<Dice:num>,3
,d:6 num:<Dice:num>,3
,dice d:6 num:2,25
,d:6 num:2,25
,dice d:6 num:1,1
,d:6 num:1,1
,dice d:6 num:6,1
,d:6 num:6,1
,dice d:6 from:1,4
,d:6 from:1,4
d:9,dice d:9 from:0,1
,d:9 from:0,1
Territory,size Territory P1,8
,size Territory P2,8
,Territory P1,8
,Territory P2,8
d:8,dice d:8 faces:,1
,d:8 faces:,1
,dice d:8 num:1,1
,d:8 num:1,1
<Size>,Diamond <Size> ),1
,STRING <Size> args:,9
,<Size> ),8
,<Size> args:,9
,Prism <Size> ),1
,<Shape> <Size> ),1
,<Board> <Size> ),1
,square <Size> ),2
,INTEGER <Size> ),1
,of:1 <Size> ),1
this,know this move,1
,this move,1
,do this .,1
,this .,1
,If this is,2
,this is,3
,maybe this is,1
,for this (,1
,this (,1
case:,special case: empty,1
,case: empty,1
<Variant:endRule>,) <Variant:endRule> ),1
,<Variant:endRule> ),1
cavalry,against cavalry and,1
,cavalry and,1
Persians,the Persians and,1
,Persians and,1
<81>,<9> <81> <369>,1
,<81> <369>,1
Bishop2Start,> Bishop2Start <,2
,Bishop2Start <,2
<enemyHops>,{ <enemyHops> <friendHops>,1
,<enemyHops> <friendHops>,1
NOW,FOR NOW (,1
,NOW (,1
hint,( hint ),4
,( hint INTEGER,82
,hint ),4
,hint INTEGER,82
,( hint {,830
,hint {,830
,( hint Cell,3
,hint Cell,3
<hand>,{ <hand> <start>,1
,<hand> <start>,1
know,To know this,1
,know this,1
General,noted General functions,8
,General functions,8
,Silver General (,8
,Gold General (,8
,General (,22
,) General (,6
region,- region (,4
,- region #2,2
,extra region (,1
,from region #2,2
,to region (,1
,to region #3,1
,capture region #4,1
,Target region #4,1
,Capture region (,1
,region (,8
,region #2,4
,region #3,1
,region #4,2
,3rd region (,1
,( region Colour,6
,region Colour,6
,) region defines,1
,region defines,1
,enough region and,1
,region and,1
higher,is higher to,1
,higher to,1
withValue:True,Moves withValue:True (,3
,withValue:True (,3
Integers,for Integers (,2
,Integers (,2
implements,Script implements it's,1
,implements it's,1
by:,Occupied by: (,2
,by: (,2
<Start:rule>,{ <Start:rule> },1
,<Start:rule> },1
rule:,blocking rule: If,1
,rule: If,1
<tiling,STRING <tiling T33434,1
,STRING <tiling T3464,1
,<tiling T33434,1
,<tiling T3464,1
,STRING <tiling T31212>,1
,STRING <tiling T333333_33434>,1
,STRING <tiling T33336>,1
,STRING <tiling T33344>,1
,STRING <tiling T3464>,1
,STRING <tiling T3636>,1
,STRING <tiling T4612>,1
,STRING <tiling T488>,1
,<tiling T31212>,1
,<tiling T333333_33434>,1
,<tiling T33336>,1
,<tiling T33344>,1
,<tiling T3464>,1
,<tiling T3636>,1
,<tiling T4612>,1
,<tiling T488>,1
<Forward>,STRING <Forward> STRING,1
,<Forward> STRING,1
pending,the pending value,2
,pending value,2
,in pending the,1
,pending the,1
destination,the destination cells,1
,destination cells,1
,a destination selection,2
,destination selection,2
changes,markers changes a,1
,changes a,1
,state changes --COMMA--,2
,changes --COMMA--,2
that's,If that's a,2
,that's a,2
,however that's not,1
,that's not,1
infantry,that infantry can,1
,just infantry ),1
,and infantry ),1
,infantry can,1
,infantry ),2
Liberty,and Liberty determinations,1
,Liberty determinations,1
What,Hidden What (,10
,What (,10
,Hidden What at:,38
,What at:,38
,Hidden What to:Mover,8
,{ What Who,2
,What to:Mover,8
,What Who,2
,Hidden What to:#1,2
,{ What State,2
,What to:#1,2
,What State,2
we,enemy we have,1
,we have,1
,indicate we can,1
,we can,2
,captured we sow,1
,we sow,1
,if we just,2
,we just,2
,why we are,1
,we are,1
,definition we can,1
,) we remove,1
,we remove,1
<Players>,STRING <Players> args:,17
,<Players> args:,17
,players <Players> ),1
,) <Players> ),1
,<Players> ),2
opponent's,an opponent's bridging,1
,opponent's bridging,1
of:Vertex,Cell of:Vertex at:,3
,of:Vertex at:,19
,Edge of:Vertex at:#1,1
,of:Vertex at:#1,1
,Edge of:Vertex at:,16
<startP3P4>,<num> <startP3P4> <trackP3P4>,1
,<startP3P4> <trackP3P4>,1
Notes:,) Notes: Opponent,1
,Notes: Opponent,1
<movePiece>,<enterBoard> <movePiece> },1
,<movePiece> },1
ifAfterwards:True,< ifAfterwards:True >,1
,ifAfterwards:True >,1
LineOfPlay,sites LineOfPlay ),1
,LineOfPlay ),1
lies,piece lies between,1
,lies between,1
EMPTY,target EMPTY cell,1
,EMPTY cell,1
last-moved,of last-moved Pawn,6
,last-moved Pawn,6
FromTop,) FromTop (,61
,FromTop (,61
singleton,mover/own singleton (,1
,singleton (,1
normal,The normal pawns,2
,normal pawns,2
,INTEGER normal pieces,2
,normal pieces,2
,( normal ),1
,normal ),1
<Variant:endRules>,) <Variant:endRules> ),1
,<Variant:endRules> ),1
Attacker,) Attacker Damage,1
,Attacker Damage,1
cases,placement cases (,1
,cases (,1
previous,the previous position,1
,previous position,1
,the previous pits,1
,previous pits,1
,with previous player,1
,previous player,1
,from previous capture,1
,previous capture,1
,any previous hop,1
,previous hop,1
value:120,state:1 value:120 ),1
,value:120 ),1
3-stack/catapult,a 3-stack/catapult .,1
,3-stack/catapult .,1
<260>,<64> <260> STRING,1
,<260> STRING,1
stone,a stone left,2
,stone left,2
<175>,<49> <175> STRING,1
,<175> STRING,1
stop:,) stop: (,5
,stop: (,20
,N stop: (,5
,#1 stop: (,5
,Orthogonal stop: (,1
,#2 stop: (,4
<updateOption>,{ <updateOption> },1
,<updateOption> },1
ones,The ones moving,1
,ones moving,1
location,to location is,1
,to location --COMMA--,1
,location is,1
,location --COMMA--,1
,Save location of,6
,location of,10
,#1 location of,2
,#3 location of,1
,#2 location of,1
,empty location (,1
,location (,1
,starting location .,1
,location .,1
<Hexagon>,STRING <Hexagon> <,3
,<Hexagon> <,3
passing,--COMMA-- passing and,1
,passing and,1
<Challenge:sum>,Sum <Challenge:sum> ),1
,<Challenge:sum> ),1
num:8,from:0 num:8 ),2
,num:8 ),4
,) num:8 ),2
num:4,from:0 num:4 ),35
,num:4 ),43
,} num:4 ),4
,) num:4 ),4
num:5,from:0 num:5 ),2
,num:5 ),6
,) num:5 ),4
num:6,from:0 num:6 ),16
,num:6 ),17
,d:6 num:6 ),1
Var,set Var STRING,256
,Var STRING,256
,set Var (,44
,Var (,44
,set Var INTEGER,39
,Var INTEGER,39
,set Var #1,2
,Var #1,2
,set Var <ExtraCapture:num>,1
,Var <ExtraCapture:num>,1
,in Var .,6
,Var .,6
reach,to reach a,1
,reach a,1
num:7,from:0 num:7 ),4
,num:7 ),4
<HalfRightInnerP2>,<HalfRightInnerP1> <HalfRightInnerP2> },1
,<HalfRightInnerP2> },1
-10,INTEGER -10 .,2
,-10 .,2
,INTEGER -10 ),1
,-10 ),1
Non-Pawn,) Non-Pawn Pieces,1
,Non-Pawn Pieces,1
type,piece type hopped,1
,type hopped,1
-11,INTEGER -11 .,1
,-11 .,1
Wazir,) Wazir (,1
,Wazir (,1
,to Wazir .,2
,Wazir .,2
<LB2>,<LF2> <LB2> <RF2>,2
,<LB2> <RF2>,2
count:<Play:numKings>,) count:<Play:numKings> ),1
,count:<Play:numKings> ),1
seconds,few seconds after,1
,seconds after,1
Double-step,) Double-step non-capturing,1
,Double-step non-capturing,1
19>,<8 19> <7,1
,19> <7,1
Layakúcan,) Layakúcan (,1
,Layakúcan (,1
between,( between if:,176
,( between ),768
,between if:,176
,between ),768
,( between (,395
,between (,395
,( between #2,10
,between #2,10
,is between the,2
,between the,2
,Map between level,1
,between level,1
,( between STRING,14
,between STRING,14
,( between <Capture:distance>,2
,between <Capture:distance>,2
,( between #1,7
,between #1,7
,( between before:,30
,between before:,30
,( between before:9,4
,between before:9,4
,( between before:1,3
,between before:1,3
,( between before:3,2
,between before:3,2
,( between before:2,1
,between before:2,1
,( between if:True,38
,between if:True,38
,- between clause,1
,between clause,1
,lies between two,1
,between two,1
<MainWinC>,<BoardDef> <MainWinC> <MainWin1>,1
,<MainWinC> <MainWin1>,1
<Board:MiddleTrack>,STRING <Board:MiddleTrack> loop:True,1
,<Board:MiddleTrack> loop:True,1
<pathRule>,<start> <pathRule> },1
,<pathRule> },1
phase,( phase STRING,748
,phase STRING,748
,the phase here,4
,phase here,4
,( phase of:,20
,phase of:,20
,simultaneous phase .,1
,phase .,3
,playing phase .,1
,turn phase .,1
,pie phase (,1
,phase (,1
<direction>,{ <direction> },2
,<direction> },2
,STRING <direction> <then>,2
,<direction> <then>,2
<Player:track>,) <Player:track> use:Edge,1
,<Player:track> use:Edge,1
,STRING <Player:track> loop:True,1
,<Player:track> loop:True,1
efficiency,for efficiency in,1
,efficiency in,1
goal,the goal of,1
,goal of,3
,The goal of,2
<Pawn2Start>,<Knight2Start> <Pawn2Start> <RegionDarkPhase>,1
,<Pawn2Start> <RegionDarkPhase>,1
method,Capture method in,4
,method in,4
<BoardConfig:Pawn2Start>,STRING <BoardConfig:Pawn2Start> ),1
,<BoardConfig:Pawn2Start> ),1
turns:5,spiral turns:5 sites:86,3
,turns:5 sites:86,3
,spiral turns:5 sites:88,1
,turns:5 sites:88,1
<Sow>,STRING <Sow> args:,2
,<Sow> args:,2
Wellisch's,STRING Wellisch's STRING,1
,In Wellisch's version,1
,Wellisch's STRING,1
,Wellisch's version,1
<HalfRightInnerP1>,<CCW2> <HalfRightInnerP1> <HalfRightInnerP2>,1
,<HalfRightInnerP1> <HalfRightInnerP2>,1
push,( push (,2
,push (,2
<LB1>,<LF1> <LB1> <RF1>,2
,<LB1> <RF1>,2
Care,. Care is,2
,Care is,2
<Step:to>,All <Step:to> ),1
,<Step:to> ),1
exist,site exist (,5
,exist (,5
idintify,used idintify suicidal,1
,idintify suicidal,1
Next,handSite Next ),48
,Next ),949
,STRING Next ),353
,handSite Next INTEGER,1
,Next INTEGER,2
,sites Next ),98
,Pieces Next ),168
,sites Next STRING,43
,Next STRING,54
,is Next Mover,26
,Next Mover,31
,Moves Next ),126
,result Next Loss,14
,Next Loss,14
,Pieces Next STRING,11
,result Next Win,23
,Next Win,23
,Pieces Next in:,11
,Next in:,13
,is Next P1,3
,Next P1,3
,is Next Prev,3
,Next Prev,3
,mapEntry Next ),6
,Player Next ),7
,result Next <Result>,1
,Next <Result>,1
,Connected Next ),1
,result Next <Result:next>,1
,Next <Result:next>,1
,is Next (,5
,Next (,39
,Piece Next ),96
,Winning Next (,4
,STRING Next (,11
,Value Next (,2
,#1 Next ),2
,amount Next ),3
,STRING Next in:,2
,STRING Next Mover,3
,Mover Next ),19
,is Next P2,1
,Next P2,1
,Score Next (,13
,score Next ),18
,) Next top:True,2
,Next top:True,2
,<BoardShape:directionsUsed> Next ),1
,Orthogonal Next ),1
,Prev Next ),1
,) Next ),1
,) Next Mover,2
,Mover Next (,4
,addScore Next INTEGER,1
following,in following the,1
,following the,1
exact,( exact #1,2
,exact #1,2
,( exact (,12
,exact (,12
,( exact STRING,2
,exact STRING,2
,( exact INTEGER,109
,exact INTEGER,109
,( exact #3,27
,exact #3,27
<85>,STRING <85> <,2
,<85> <,2
,STRING <85> STRING,1
,<85> STRING,1
Level,forEach Level (,82
,Level (,94
,where Level STRING,17
,Level STRING,17
,where Level (,12
<Player:tracks>,) <Player:tracks> use:Vertex,1
,<Player:tracks> use:Vertex,1
,) <Player:tracks> use:Edge,6
,<Player:tracks> use:Edge,6
Coskey,. Coskey --COMMA--,8
,Coskey --COMMA--,9
,Jay Coskey --COMMA--,1
column:,row:0 column: (,11
,) column: (,24
,column: (,35
fromIncluded:True,from:#1 fromIncluded:True to:#2,2
,fromIncluded:True to:#2,2
surrounded,orthogonally surrounded (,1
,surrounded (,1
,fully surrounded and,1
,surrounded and,1
<Placement:Pawn2>,STRING <Placement:Pawn2> ),1
,<Placement:Pawn2> ),1
<move>,{ <move> <playMove>,1
,<move> <playMove>,1
,<num> <move> },1
,<move> },6
,{ <move> },4
,<start> <move> },1
<Player:initHorse>,{ <Player:initHorse> },1
,<Player:initHorse> },1
Large,- Large Piece,1
,Large Piece,1
range,( range INTEGER,91
,range INTEGER,91
,( range #1,1
,( range (,1
,range #1,1
,range (,1
-30,rotate -30 (,1
,-30 (,1
<directionUsed>,<gridType> <directionUsed> <diagShow>,3
,<directionUsed> <diagShow>,3
our,of our piece,1
,our piece,1
,into our current,2
,our current,2
<p1Moves>,<board> <p1Moves> },1
,<p1Moves> },1
out,move out of,2
,filter out Spartan,1
,out of,2
,out Spartan,1
-36,INTEGER -36 ),1
,-36 ),1
<Variant:opening>,{ <Variant:opening> (,1
,<Variant:opening> (,1
coord,( coord STRING,104
,coord STRING,104
,( coord row:0,13
,( coord row:,33
,coord row:0,13
,coord row:,33
,( coord #1,3
,( coord #2,3
,( coord #3,3
,( coord #4,3
,( coord #5,3
,( coord #6,3
,( coord #7,3
,( coord #8,3
,coord #1,3
,coord #2,3
,coord #3,3
,coord #4,3
,coord #5,3
,coord #6,3
,coord #7,3
,coord #8,3
blocked,Remove blocked enemy,3
,blocked enemy,3
,are blocked (,1
,blocked (,1
flat,All flat sides,1
,One flat and,1
,Two flat and,1
,Two flat or,1
,flat sides,1
,flat and,2
,flat or,1
<Player:diceHand>,STRING <Player:diceHand> ),1
,<Player:diceHand> ),1
to:#1,What to:#1 ),2
,True to:#1 ),1
,False to:#1 ),1
,to:#1 ),4
leap,may leap two,1
,leap two,1
place,( place STRING,3753
,place STRING,3753
,( place Stack,1167
,place Stack,1167
,to place it,1
,place it,1
,( place Random,33
,place Random,33
,( place <Tiling:piece1>,2
,( place <Tiling:piece2>,2
,place <Tiling:piece1>,2
,place <Tiling:piece2>,2
,to place sites,1
,place sites,1
,take place when,1
,takes place --COMMA--,1
,takes place .,1
,place when,1
,place --COMMA--,1
,place .,1
,to place wins,1
,place wins,1
,) place on,2
,place on,2
,must place a,1
,place a,1
,( place #1,6
,place #1,6
<To>,to <To> ),1
,STRING <To> args:,1
,<To> ),1
,<To> args:,1
to:#2,from:#1 to:#2 ),5
,fromIncluded:True to:#2 ),2
,to:#2 ),7
phases:,) phases: {,287
,phases: {,327
,< phases: {,10
,rules phases: {,16
,<Players:start> phases: {,2
,<Start:rules> phases: {,3
,<Board:start> phases: {,2
,<Boundary:cornerSetup> phases: {,2
,<Meta:rule> phases: {,1
,<Rules:start> phases: {,2
,STRING phases: {,2
regular,( regular Star,14
,regular Star,14
<stores>,<tracks> <stores> <start>,1
,<stores> <start>,1
,<directionP2> <stores> },1
,<stores> },1
<doubleStep>,{ <doubleStep> },1
,<doubleStep> },1
<Adjacent>,> <Adjacent> <Hidden>,2
,<Hidden> <Adjacent> STRING,2
,<Adjacent> <Hidden>,2
,<Adjacent> STRING,4
,STRING <Adjacent> STRING,2
<Row:trackCW2>,STRING <Row:trackCW2> loop:True,1
,<Row:trackCW2> loop:True,1
<BoardConfig:RegionLightPhase>,Phase <BoardConfig:RegionLightPhase> ),1
,<BoardConfig:RegionLightPhase> ),1
-45,rotate -45 (,1
,-45 (,1
filter,will filter out,1
,filter out,1
,to filter the,1
,filter the,1
args:,<Num> args: {,10
,args: {,514
,<Start> args: {,15
,<Board> args: {,153
,<Tiger> args: {,2
,<Jump> args: {,3
,<Move> args: {,2
,<Place> args: {,1
,<Variant> args: {,25
,<Moves> args: {,2
,<Goat> args: {,2
,<Fox> args: {,1
,<Play> args: {,15
,<Dice> args: {,5
,<Players> args: {,17
,<Player> args: {,31
,<End> args: {,11
,<Track> args: {,3
,<Throw> args: {,1
,<Ruleset> args: {,1
,<Pieces> args: {,1
,<Version> args: {,23
,<Tiling> args: {,4
,<Each> args: {,1
,<Stack> args: {,2
,<Scoring> args: {,4
,<Phase> args: {,1
,<Capture> args: {,4
,<Sow> args: {,2
,<Row> args: {,17
,<ExtraCapture> args: {,2
,<Counters> args: {,1
,<Rightmost> args: {,1
,<Column> args: {,1
,<Skip> args: {,1
,<Scale> args: {,1
,<Result> args: {,15
,<Rows> args: {,5
,<Columns> args: {,5
,<Tower> args: {,1
,<Army> args: {,1
,<Rules> args: {,4
,<Boundary> args: {,2
,<Meta> args: {,5
,<BoardSize> args: {,11
,<Swap> args: {,1
,<Edge> args: {,2
,<Size> args: {,9
,<Group> args: {,1
,<Shape> args: {,1
,<Stars> args: {,1
,<Balance> args: {,1
,<Model> args: {,1
,<Remove> args: {,2
,<Exact> args: {,1
,<To> args: {,1
,<Piece> args: {,1
,<Disc> args: {,1
,<Repetition> args: {,2
,<Jarl> args: {,1
,<Tag> args: {,1
,<Elephant> args: {,1
,<BoardConfig> args: {,1
,<NumOfPlayers> args: {,2
,<Placement> args: {,2
,<PlacementConditions> args: {,1
,<PiecePlacement> args: {,1
,<High> args: {,1
,<Step> args: {,1
,<Slide> args: {,1
,<Option> args: {,1
,<ThrowSix> args: {,1
,<Scenario> args: {,1
,<FogOfWar> args: {,1
,<Doctrine1> args: {,1
,<Doctrine2> args: {,1
,<Doctrine3> args: {,1
,<Doctrine4> args: {,1
,<CheckmateRule> args: {,1
,<Movement> args: {,1
,<CapThreshold> args: {,1
,<GType> args: {,2
,<SType> args: {,2
,<BoardShape> args: {,7
,<Line> args: {,1
,<Connection> args: {,2
,<TurnType> args: {,1
,<NumberPlayers> args: {,1
,<CapOption> args: {,1
,<ChosenHop> args: {,1
,<Multi> args: {,1
,<Equi> args: {,1
,<PlaceDisc> args: {,1
,<ScoreOption> args: {,1
,<Center> args: {,1
,<CellBackground> args: {,1
,<PlaceBy> args: {,1
,<NeighborsOf> args: {,1
,<Variants> args: {,1
,<Dual> args: {,1
,<Challenge> args: {,15
,<SafeTeleportation> args: {,1
,<Robots> args: {,1
,<challenge> args: {,2
,<OuterRing> args: {,1
,<Minotaur> args: {,2
site,( site ),1051
,site ),1051
,a site to,1
,site to,2
,empty site around,1
,site around,1
,To site #2,1
,empty site .,1
,site #2,3
,site .,2
,- site (,2
,site (,3
,) site exist,5
,site exist,5
,a site where,1
,site where,1
,central site .,1
,central site to,1
,at site #1,1
,against site #1,1
,from site #2,2
,if site #1,1
,fire site --COMMA--,1
,site #1,3
,site --COMMA--,1
,#2 site that,1
,site that,1
,by site (,1
,Suicidal site determination,1
,site determination,1
<BoardConfig:BoardLayout>,board <BoardConfig:BoardLayout> ),1
,<BoardConfig:BoardLayout> ),1
When,* When pieces,1
,. When a,1
,* When a,1
,* When the,2
,When pieces,1
,When a,2
,When the,2
depth,INTEGER depth ),2
,depth ),2
Sometimes,. Sometimes the,1
,Sometimes the,1
count:<Num:piece>,STRING count:<Num:piece> ),3
,count:<Num:piece> ),3
<innerInitP1>,<track2> <innerInitP1> <innerInitP2>,1
,<innerInitP1> <innerInitP2>,1
elements,unique elements ?,1
,elements ?,1
num:1,d:4 num:1 ),1
,num:1 ),89
,dice num:1 ),2
,d:6 num:1 ),1
,d:7 num:1 ),1
,from:0 num:1 ),2
,from:1 num:1 ),3
,d:8 num:1 ),1
,from:2 num:1 ),1
,) num:1 ),77
num:2,dice num:2 ),13
,num:2 ),57
,d:6 num:2 ),25
,d:4 num:2 ),3
,from:0 num:2 ),3
,} num:2 ),4
,from:1 num:2 ),1
,) num:2 ),8
<BoardShape>,<NumPlayers> <BoardShape> <BoardRegions>,2
,<BoardShape> <BoardRegions>,2
,STRING <BoardShape> args:,7
,<BoardShape> args:,7
num:3,d:6 num:3 ),6
,num:3 ),29
,} num:3 ),4
,d:7 num:3 ),2
,dice num:3 ),6
,from:0 num:3 ),9
,) num:3 ),2
<terrainScale>,<pieceFlip> <terrainScale> },1
,<terrainScale> },1
<HomeTrack2>,<size> <HomeTrack2> <MiddleTrack>,1
,<HomeTrack2> <MiddleTrack>,1
<slide_spaces>,<slide_dir> <slide_spaces> <condition>,3
,<slide_spaces> <condition>,3
<Fox:stepMove>,<Fox:hopCapture> <Fox:stepMove> ),1
,<Fox:stepMove> ),1
argument,STRING argument where,3
,argument where,3
Rightward,{ Rightward Forwards,3
,Rightward Forwards,3
,Forwards Rightward Leftward,14
,Rightward Leftward,144
,Leftward Rightward },2
,Rightward },3
,Forward Rightward Leftward,33
,{ Rightward Leftward,51
,BL Rightward Leftward,12
,Backward Rightward Leftward,18
,{ Rightward FR,2
,FL Rightward Leftward,11
,Adjacent Rightward ),1
,Rightward FR,2
,Rightward ),1
,{ Rightward FL,1
,Backwards Rightward Leftward,3
,STRING Rightward (,1
,FR Rightward Leftward,2
,Leftward Rightward FL,1
,FR Rightward },1
,Rightward FL,2
,Rightward (,1
<Player:init>,{ <Player:init> },1
,<Player:init> },1
2-step,Non-capturing 2-step advancement,2
,2-step advancement,2
own,his own ),1
,own ),1
,Update own states,1
,own states,1
,it's own double,1
,own double,1
<Pawn1Start>,<BoardLayout> <Pawn1Start> <King2Start>,1
,<Pawn1Start> <King2Start>,1
<Board:MainWin0>,<= <Board:MainWin0> (,2
,<Board:MainWin0> (,2
<removeRule>,<rulesCommander> <removeRule> <start>,1
,<removeRule> <start>,1
follow-up,handling follow-up movement,1
,follow-up movement,1
King,) King movement,7
,) King movement:,3
,King movement,7
,King movement:,3
,the King nor,1
,a King is,1
,another's King takes,1
,3's King --COMMA--,1
,3's King until,1
,King nor,1
,King is,1
,King takes,1
,King --COMMA--,1
,King until,1
,) King (,8
,King (,8
<170>,<149> <170> STRING,1
,<170> STRING,1
describing,rules describing in,1
,describing in,1
<innerInitP2>,<innerInitP1> <innerInitP2> },1
,<innerInitP2> },1
Horse,) Horse (,6
,Horse (,6
only,the only enemy,1
,only enemy,1
,sow only one,1
,only one,1
,pits only if,1
,only if,1
,can only take,1
,can only be,1
,only take,1
,only be,1
,slide only on,1
,only on,1
,diagonals only .,1
,only .,1
should,it should be,1
,game should stop,1
,should be,2
,should stop,1
,It should be,1
<40>,STRING <40> <,3
,<40> <,3
,STRING <40> STRING,3
,<40> STRING,4
,<9> <40> STRING,1
<rightMostInnerHoleP1>,<thirdHoleInnerP1> <rightMostInnerHoleP1> <thirdHoleInnerP2>,1
,<rightMostInnerHoleP1> <thirdHoleInnerP2>,1
RookLeft2Start,> RookLeft2Start STRING,2
,RookLeft2Start STRING,2
<Placement:Pawn1>,STRING <Placement:Pawn1> ),1
,<Placement:Pawn1> ),1
Script,- Script implements,1
,Script implements,1
<Rightmost>,STRING <Rightmost> args:,1
,<Rightmost> args:,1
<Board:rowSize>,STRING <Board:rowSize> ),4
,<Board:rowSize> ),4
curious,a curious thing,1
,curious thing,1
individual,the individual hop,1
,Processing individual move,1
,each individual Move:,1
,individual hop,1
,individual move,1
,individual Move:,1
like,made like in,1
,like in,1
SidesNoCorners,INTEGER SidesNoCorners ),1
,SidesNoCorners ),1
goes,piece goes to,3
,goes to,4
,when goes to,1
ruleset,( ruleset STRING,367
,ruleset STRING,367
<Row:size>,STRING <Row:size> ),15
,<Row:size> ),19
,{ <Row:size> (,1
,INTEGER <Row:size> ),4
,* <Row:size> INTEGER,3
,+ <Row:size> INTEGER,1
,<Row:size> (,1
,<Row:size> INTEGER,4
,INTEGER <Row:size> store:None,1
,<Row:size> store:None,1
<InitTwoSeeds>,<InitOneSeed> <InitTwoSeeds> },1
,<InitTwoSeeds> },1
Bishop_noCross,to Bishop_noCross .,2
,Bishop_noCross .,2
<Board:HalfRightInnerP1>,{ <Board:HalfRightInnerP1> },1
,<Board:HalfRightInnerP1> },1
<Players:player1>,Moves <Players:player1> ),1
,INTEGER <Players:player1> ),1
,result <Players:player1> Win,1
,<Players:player1> ),2
,<Players:player1> Win,1
entrenchment,build entrenchment on,1
,each entrenchment --COMMA--,1
,an entrenchment against,1
,an entrenchment at,1
,from entrenchment ),1
,an entrenchment (,1
,entrenchment on,1
,entrenchment --COMMA--,1
,entrenchment against,1
,entrenchment at,1
,entrenchment ),1
,entrenchment (,1
<Robots>,STRING <Robots> args:,1
,<Robots> args:,1
Active,count Active ),7
,is Active P1,7
,is Active P2,7
,is Active P3,7
,is Active P4,7
,Active ),7
,Active P1,7
,Active P2,7
,Active P3,7
,Active P4,7
,is Active #1,6
,Active #1,6
,is Active (,12
,Active (,12
<Board:HalfRightInnerP2>,{ <Board:HalfRightInnerP2> },1
,<Board:HalfRightInnerP2> },1
<pieces>,{ <pieces> },2
,<pieces> },2
,<boardSize> <pieces> <random>,1
,<pieces> <random>,1
,{ <pieces> <start>,1
,<pieces> <start>,1
<Stack:limit>,) <Stack:limit> ),2
,<Stack:limit> ),2
kalahs,) kalahs (,39
,kalahs (,41
,<Track:stores> kalahs (,1
,<Players:store> kalahs (,1
purposes,terrain purposes ),1
,purposes ),1
<41>,STRING <41> STRING,1
,<41> STRING,1
rectangle,( rectangle INTEGER,487
,rectangle INTEGER,487
,( rectangle <Board:size>,4
,rectangle <Board:size>,4
,( rectangle <Rows:num>,4
,rectangle <Rows:num>,4
,( rectangle (,4
,rectangle (,4
,( rectangle STRING,1
,rectangle STRING,1
,( rectangle <Row:num>,1
,rectangle <Row:num>,1
,( rectangle <Rows>,1
,rectangle <Rows>,1
,( rectangle <Challenge:size>,2
,rectangle <Challenge:size>,2
rotational,prevent rotational symmetrical,1
,rotational symmetrical,1
Murus,Advanced Murus Gallicus,1
,Murus Gallicus,2
here,phase here ),4
,here ),5
,move here ),1
,promotion here .,1
,here .,1
checkmate,in checkmate --COMMA--,1
,checkmate --COMMA--,1
top:False,by:Mover top:False ),5
,top:False ),21
,by:#1 top:False ),8
,by:All top:False ),1
,by:Enemy top:False ),6
,STRING top:False ),1
note,( note STRING,10
,note STRING,10
,( note player:Mover,5
,( note player:Next,4
,note player:Mover,5
,note player:Next,4
,STRING note prameter-shift,1
,note prameter-shift,1
<BoardConfig:Pawn1Start>,STRING <BoardConfig:Pawn1Start> ),1
,<BoardConfig:Pawn1Start> ),1
use:Vertex,) use:Vertex ),225
,use:Vertex ),336
,<Board:type> use:Vertex ),10
,} use:Vertex ),83
,<Players:tracks> use:Vertex ),1
,<Player:tracks> use:Vertex ),1
,<Board:tracks> use:Vertex ),2
,<Board> use:Vertex ),13
,<Board:track> use:Vertex ),1
line,Shape line (,1
,Colour line (,1
,State line (,1
,Value line (,1
,line (,4
,promotion line to,1
,line to,1
Generic,Generic Sites,1
Lance,) Lance (,6
,Promoted Lance (,5
,Lance (,11
-72,INTEGER -72 ),1
,-72 ),1
scale,( scale INTEGER,86
,scale INTEGER,86
automove,( automove ),1
,automove ),1
includeSelf:False,) includeSelf:False backtracking:True,7
,includeSelf:False backtracking:True,7
,) includeSelf:False ),4
,includeSelf:False ),4
,) includeSelf:False backtracking:,2
,includeSelf:False backtracking:,2
,) includeSelf:False <Skip>,1
,includeSelf:False <Skip>,1
can,( can Move,341
,can Move,341
,piece can jump,1
,can jump,1
,rat can capture,1
,can capture,3
,we can capture,1
,it can capture,1
,pawn can promote,1
,it can whatever,1
,can promote,1
,can whatever,1
,we can unify,1
,rules can be,1
,can unify,1
,can be,2
,Kings can move,1
,Castling can only,1
,Queens can make,1
,Pawns can advance,1
,Pawns can never,1
,Pawns can be,1
,but can only,1
,can move,1
,can only,2
,can make,2
,can advance,1
,can never,1
,piece can stand,1
,infantry can make,1
,can stand,1
<board,STRING <board (,2
,<board (,2
subdivide,( subdivide (,4
,subdivide (,4
Solved,is Solved ),19
,Solved ),19
Move,can Move (,337
,Move (,337
,trackSite Move steps:,44
,Move steps:,44
,trackSite Move steps:#1,10
,Move steps:#1,10
,trackSite Move from:#1,117
,trackSite Move from:,58
,Move from:#1,117
,Move from:,58
,trackSite Move steps:1,3
,trackSite Move steps:2,1
,trackSite Move steps:3,1
,trackSite Move steps:4,1
,trackSite Move steps:5,1
,trackSite Move steps:6,1
,Move steps:1,3
,Move steps:2,1
,Move steps:3,1
,Move steps:4,1
,Move steps:5,1
,Move steps:6,1
,trackSite Move #1,57
,Move #1,57
,) Move thanks,4
,Move thanks,4
,trackSite Move STRING,30
,Move STRING,34
,) Move a,1
,Move a,3
,Leduc Move a,1
,trackSite Move #2,2
,Move #2,2
,{ Move at,1
,) Move at,1
,Move at,2
,can Move STRING,4
,) Move Forward,1
,Move Forward,1
,= Move a,1
,) Move that,1
,STRING Move without,2
,) Move with,3
,Move that,1
,Move without,2
,Move with,3
,) Move spots,1
,Move spots,1
,lines Move is,1
,Move is,1
eligible,is eligible for,2
,eligible for,2
who's,--COMMA-- who's pieces,2
,--COMMA-- who's sites,1
,who's pieces,2
,who's sites,1
<42>,STRING <42> STRING,1
,<42> STRING,1
surround:Next,Loop surround:Next ),1
,surround:Next ),1
<Jump:bean>,or <Jump:bean> (,1
,<Jump:bean> (,1
<ForcedFillLevel>,<DiagShow> <ForcedFillLevel> },1
,<ForcedFillLevel> },1
<Version:hand>,) <Version:hand> (,1
,<Version:hand> (,1
Encyclopedia,Classified Encyclopedia of,1
,Encyclopedia of,1
player,each player .,4
,player .,6
,( player ),11
,player ),12
,( player INTEGER,23
,player INTEGER,23
,( player (,36
,player (,40
,- player (,1
,- player #2,1
,player #2,5
,( player N,118
,( player S,118
,player N,118
,player S,118
,( player SE,1
,( player NW,1
,player SE,1
,player NW,1
,( player W,12
,player W,12
,( player E,12
,player E,12
,each player (,1
,that player .,1
,a player (,1
,first player in,4
,previous player ),1
,player in,4
,( player NNE,1
,( player SSW,1
,player NNE,1
,player SSW,1
,( player #2,4
,A player is,1
,a player is,2
,player is,3
,the player chooses,1
,same player .,1
,checkmating player wins,1
,checkmated player loses,1
,remaining player draws,1
,A player not,1
,first player to,1
,player chooses,1
,player wins,1
,player loses,1
,player draws,1
,player not,1
,player to,2
,( player STRING,1
,player STRING,1
,of player to,1
,multi player about,1
,INTEGER player (,1
,player about,1
,one player must,1
,player must,1
,1st player win,1
,player win,1
cost,( cost Edge,6
,cost Edge,6
,( cost Vertex,1
,cost Vertex,1
will,This will filter,1
,will filter,1
,also will fail,1
,will fail,1
satisfy,( satisfy {,13
,satisfy {,13
,( satisfy (,6
,satisfy (,6
implementation,current implementation .,1
,implementation .,1
,obvious implementation trick,1
,implementation trick,1
match,( match STRING,6
,match STRING,6
groups,suicidal groups and,1
,groups and,1
Attack,) Attack Moves,1
,counter Attack (,2
,First Attack Multiplier,1
,Counter Attack Multiplier,1
,Attack Moves,1
,Attack (,2
,Attack Multiplier,2
<Board:MainWin1>,<= <Board:MainWin1> (,2
,<Board:MainWin1> (,2
Capture/Release,) Capture/Release effect,3
,Capture/Release effect,3
played,variant played on,1
,is played on,1
,played on,3
,be played on,1
concept:,Key concept: PowerLeft,1
,concept: PowerLeft,1
Reconstruct,To Reconstruct },9
,Reconstruct },9
boolean,( boolean ),2
,boolean ),2
<scores>,<regions> <scores> },1
,<scores> },1
<promotedMove>,<promotedCaptureMove> <promotedMove> <endRule>,1
,<promotedMove> <endRule>,1
<rightMostInnerHoleP2>,<thirdHoleInnerP2> <rightMostInnerHoleP2> },1
,<rightMostInnerHoleP2> },1
locations,swapping locations with,1
,locations with,1
,the locations og,1
,suicide locations (,1
,locations og,1
,locations (,1
<pieceMoves>,{ <pieceMoves> <endRules>,1
,<pieceMoves> <endRules>,1
<43>,STRING <43> STRING,1
,<43> STRING,1